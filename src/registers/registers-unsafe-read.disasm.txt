
registers-unsafe-read:	file format ELF32-arm-little


Disassembly of section .text:

08000188 registers_unsafe_read::init::hfc00ddb4369a652c:
; pub fn init()->(ITM,&'static gpioc::RegisterBlock){
 8000188:      	push	{r7, lr}
 800018a:      	mov	r7, sp
 800018c:      	sub	sp, #0x40
;     let cp = cortex_m::Peripherals::take().unwrap();
 800018e:      	bl	#0x2f6
 8000192:      	str	r0, [sp, #0x8]
 8000194:      	b	#-0x2 <registers_unsafe_read::init::hfc00ddb4369a652c+0xe>
 8000196:      	ldr	r0, [sp, #0x8]
 8000198:      	and	r0, r0, #0x1
 800019c:      	movw	r1, #0x3a78
 80001a0:      	movt	r1, #0x800
 80001a4:      	bl	#0x278
 80001a8:      	b	#-0x2 <registers_unsafe_read::init::hfc00ddb4369a652c+0x22>
;     let dp = stm32f30x::Peripherals::take().unwrap();
 80001aa:      	bl	#0x1a2
 80001ae:      	str	r0, [sp, #0x4]
 80001b0:      	b	#-0x2 <registers_unsafe_read::init::hfc00ddb4369a652c+0x2a>
 80001b2:      	ldr	r0, [sp, #0x4]
 80001b4:      	and	r0, r0, #0x1
 80001b8:      	movw	r1, #0x3a88
 80001bc:      	movt	r1, #0x800
 80001c0:      	bl	#0x290
 80001c4:      	b	#-0x2 <registers_unsafe_read::init::hfc00ddb4369a652c+0x3e>
 80001c6:      	add	r0, sp, #0x10
;     let mut rcc = dp.RCC.constrain();
 80001c8:      	bl	#0x15cc
 80001cc:      	b	#-0x2 <registers_unsafe_read::init::hfc00ddb4369a652c+0x46>
 80001ce:      	add	r0, sp, #0x10
;     Leds::new(dp.GPIOE.split(&mut rcc.ahb));
 80001d0:      	bl	#0x160a
 80001d4:      	b	#-0x2 <registers_unsafe_read::init::hfc00ddb4369a652c+0x4e>
 80001d6:      	add	r0, sp, #0x30
 80001d8:      	bl	#0x30e
 80001dc:      	b	#-0x2 <registers_unsafe_read::init::hfc00ddb4369a652c+0x56>
;     (cp.ITM,unsafe{&*GPIOE::ptr()})
 80001de:      	bl	#0x16fa
 80001e2:      	str	r0, [sp]
 80001e4:      	b	#-0x2 <registers_unsafe_read::init::hfc00ddb4369a652c+0x5e>
 80001e6:      	ldr	r0, [sp]
 80001e8:      	str	r0, [sp, #0xc]
; }
 80001ea:      	ldr	r0, [sp, #0xc]
 80001ec:      	add	sp, #0x40
 80001ee:      	pop	{r7, pc}

080001f0 main:
; #[entry]
 80001f0:      	push	{r7, lr}
 80001f2:      	mov	r7, sp
 80001f4:      	bl	#0x2
 80001f8:      	trap

080001fa registers_unsafe_read::__cortex_m_rt_main::h75022886f07262d4:
; fn main()->! {
 80001fa:      	push	{r7, lr}
 80001fc:      	mov	r7, sp
;     init();
 80001fe:      	bl	#-0x7a
 8000202:      	b	#-0x2 <registers_unsafe_read::__cortex_m_rt_main::h75022886f07262d4+0xa>
 8000204:      	movw	r0, #0x1800
 8000208:      	movt	r0, #0x4800
;         core::ptr::read_volatile(0x4800_1800 as *const u32);
 800020c:      	bl	#0x17f2
 8000210:      	b	#-0x2 <registers_unsafe_read::__cortex_m_rt_main::h75022886f07262d4+0x18>
;     loop{}
 8000212:      	b	#-0x2 <registers_unsafe_read::__cortex_m_rt_main::h75022886f07262d4+0x1a>
 8000214:      	b	#-0x4 <registers_unsafe_read::__cortex_m_rt_main::h75022886f07262d4+0x1a>

08000216 <cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h1830dbb44d97db83:
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 8000216:      	sub	sp, #0x48
 8000218:      	str	r0, [sp, #0x20]
 800021a:      	str	r1, [sp, #0x24]
 800021c:      	ldrb	r2, [r0]
 800021e:      	movs	r3, #0x0
 8000220:      	str	r3, [sp, #0x2c]
 8000222:      	str	r2, [sp, #0x28]
 8000224:      	ldr	r2, [sp, #0x28]
 8000226:      	ldr	r3, [sp, #0x2c]
 8000228:      	str	r1, [sp, #0x10]
 800022a:      	str	r0, [sp, #0xc]
 800022c:      	str	r2, [sp, #0x8]
 800022e:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h1830dbb44d97db83+0x1a>
 8000230:      	ldr	r0, [sp, #0x8]
 8000232:      	ldr	r1, [sp, #0x8]
 8000234:      	str	r1, [sp, #0x34]
 8000236:      	ldr	r2, [sp, #0x10]
 8000238:      	ldrb	r3, [r2]
 800023a:      	mov.w	r12, #0x0
 800023e:      	str.w	r12, [sp, #0x3c]
 8000242:      	str	r3, [sp, #0x38]
 8000244:      	ldr	r3, [sp, #0x38]
 8000246:      	ldr.w	r12, [sp, #0x3c]
 800024a:      	str	r0, [sp, #0x4]
 800024c:      	str	r3, [sp]
 800024e:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h1830dbb44d97db83+0x3a>
 8000250:      	ldr	r0, [sp]
 8000252:      	str	r0, [sp, #0x44]
 8000254:      	ldr	r1, [sp, #0x4]
 8000256:      	cmp	r1, r0
 8000258:      	bne	#0x8 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h1830dbb44d97db83+0x4e>
 800025a:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h1830dbb44d97db83+0x46>
 800025c:      	movs	r0, #0x1
 800025e:      	strb.w	r0, [sp, #0x17]
 8000262:      	b	#0x6 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h1830dbb44d97db83+0x56>
 8000264:      	movs	r0, #0x0
 8000266:      	strb.w	r0, [sp, #0x17]
 800026a:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h1830dbb44d97db83+0x56>
 800026c:      	ldrb.w	r0, [sp, #0x17]
 8000270:      	lsls	r0, r0, #0x1f
 8000272:      	cmp	r0, #0x0
 8000274:      	bne	#0x8 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h1830dbb44d97db83+0x6a>
 8000276:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h1830dbb44d97db83+0x62>
 8000278:      	movs	r0, #0x0
 800027a:      	strb.w	r0, [sp, #0x16]
 800027e:      	b	#0xe <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h1830dbb44d97db83+0x7a>
 8000280:      	ldr	r0, [sp, #0xc]
 8000282:      	str	r0, [sp, #0x18]
 8000284:      	ldr	r1, [sp, #0x10]
 8000286:      	str	r1, [sp, #0x1c]
 8000288:      	movs	r2, #0x1
 800028a:      	strb.w	r2, [sp, #0x16]
 800028e:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h1830dbb44d97db83+0x7a>
 8000290:      	ldrb.w	r0, [sp, #0x16]
 8000294:      	add	sp, #0x48
 8000296:      	bx	lr

08000298 cortex_m::register::primask::read::h2e24f517377e64e3:
; pub fn read() -> Primask {
 8000298:      	push	{r7, lr}
 800029a:      	mov	r7, sp
 800029c:      	sub	sp, #0x10
;                     unsafe { __primask() }
 800029e:      	bl	#0x175a
 80002a2:      	mov	r1, r0
 80002a4:      	str	r0, [sp, #0xc]
 80002a6:      	str	r1, [sp, #0x4]
 80002a8:      	b	#-0x2 <cortex_m::register::primask::read::h2e24f517377e64e3+0x12>
;             if r & (1 << 0) == (1 << 0) {
 80002aa:      	ldr	r0, [sp, #0x4]
 80002ac:      	lsls	r1, r0, #0x1f
 80002ae:      	cmp	r1, #0x0
 80002b0:      	bne	#0x8 <cortex_m::register::primask::read::h2e24f517377e64e3+0x24>
 80002b2:      	b	#-0x2 <cortex_m::register::primask::read::h2e24f517377e64e3+0x1c>
 80002b4:      	movs	r0, #0x0
;                 Primask::Active
 80002b6:      	strb	r0, [r7, #-5]
;             if r & (1 << 0) == (1 << 0) {
 80002ba:      	b	#0x6 <cortex_m::register::primask::read::h2e24f517377e64e3+0x2c>
 80002bc:      	movs	r0, #0x1
;                 Primask::Inactive
 80002be:      	strb	r0, [r7, #-5]
;             if r & (1 << 0) == (1 << 0) {
 80002c2:      	b	#-0x2 <cortex_m::register::primask::read::h2e24f517377e64e3+0x2c>
; }
 80002c4:      	ldrb	r0, [r7, #-5]
 80002c8:      	add	sp, #0x10
 80002ca:      	pop	{r7, pc}

080002cc cortex_m::register::primask::Primask::is_active::h9d108f6dbffb3852:
;     pub fn is_active(self) -> bool {
 80002cc:      	push	{r7, lr}
 80002ce:      	mov	r7, sp
 80002d0:      	sub	sp, #0x10
 80002d2:      	mov	r1, r0
 80002d4:      	strb	r0, [r7, #-1]
;         self == Primask::Active
 80002d8:      	movw	r0, #0x3a9c
 80002dc:      	movt	r0, #0x800
 80002e0:      	ldr	r0, [r0]
 80002e2:      	subs	r2, r7, #0x1
 80002e4:      	str	r0, [sp, #0x8]
 80002e6:      	mov	r0, r2
 80002e8:      	ldr	r2, [sp, #0x8]
 80002ea:      	str	r1, [sp, #0x4]
 80002ec:      	mov	r1, r2
 80002ee:      	bl	#-0xdc
 80002f2:      	str	r0, [sp]
 80002f4:      	b	#-0x2 <cortex_m::register::primask::Primask::is_active::h9d108f6dbffb3852+0x2a>
;     }
 80002f6:      	ldr	r0, [sp]
 80002f8:      	and	r0, r0, #0x1
 80002fc:      	add	sp, #0x10
 80002fe:      	pop	{r7, pc}

08000300 stm32f30x::Peripherals::take::{{closure}}::hf9a27db5dae2f727:
;         cortex_m::interrupt::free(|_| {
 8000300:      	push	{r7, lr}
 8000302:      	mov	r7, sp
 8000304:      	sub	sp, #0x10
 8000306:      	str	r0, [sp, #0xc]
;             if unsafe { DEVICE_PERIPHERALS } {
 8000308:      	movw	r0, #0x0
 800030c:      	movt	r0, #0x2000
 8000310:      	ldrb	r0, [r0]
 8000312:      	lsls	r0, r0, #0x1f
 8000314:      	cmp	r0, #0x0
 8000316:      	bne	#0x6 <stm32f30x::Peripherals::take::{{closure}}::hf9a27db5dae2f727+0x20>
 8000318:      	b	#-0x2 <stm32f30x::Peripherals::take::{{closure}}::hf9a27db5dae2f727+0x1a>
;                 Some(unsafe { Peripherals::steal() })
 800031a:      	bl	#0x15d2
 800031e:      	b	#0x6 <stm32f30x::Peripherals::take::{{closure}}::hf9a27db5dae2f727+0x28>
 8000320:      	movs	r0, #0x0
;                 None
 8000322:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 8000326:      	b	#0x6 <stm32f30x::Peripherals::take::{{closure}}::hf9a27db5dae2f727+0x30>
 8000328:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 800032a:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 800032e:      	b	#-0x2 <stm32f30x::Peripherals::take::{{closure}}::hf9a27db5dae2f727+0x30>
;         })
 8000330:      	ldrb	r0, [r7, #-9]
 8000334:      	add	sp, #0x10
 8000336:      	pop	{r7, pc}

08000338 cortex_m::interrupt::enable::h744ca70088d79cb9:
; pub unsafe fn enable() {
 8000338:      	push	{r7, lr}
 800033a:      	mov	r7, sp
;             __cpsie();
 800033c:      	bl	#0x16b8
 8000340:      	b	#-0x2 <cortex_m::interrupt::enable::h744ca70088d79cb9+0xa>
; }
 8000342:      	pop	{r7, pc}

08000344 cortex_m::interrupt::disable::hbd34a345c86328f2:
; pub fn disable() {
 8000344:      	push	{r7, lr}
 8000346:      	mov	r7, sp
;             __cpsid();
 8000348:      	bl	#0x16a8
 800034c:      	b	#-0x2 <cortex_m::interrupt::disable::hbd34a345c86328f2+0xa>
; }
 800034e:      	pop	{r7, pc}

08000350 stm32f30x::Peripherals::take::h2448bf0502c9a927:
;     pub fn take() -> Option<Self> {
 8000350:      	push	{r7, lr}
 8000352:      	mov	r7, sp
 8000354:      	sub	sp, #0x8
;         cortex_m::interrupt::free(|_| {
 8000356:      	bl	#0x6a
 800035a:      	str	r0, [sp, #0x4]
 800035c:      	b	#-0x2 <stm32f30x::Peripherals::take::h2448bf0502c9a927+0xe>
;     }
 800035e:      	ldr	r0, [sp, #0x4]
 8000360:      	and	r0, r0, #0x1
 8000364:      	add	sp, #0x8
 8000366:      	pop	{r7, pc}

08000368 cortex_m::interrupt::free::h53884283f43c69a1:
; pub fn free<F, R>(f: F) -> R
 8000368:      	push	{r7, lr}
 800036a:      	mov	r7, sp
 800036c:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 800036e:      	bl	#-0xda
 8000372:      	mov	r1, r0
 8000374:      	strb	r0, [r7, #-2]
 8000378:      	str	r1, [sp, #0x8]
 800037a:      	b	#-0x2 <cortex_m::interrupt::free::h53884283f43c69a1+0x14>
;     disable();
 800037c:      	bl	#-0x3c
 8000380:      	b	#-0x2 <cortex_m::interrupt::free::h53884283f43c69a1+0x1a>
;     let r = f(unsafe { &CriticalSection::new() });
 8000382:      	bl	#0x1a4c
 8000386:      	b	#-0x2 <cortex_m::interrupt::free::h53884283f43c69a1+0x20>
 8000388:      	add	r0, sp, #0x10
 800038a:      	str	r0, [sp, #0xc]
 800038c:      	ldr	r0, [sp, #0xc]
 800038e:      	bl	#0x120
 8000392:      	mov	r1, r0
 8000394:      	strb	r0, [r7, #-1]
 8000398:      	str	r1, [sp, #0x4]
 800039a:      	b	#-0x2 <cortex_m::interrupt::free::h53884283f43c69a1+0x34>
;     if primask.is_active() {
 800039c:      	ldr	r0, [sp, #0x8]
 800039e:      	and	r0, r0, #0x1
 80003a2:      	bl	#-0xda
 80003a6:      	str	r0, [sp]
 80003a8:      	b	#-0x2 <cortex_m::interrupt::free::h53884283f43c69a1+0x42>
 80003aa:      	ldr	r0, [sp]
 80003ac:      	lsls	r1, r0, #0x1f
 80003ae:      	cmp	r1, #0x0
 80003b0:      	beq	#0x6 <cortex_m::interrupt::free::h53884283f43c69a1+0x52>
 80003b2:      	b	#-0x2 <cortex_m::interrupt::free::h53884283f43c69a1+0x4c>
;         unsafe { enable() }
 80003b4:      	bl	#-0x80
 80003b8:      	b	#-0x2 <cortex_m::interrupt::free::h53884283f43c69a1+0x52>
; }
 80003ba:      	ldr	r0, [sp, #0x4]
 80003bc:      	and	r0, r0, #0x1
 80003c0:      	add	sp, #0x18
 80003c2:      	pop	{r7, pc}

080003c4 cortex_m::interrupt::free::he2655e165ec51079:
; pub fn free<F, R>(f: F) -> R
 80003c4:      	push	{r7, lr}
 80003c6:      	mov	r7, sp
 80003c8:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 80003ca:      	bl	#-0x136
 80003ce:      	mov	r1, r0
 80003d0:      	strb	r0, [r7, #-2]
 80003d4:      	str	r1, [sp, #0x8]
 80003d6:      	b	#-0x2 <cortex_m::interrupt::free::he2655e165ec51079+0x14>
;     disable();
 80003d8:      	bl	#-0x98
 80003dc:      	b	#-0x2 <cortex_m::interrupt::free::he2655e165ec51079+0x1a>
;     let r = f(unsafe { &CriticalSection::new() });
 80003de:      	bl	#0x19f0
 80003e2:      	b	#-0x2 <cortex_m::interrupt::free::he2655e165ec51079+0x20>
 80003e4:      	add	r0, sp, #0x10
 80003e6:      	str	r0, [sp, #0xc]
 80003e8:      	ldr	r0, [sp, #0xc]
 80003ea:      	bl	#-0xee
 80003ee:      	mov	r1, r0
 80003f0:      	strb	r0, [r7, #-1]
 80003f4:      	str	r1, [sp, #0x4]
 80003f6:      	b	#-0x2 <cortex_m::interrupt::free::he2655e165ec51079+0x34>
;     if primask.is_active() {
 80003f8:      	ldr	r0, [sp, #0x8]
 80003fa:      	and	r0, r0, #0x1
 80003fe:      	bl	#-0x136
 8000402:      	str	r0, [sp]
 8000404:      	b	#-0x2 <cortex_m::interrupt::free::he2655e165ec51079+0x42>
 8000406:      	ldr	r0, [sp]
 8000408:      	lsls	r1, r0, #0x1f
 800040a:      	cmp	r1, #0x0
 800040c:      	beq	#0x6 <cortex_m::interrupt::free::he2655e165ec51079+0x52>
 800040e:      	b	#-0x2 <cortex_m::interrupt::free::he2655e165ec51079+0x4c>
;         unsafe { enable() }
 8000410:      	bl	#-0xdc
 8000414:      	b	#-0x2 <cortex_m::interrupt::free::he2655e165ec51079+0x52>
; }
 8000416:      	ldr	r0, [sp, #0x4]
 8000418:      	and	r0, r0, #0x1
 800041c:      	add	sp, #0x18
 800041e:      	pop	{r7, pc}

08000420 core::option::Option<T>::unwrap::h4077bd55768e8666:
 8000420:      	push	{r7, lr}
 8000422:      	mov	r7, sp
 8000424:      	sub	sp, #0x10
 8000426:      	mov	r2, r0
 8000428:      	strb	r0, [r7, #-5]
 800042c:      	ldrb	r0, [r7, #-5]
 8000430:      	lsls	r3, r0, #0x1f
 8000432:      	cmp	r3, #0x0
 8000434:      	str	r1, [sp, #0x4]
 8000436:      	beq	#0x2 <core::option::Option<T>::unwrap::h4077bd55768e8666+0x1c>
 8000438:      	b	#-0x2 <core::option::Option<T>::unwrap::h4077bd55768e8666+0x1a>
 800043a:      	b	#0x12 <core::option::Option<T>::unwrap::h4077bd55768e8666+0x30>
 800043c:      	movw	r0, #0x3aa0
 8000440:      	movt	r0, #0x800
 8000444:      	movs	r1, #0x2b
 8000446:      	ldr	r2, [sp, #0x4]
 8000448:      	bl	#0x1a94
 800044c:      	trap
 800044e:      	trap
 8000450:      	add	sp, #0x10
 8000452:      	pop	{r7, pc}

08000454 core::option::Option<T>::unwrap::hf23c06a658a6e998:
 8000454:      	push	{r7, lr}
 8000456:      	mov	r7, sp
 8000458:      	sub	sp, #0x10
 800045a:      	mov	r2, r0
 800045c:      	strb	r0, [r7, #-5]
 8000460:      	ldrb	r0, [r7, #-5]
 8000464:      	lsls	r3, r0, #0x1f
 8000466:      	cmp	r3, #0x0
 8000468:      	str	r1, [sp, #0x4]
 800046a:      	beq	#0x2 <core::option::Option<T>::unwrap::hf23c06a658a6e998+0x1c>
 800046c:      	b	#-0x2 <core::option::Option<T>::unwrap::hf23c06a658a6e998+0x1a>
 800046e:      	b	#0x12 <core::option::Option<T>::unwrap::hf23c06a658a6e998+0x30>
 8000470:      	movw	r0, #0x3aa0
 8000474:      	movt	r0, #0x800
 8000478:      	movs	r1, #0x2b
 800047a:      	ldr	r2, [sp, #0x4]
 800047c:      	bl	#0x1a60
 8000480:      	trap
 8000482:      	trap
 8000484:      	add	sp, #0x10
 8000486:      	pop	{r7, pc}

08000488 cortex_m::peripheral::Peripherals::take::hb69571ce85cdb9cd:
;     pub fn take() -> Option<Self> {
 8000488:      	push	{r7, lr}
 800048a:      	mov	r7, sp
 800048c:      	sub	sp, #0x8
;         interrupt::free(|_| {
 800048e:      	bl	#-0x12a
 8000492:      	str	r0, [sp, #0x4]
 8000494:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::hb69571ce85cdb9cd+0xe>
;     }
 8000496:      	ldr	r0, [sp, #0x4]
 8000498:      	and	r0, r0, #0x1
 800049c:      	add	sp, #0x8
 800049e:      	pop	{r7, pc}

080004a0 cortex_m::peripheral::Peripherals::steal::hfce6f20fadf1ab5b:
;     pub unsafe fn steal() -> Self {
 80004a0:      	sub	sp, #0x4
;         TAKEN = true;
 80004a2:      	movw	r0, #0x1
 80004a6:      	movt	r0, #0x2000
 80004aa:      	movs	r1, #0x1
 80004ac:      	strb	r1, [r0]
;     }
 80004ae:      	add	sp, #0x4
 80004b0:      	bx	lr

080004b2 cortex_m::peripheral::Peripherals::take::{{closure}}::h221abcdb800fcee2:
;         interrupt::free(|_| {
 80004b2:      	push	{r7, lr}
 80004b4:      	mov	r7, sp
 80004b6:      	sub	sp, #0x10
 80004b8:      	str	r0, [sp, #0xc]
;             if unsafe { TAKEN } {
 80004ba:      	movw	r0, #0x1
 80004be:      	movt	r0, #0x2000
 80004c2:      	ldrb	r0, [r0]
 80004c4:      	lsls	r0, r0, #0x1f
 80004c6:      	cmp	r0, #0x0
 80004c8:      	bne	#0x6 <cortex_m::peripheral::Peripherals::take::{{closure}}::h221abcdb800fcee2+0x20>
 80004ca:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h221abcdb800fcee2+0x1a>
;                 Some(unsafe { Peripherals::steal() })
 80004cc:      	bl	#-0x30
 80004d0:      	b	#0x6 <cortex_m::peripheral::Peripherals::take::{{closure}}::h221abcdb800fcee2+0x28>
 80004d2:      	movs	r0, #0x0
;                 None
 80004d4:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 80004d8:      	b	#0x6 <cortex_m::peripheral::Peripherals::take::{{closure}}::h221abcdb800fcee2+0x30>
 80004da:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 80004dc:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 80004e0:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h221abcdb800fcee2+0x30>
;         })
 80004e2:      	ldrb	r0, [r7, #-9]
 80004e6:      	add	sp, #0x10
 80004e8:      	pop	{r7, pc}

080004ea f3::led::Leds::new::hd12782896d9c9e38:
;     pub fn new(mut gpioe: gpioe::Parts) -> Self {
 80004ea:      	push	{r4, r5, r6, r7, lr}
 80004ec:      	add	r7, sp, #0xc
 80004ee:      	push.w	{r8, r9, r11}
 80004f2:      	sub	sp, #0x70
 80004f4:      	add	r1, sp, #0x44
;         let n = gpioe
 80004f6:      	str	r0, [sp, #0x40]
 80004f8:      	mov	r0, r1
 80004fa:      	bl	#0x206
 80004fe:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x16>
 8000500:      	add	r0, sp, #0x44
;         let ne = gpioe
 8000502:      	str	r0, [sp, #0x3c]
 8000504:      	ldr	r1, [sp, #0x3c]
 8000506:      	bl	#0x31c
 800050a:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x22>
 800050c:      	add	r0, sp, #0x44
;         let e = gpioe
 800050e:      	str	r0, [sp, #0x38]
 8000510:      	ldr	r1, [sp, #0x38]
 8000512:      	bl	#0x432
 8000516:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x2e>
 8000518:      	add	r0, sp, #0x44
;         let se = gpioe
 800051a:      	str	r0, [sp, #0x34]
 800051c:      	ldr	r1, [sp, #0x34]
 800051e:      	bl	#0x548
 8000522:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x3a>
 8000524:      	add	r0, sp, #0x44
;         let s = gpioe
 8000526:      	str	r0, [sp, #0x30]
 8000528:      	ldr	r1, [sp, #0x30]
 800052a:      	bl	#0x65e
 800052e:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x46>
 8000530:      	add	r0, sp, #0x44
;         let sw = gpioe
 8000532:      	str	r0, [sp, #0x2c]
 8000534:      	ldr	r1, [sp, #0x2c]
 8000536:      	bl	#0x774
 800053a:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x52>
 800053c:      	add	r0, sp, #0x44
;         let w = gpioe
 800053e:      	str	r0, [sp, #0x28]
 8000540:      	ldr	r1, [sp, #0x28]
 8000542:      	bl	#0x88a
 8000546:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x5e>
 8000548:      	add	r0, sp, #0x44
;         let nw = gpioe
 800054a:      	str	r0, [sp, #0x24]
 800054c:      	ldr	r1, [sp, #0x24]
 800054e:      	bl	#0x90
 8000552:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x6a>
;                 n.into(),
 8000554:      	bl	#0xa1a
 8000558:      	str	r0, [sp, #0x20]
 800055a:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x72>
;                 ne.into(),
 800055c:      	bl	#0xa4a
 8000560:      	str	r0, [sp, #0x1c]
 8000562:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x7a>
;                 e.into(),
 8000564:      	bl	#0xa7a
 8000568:      	str	r0, [sp, #0x18]
 800056a:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x82>
;                 se.into(),
 800056c:      	bl	#0xaaa
 8000570:      	str	r0, [sp, #0x14]
 8000572:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x8a>
;                 s.into(),
 8000574:      	bl	#0xabe
 8000578:      	str	r0, [sp, #0x10]
 800057a:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x92>
;                 sw.into(),
 800057c:      	bl	#0xa7e
 8000580:      	str	r0, [sp, #0xc]
 8000582:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0x9a>
;                 w.into(),
 8000584:      	bl	#0xa3e
 8000588:      	str	r0, [sp, #0x8]
 800058a:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0xa2>
;                 nw.into(),
 800058c:      	bl	#0x9fe
 8000590:      	str	r0, [sp, #0x4]
 8000592:      	b	#-0x2 <f3::led::Leds::new::hd12782896d9c9e38+0xaa>
;             leds: [
 8000594:      	ldr	r0, [sp, #0x20]
 8000596:      	strb.w	r0, [sp, #0x48]
 800059a:      	ldr	r1, [sp, #0x1c]
 800059c:      	strb.w	r1, [sp, #0x49]
 80005a0:      	ldr	r2, [sp, #0x18]
 80005a2:      	strb.w	r2, [sp, #0x4a]
 80005a6:      	ldr	r3, [sp, #0x14]
 80005a8:      	strb.w	r3, [sp, #0x4b]
 80005ac:      	ldr.w	r12, [sp, #0x10]
 80005b0:      	strb.w	r12, [sp, #0x4c]
 80005b4:      	ldr.w	lr, [sp, #0xc]
 80005b8:      	strb.w	lr, [sp, #0x4d]
 80005bc:      	ldr	r4, [sp, #0x8]
 80005be:      	strb.w	r4, [sp, #0x4e]
 80005c2:      	ldr	r5, [sp, #0x4]
 80005c4:      	strb.w	r5, [sp, #0x4f]
;         Leds {
 80005c8:      	ldr	r6, [sp, #0x48]
 80005ca:      	ldr.w	r8, [sp, #0x4c]
 80005ce:      	ldr.w	r9, [sp, #0x40]
 80005d2:      	str.w	r8, [r9, #0x4]
 80005d6:      	str.w	r6, [r9]
;     }
 80005da:      	add	sp, #0x70
 80005dc:      	pop.w	{r8, r9, r11}
 80005e0:      	pop	{r4, r5, r6, r7, pc}

080005e2 _ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h5addcb3ea807d4f0E:
;                     pub fn into_push_pull_output(
 80005e2:      	push	{r7, lr}
 80005e4:      	mov	r7, sp
 80005e6:      	sub	sp, #0x38
 80005e8:      	str	r0, [sp, #0x30]
 80005ea:      	str	r1, [sp, #0x34]
 80005ec:      	movs	r2, #0x10
;                         let offset = 2 * $i;
 80005ee:      	str	r2, [sp, #0x14]
 80005f0:      	movs	r2, #0x0
 80005f2:      	strb.w	r2, [sp, #0x18]
 80005f6:      	ldr	r2, [sp, #0x14]
 80005f8:      	str	r2, [sp, #0x10]
 80005fa:      	movs	r2, #0x1
;                         let mode = 0b01;
 80005fc:      	str	r2, [sp, #0x1c]
;                         moder.moder().modify(|r, w| unsafe {
 80005fe:      	str	r1, [sp, #0x8]
 8000600:      	bl	#0x1046
 8000604:      	str	r0, [sp, #0x4]
 8000606:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h5addcb3ea807d4f0E+0x26>
 8000608:      	add	r0, sp, #0x10
 800060a:      	str	r0, [sp, #0x20]
 800060c:      	add	r0, sp, #0x1c
 800060e:      	str	r0, [sp, #0x24]
 8000610:      	ldr	r1, [sp, #0x20]
 8000612:      	ldr	r2, [sp, #0x24]
 8000614:      	ldr	r0, [sp, #0x4]
 8000616:      	bl	#0xaf0
 800061a:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h5addcb3ea807d4f0E+0x3a>
;                         otyper
 800061c:      	ldr	r0, [sp, #0x8]
 800061e:      	bl	#0x103e
 8000622:      	str	r0, [sp]
 8000624:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h5addcb3ea807d4f0E+0x44>
 8000626:      	ldr	r0, [sp]
 8000628:      	bl	#0xf36
 800062c:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h5addcb3ea807d4f0E+0x4c>
;                     }
 800062e:      	add	sp, #0x38
 8000630:      	pop	{r7, pc}

08000632 _ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha62ec29ddb836190E:
;                             .modify(|r, w| unsafe { w.bits(r.bits() & !(0b1 << $i)) });
 8000632:      	push	{r7, lr}
 8000634:      	mov	r7, sp
 8000636:      	sub	sp, #0x18
 8000638:      	str	r0, [sp, #0x10]
 800063a:      	str	r1, [sp, #0x14]
 800063c:      	str	r1, [sp, #0x8]
 800063e:      	bl	#0xf86
 8000642:      	str	r0, [sp, #0x4]
 8000644:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha62ec29ddb836190E+0x14>
 8000646:      	ldr	r0, [sp, #0x4]
 8000648:      	bic	r1, r0, #0x100
 800064c:      	ldr	r0, [sp, #0x8]
 800064e:      	bl	#0xf80
 8000652:      	str	r0, [sp]
 8000654:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha62ec29ddb836190E+0x24>
 8000656:      	ldr	r0, [sp]
 8000658:      	add	sp, #0x18
 800065a:      	pop	{r7, pc}

0800065c _ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf23e7a58844c679bE:
;                         moder.moder().modify(|r, w| unsafe {
 800065c:      	push	{r4, r5, r7, lr}
 800065e:      	add	r7, sp, #0x8
 8000660:      	sub	sp, #0x30
 8000662:      	str	r0, [sp, #0x20]
 8000664:      	str	r1, [sp, #0x24]
 8000666:      	str	r2, [sp, #0x28]
 8000668:      	str	r3, [sp, #0x2c]
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 800066a:      	str	r0, [sp, #0x1c]
 800066c:      	mov	r0, r2
 800066e:      	str	r3, [sp, #0x18]
 8000670:      	str	r1, [sp, #0x14]
 8000672:      	bl	#0xf3c
 8000676:      	str	r0, [sp, #0x10]
 8000678:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf23e7a58844c679bE+0x1e>
 800067a:      	ldr	r0, [sp, #0x1c]
 800067c:      	ldr	r1, [r0]
 800067e:      	and	r2, r1, #0x1f
 8000682:      	movs	r3, #0x3
 8000684:      	lsl.w	r2, r3, r2
 8000688:      	lsrs	r1, r1, #0x5
 800068a:      	cmp	r1, #0x0
 800068c:      	str	r2, [sp, #0xc]
 800068e:      	bne	#0x42 <_ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf23e7a58844c679bE+0x78>
 8000690:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf23e7a58844c679bE+0x36>
 8000692:      	ldr	r0, [sp, #0x10]
 8000694:      	ldr	r1, [sp, #0xc]
 8000696:      	bic.w	r2, r0, r1
 800069a:      	ldr	r3, [sp, #0x14]
 800069c:      	ldr.w	r12, [r3]
 80006a0:      	ldr.w	lr, [sp, #0x1c]
 80006a4:      	ldr.w	r4, [lr]
 80006a8:      	and	r5, r4, #0x1f
 80006ac:      	lsl.w	r12, r12, r5
 80006b0:      	lsrs	r4, r4, #0x5
 80006b2:      	cmp	r4, #0x0
 80006b4:      	str	r2, [sp, #0x8]
 80006b6:      	str.w	r12, [sp, #0x4]
 80006ba:      	bne	#0x2e <_ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf23e7a58844c679bE+0x90>
 80006bc:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf23e7a58844c679bE+0x62>
 80006be:      	ldr	r0, [sp, #0x8]
 80006c0:      	ldr	r1, [sp, #0x4]
 80006c2:      	orrs	r1, r0
 80006c4:      	ldr	r0, [sp, #0x18]
 80006c6:      	bl	#0xef2
 80006ca:      	str	r0, [sp]
 80006cc:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf23e7a58844c679bE+0x72>
;                         });
 80006ce:      	ldr	r0, [sp]
 80006d0:      	add	sp, #0x30
 80006d2:      	pop	{r4, r5, r7, pc}
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 80006d4:      	movw	r0, #0x3b30
 80006d8:      	movt	r0, #0x800
 80006dc:      	movw	r2, #0x3b54
 80006e0:      	movt	r2, #0x800
 80006e4:      	movs	r1, #0x23
 80006e6:      	bl	#0x17f6
 80006ea:      	trap
 80006ec:      	movw	r0, #0x3b30
 80006f0:      	movt	r0, #0x800
 80006f4:      	movw	r2, #0x3b64
 80006f8:      	movt	r2, #0x800
 80006fc:      	movs	r1, #0x23
 80006fe:      	bl	#0x17de
 8000702:      	trap

08000704 _ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h4005040d5eaae8fcE:
;                     pub fn into_push_pull_output(
 8000704:      	push	{r7, lr}
 8000706:      	mov	r7, sp
 8000708:      	sub	sp, #0x38
 800070a:      	str	r0, [sp, #0x30]
 800070c:      	str	r1, [sp, #0x34]
 800070e:      	movs	r2, #0x12
;                         let offset = 2 * $i;
 8000710:      	str	r2, [sp, #0x14]
 8000712:      	movs	r2, #0x0
 8000714:      	strb.w	r2, [sp, #0x18]
 8000718:      	ldr	r2, [sp, #0x14]
 800071a:      	str	r2, [sp, #0x10]
 800071c:      	movs	r2, #0x1
;                         let mode = 0b01;
 800071e:      	str	r2, [sp, #0x1c]
;                         moder.moder().modify(|r, w| unsafe {
 8000720:      	str	r1, [sp, #0x8]
 8000722:      	bl	#0xf24
 8000726:      	str	r0, [sp, #0x4]
 8000728:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h4005040d5eaae8fcE+0x26>
 800072a:      	add	r0, sp, #0x10
 800072c:      	str	r0, [sp, #0x20]
 800072e:      	add	r0, sp, #0x1c
 8000730:      	str	r0, [sp, #0x24]
 8000732:      	ldr	r1, [sp, #0x20]
 8000734:      	ldr	r2, [sp, #0x24]
 8000736:      	ldr	r0, [sp, #0x4]
 8000738:      	bl	#0xa86
 800073c:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h4005040d5eaae8fcE+0x3a>
;                         otyper
 800073e:      	ldr	r0, [sp, #0x8]
 8000740:      	bl	#0xf1c
 8000744:      	str	r0, [sp]
 8000746:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h4005040d5eaae8fcE+0x44>
 8000748:      	ldr	r0, [sp]
 800074a:      	bl	#0xcd4
 800074e:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h4005040d5eaae8fcE+0x4c>
;                     }
 8000750:      	add	sp, #0x38
 8000752:      	pop	{r7, pc}

08000754 _ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8d76059715603437E:
;                             .modify(|r, w| unsafe { w.bits(r.bits() & !(0b1 << $i)) });
 8000754:      	push	{r7, lr}
 8000756:      	mov	r7, sp
 8000758:      	sub	sp, #0x18
 800075a:      	str	r0, [sp, #0x10]
 800075c:      	str	r1, [sp, #0x14]
 800075e:      	str	r1, [sp, #0x8]
 8000760:      	bl	#0xe64
 8000764:      	str	r0, [sp, #0x4]
 8000766:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8d76059715603437E+0x14>
 8000768:      	ldr	r0, [sp, #0x4]
 800076a:      	bic	r1, r0, #0x200
 800076e:      	ldr	r0, [sp, #0x8]
 8000770:      	bl	#0xe5e
 8000774:      	str	r0, [sp]
 8000776:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8d76059715603437E+0x24>
 8000778:      	ldr	r0, [sp]
 800077a:      	add	sp, #0x18
 800077c:      	pop	{r7, pc}

0800077e _ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd4e29d5ba1da8d33E:
;                         moder.moder().modify(|r, w| unsafe {
 800077e:      	push	{r4, r5, r7, lr}
 8000780:      	add	r7, sp, #0x8
 8000782:      	sub	sp, #0x30
 8000784:      	str	r0, [sp, #0x20]
 8000786:      	str	r1, [sp, #0x24]
 8000788:      	str	r2, [sp, #0x28]
 800078a:      	str	r3, [sp, #0x2c]
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 800078c:      	str	r0, [sp, #0x1c]
 800078e:      	mov	r0, r2
 8000790:      	str	r3, [sp, #0x18]
 8000792:      	str	r1, [sp, #0x14]
 8000794:      	bl	#0xe1a
 8000798:      	str	r0, [sp, #0x10]
 800079a:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd4e29d5ba1da8d33E+0x1e>
 800079c:      	ldr	r0, [sp, #0x1c]
 800079e:      	ldr	r1, [r0]
 80007a0:      	and	r2, r1, #0x1f
 80007a4:      	movs	r3, #0x3
 80007a6:      	lsl.w	r2, r3, r2
 80007aa:      	lsrs	r1, r1, #0x5
 80007ac:      	cmp	r1, #0x0
 80007ae:      	str	r2, [sp, #0xc]
 80007b0:      	bne	#0x42 <_ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd4e29d5ba1da8d33E+0x78>
 80007b2:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd4e29d5ba1da8d33E+0x36>
 80007b4:      	ldr	r0, [sp, #0x10]
 80007b6:      	ldr	r1, [sp, #0xc]
 80007b8:      	bic.w	r2, r0, r1
 80007bc:      	ldr	r3, [sp, #0x14]
 80007be:      	ldr.w	r12, [r3]
 80007c2:      	ldr.w	lr, [sp, #0x1c]
 80007c6:      	ldr.w	r4, [lr]
 80007ca:      	and	r5, r4, #0x1f
 80007ce:      	lsl.w	r12, r12, r5
 80007d2:      	lsrs	r4, r4, #0x5
 80007d4:      	cmp	r4, #0x0
 80007d6:      	str	r2, [sp, #0x8]
 80007d8:      	str.w	r12, [sp, #0x4]
 80007dc:      	bne	#0x2e <_ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd4e29d5ba1da8d33E+0x90>
 80007de:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd4e29d5ba1da8d33E+0x62>
 80007e0:      	ldr	r0, [sp, #0x8]
 80007e2:      	ldr	r1, [sp, #0x4]
 80007e4:      	orrs	r1, r0
 80007e6:      	ldr	r0, [sp, #0x18]
 80007e8:      	bl	#0xdd0
 80007ec:      	str	r0, [sp]
 80007ee:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd4e29d5ba1da8d33E+0x72>
;                         });
 80007f0:      	ldr	r0, [sp]
 80007f2:      	add	sp, #0x30
 80007f4:      	pop	{r4, r5, r7, pc}
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 80007f6:      	movw	r0, #0x3b30
 80007fa:      	movt	r0, #0x800
 80007fe:      	movw	r2, #0x3b54
 8000802:      	movt	r2, #0x800
 8000806:      	movs	r1, #0x23
 8000808:      	bl	#0x16d4
 800080c:      	trap
 800080e:      	movw	r0, #0x3b30
 8000812:      	movt	r0, #0x800
 8000816:      	movw	r2, #0x3b64
 800081a:      	movt	r2, #0x800
 800081e:      	movs	r1, #0x23
 8000820:      	bl	#0x16bc
 8000824:      	trap

08000826 _ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17he7063565a1f429bcE:
;                     pub fn into_push_pull_output(
 8000826:      	push	{r7, lr}
 8000828:      	mov	r7, sp
 800082a:      	sub	sp, #0x38
 800082c:      	str	r0, [sp, #0x30]
 800082e:      	str	r1, [sp, #0x34]
 8000830:      	movs	r2, #0x14
;                         let offset = 2 * $i;
 8000832:      	str	r2, [sp, #0x14]
 8000834:      	movs	r2, #0x0
 8000836:      	strb.w	r2, [sp, #0x18]
 800083a:      	ldr	r2, [sp, #0x14]
 800083c:      	str	r2, [sp, #0x10]
 800083e:      	movs	r2, #0x1
;                         let mode = 0b01;
 8000840:      	str	r2, [sp, #0x1c]
;                         moder.moder().modify(|r, w| unsafe {
 8000842:      	str	r1, [sp, #0x8]
 8000844:      	bl	#0xe02
 8000848:      	str	r0, [sp, #0x4]
 800084a:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17he7063565a1f429bcE+0x26>
 800084c:      	add	r0, sp, #0x10
 800084e:      	str	r0, [sp, #0x20]
 8000850:      	add	r0, sp, #0x1c
 8000852:      	str	r0, [sp, #0x24]
 8000854:      	ldr	r1, [sp, #0x20]
 8000856:      	ldr	r2, [sp, #0x24]
 8000858:      	ldr	r0, [sp, #0x4]
 800085a:      	bl	#0x7f4
 800085e:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17he7063565a1f429bcE+0x3a>
;                         otyper
 8000860:      	ldr	r0, [sp, #0x8]
 8000862:      	bl	#0xdfa
 8000866:      	str	r0, [sp]
 8000868:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17he7063565a1f429bcE+0x44>
 800086a:      	ldr	r0, [sp]
 800086c:      	bl	#0xb62
 8000870:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17he7063565a1f429bcE+0x4c>
;                     }
 8000872:      	add	sp, #0x38
 8000874:      	pop	{r7, pc}

08000876 _ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h90a83ea96c35e9b4E:
;                             .modify(|r, w| unsafe { w.bits(r.bits() & !(0b1 << $i)) });
 8000876:      	push	{r7, lr}
 8000878:      	mov	r7, sp
 800087a:      	sub	sp, #0x18
 800087c:      	str	r0, [sp, #0x10]
 800087e:      	str	r1, [sp, #0x14]
 8000880:      	str	r1, [sp, #0x8]
 8000882:      	bl	#0xd42
 8000886:      	str	r0, [sp, #0x4]
 8000888:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h90a83ea96c35e9b4E+0x14>
 800088a:      	ldr	r0, [sp, #0x4]
 800088c:      	bic	r1, r0, #0x400
 8000890:      	ldr	r0, [sp, #0x8]
 8000892:      	bl	#0xd3c
 8000896:      	str	r0, [sp]
 8000898:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h90a83ea96c35e9b4E+0x24>
 800089a:      	ldr	r0, [sp]
 800089c:      	add	sp, #0x18
 800089e:      	pop	{r7, pc}

080008a0 _ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he4eceb4daa4afe75E:
;                         moder.moder().modify(|r, w| unsafe {
 80008a0:      	push	{r4, r5, r7, lr}
 80008a2:      	add	r7, sp, #0x8
 80008a4:      	sub	sp, #0x30
 80008a6:      	str	r0, [sp, #0x20]
 80008a8:      	str	r1, [sp, #0x24]
 80008aa:      	str	r2, [sp, #0x28]
 80008ac:      	str	r3, [sp, #0x2c]
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 80008ae:      	str	r0, [sp, #0x1c]
 80008b0:      	mov	r0, r2
 80008b2:      	str	r3, [sp, #0x18]
 80008b4:      	str	r1, [sp, #0x14]
 80008b6:      	bl	#0xcf8
 80008ba:      	str	r0, [sp, #0x10]
 80008bc:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he4eceb4daa4afe75E+0x1e>
 80008be:      	ldr	r0, [sp, #0x1c]
 80008c0:      	ldr	r1, [r0]
 80008c2:      	and	r2, r1, #0x1f
 80008c6:      	movs	r3, #0x3
 80008c8:      	lsl.w	r2, r3, r2
 80008cc:      	lsrs	r1, r1, #0x5
 80008ce:      	cmp	r1, #0x0
 80008d0:      	str	r2, [sp, #0xc]
 80008d2:      	bne	#0x42 <_ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he4eceb4daa4afe75E+0x78>
 80008d4:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he4eceb4daa4afe75E+0x36>
 80008d6:      	ldr	r0, [sp, #0x10]
 80008d8:      	ldr	r1, [sp, #0xc]
 80008da:      	bic.w	r2, r0, r1
 80008de:      	ldr	r3, [sp, #0x14]
 80008e0:      	ldr.w	r12, [r3]
 80008e4:      	ldr.w	lr, [sp, #0x1c]
 80008e8:      	ldr.w	r4, [lr]
 80008ec:      	and	r5, r4, #0x1f
 80008f0:      	lsl.w	r12, r12, r5
 80008f4:      	lsrs	r4, r4, #0x5
 80008f6:      	cmp	r4, #0x0
 80008f8:      	str	r2, [sp, #0x8]
 80008fa:      	str.w	r12, [sp, #0x4]
 80008fe:      	bne	#0x2e <_ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he4eceb4daa4afe75E+0x90>
 8000900:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he4eceb4daa4afe75E+0x62>
 8000902:      	ldr	r0, [sp, #0x8]
 8000904:      	ldr	r1, [sp, #0x4]
 8000906:      	orrs	r1, r0
 8000908:      	ldr	r0, [sp, #0x18]
 800090a:      	bl	#0xcae
 800090e:      	str	r0, [sp]
 8000910:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he4eceb4daa4afe75E+0x72>
;                         });
 8000912:      	ldr	r0, [sp]
 8000914:      	add	sp, #0x30
 8000916:      	pop	{r4, r5, r7, pc}
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 8000918:      	movw	r0, #0x3b30
 800091c:      	movt	r0, #0x800
 8000920:      	movw	r2, #0x3b54
 8000924:      	movt	r2, #0x800
 8000928:      	movs	r1, #0x23
 800092a:      	bl	#0x15b2
 800092e:      	trap
 8000930:      	movw	r0, #0x3b30
 8000934:      	movt	r0, #0x800
 8000938:      	movw	r2, #0x3b64
 800093c:      	movt	r2, #0x800
 8000940:      	movs	r1, #0x23
 8000942:      	bl	#0x159a
 8000946:      	trap

08000948 _ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h899492ebf2104590E:
;                     pub fn into_push_pull_output(
 8000948:      	push	{r7, lr}
 800094a:      	mov	r7, sp
 800094c:      	sub	sp, #0x38
 800094e:      	str	r0, [sp, #0x30]
 8000950:      	str	r1, [sp, #0x34]
 8000952:      	movs	r2, #0x16
;                         let offset = 2 * $i;
 8000954:      	str	r2, [sp, #0x14]
 8000956:      	movs	r2, #0x0
 8000958:      	strb.w	r2, [sp, #0x18]
 800095c:      	ldr	r2, [sp, #0x14]
 800095e:      	str	r2, [sp, #0x10]
 8000960:      	movs	r2, #0x1
;                         let mode = 0b01;
 8000962:      	str	r2, [sp, #0x1c]
;                         moder.moder().modify(|r, w| unsafe {
 8000964:      	str	r1, [sp, #0x8]
 8000966:      	bl	#0xce0
 800096a:      	str	r0, [sp, #0x4]
 800096c:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h899492ebf2104590E+0x26>
 800096e:      	add	r0, sp, #0x10
 8000970:      	str	r0, [sp, #0x20]
 8000972:      	add	r0, sp, #0x1c
 8000974:      	str	r0, [sp, #0x24]
 8000976:      	ldr	r1, [sp, #0x20]
 8000978:      	ldr	r2, [sp, #0x24]
 800097a:      	ldr	r0, [sp, #0x4]
 800097c:      	bl	#0x956
 8000980:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h899492ebf2104590E+0x3a>
;                         otyper
 8000982:      	ldr	r0, [sp, #0x8]
 8000984:      	bl	#0xcd8
 8000988:      	str	r0, [sp]
 800098a:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h899492ebf2104590E+0x44>
 800098c:      	ldr	r0, [sp]
 800098e:      	bl	#0x9f0
 8000992:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h899492ebf2104590E+0x4c>
;                     }
 8000994:      	add	sp, #0x38
 8000996:      	pop	{r7, pc}

08000998 _ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb5e9c0942da35b52E:
;                         moder.moder().modify(|r, w| unsafe {
 8000998:      	push	{r4, r5, r7, lr}
 800099a:      	add	r7, sp, #0x8
 800099c:      	sub	sp, #0x30
 800099e:      	str	r0, [sp, #0x20]
 80009a0:      	str	r1, [sp, #0x24]
 80009a2:      	str	r2, [sp, #0x28]
 80009a4:      	str	r3, [sp, #0x2c]
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 80009a6:      	str	r0, [sp, #0x1c]
 80009a8:      	mov	r0, r2
 80009aa:      	str	r3, [sp, #0x18]
 80009ac:      	str	r1, [sp, #0x14]
 80009ae:      	bl	#0xc00
 80009b2:      	str	r0, [sp, #0x10]
 80009b4:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb5e9c0942da35b52E+0x1e>
 80009b6:      	ldr	r0, [sp, #0x1c]
 80009b8:      	ldr	r1, [r0]
 80009ba:      	and	r2, r1, #0x1f
 80009be:      	movs	r3, #0x3
 80009c0:      	lsl.w	r2, r3, r2
 80009c4:      	lsrs	r1, r1, #0x5
 80009c6:      	cmp	r1, #0x0
 80009c8:      	str	r2, [sp, #0xc]
 80009ca:      	bne	#0x42 <_ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb5e9c0942da35b52E+0x78>
 80009cc:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb5e9c0942da35b52E+0x36>
 80009ce:      	ldr	r0, [sp, #0x10]
 80009d0:      	ldr	r1, [sp, #0xc]
 80009d2:      	bic.w	r2, r0, r1
 80009d6:      	ldr	r3, [sp, #0x14]
 80009d8:      	ldr.w	r12, [r3]
 80009dc:      	ldr.w	lr, [sp, #0x1c]
 80009e0:      	ldr.w	r4, [lr]
 80009e4:      	and	r5, r4, #0x1f
 80009e8:      	lsl.w	r12, r12, r5
 80009ec:      	lsrs	r4, r4, #0x5
 80009ee:      	cmp	r4, #0x0
 80009f0:      	str	r2, [sp, #0x8]
 80009f2:      	str.w	r12, [sp, #0x4]
 80009f6:      	bne	#0x2e <_ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb5e9c0942da35b52E+0x90>
 80009f8:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb5e9c0942da35b52E+0x62>
 80009fa:      	ldr	r0, [sp, #0x8]
 80009fc:      	ldr	r1, [sp, #0x4]
 80009fe:      	orrs	r1, r0
 8000a00:      	ldr	r0, [sp, #0x18]
 8000a02:      	bl	#0xbb6
 8000a06:      	str	r0, [sp]
 8000a08:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb5e9c0942da35b52E+0x72>
;                         });
 8000a0a:      	ldr	r0, [sp]
 8000a0c:      	add	sp, #0x30
 8000a0e:      	pop	{r4, r5, r7, pc}
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 8000a10:      	movw	r0, #0x3b30
 8000a14:      	movt	r0, #0x800
 8000a18:      	movw	r2, #0x3b54
 8000a1c:      	movt	r2, #0x800
 8000a20:      	movs	r1, #0x23
 8000a22:      	bl	#0x14ba
 8000a26:      	trap
 8000a28:      	movw	r0, #0x3b30
 8000a2c:      	movt	r0, #0x800
 8000a30:      	movw	r2, #0x3b64
 8000a34:      	movt	r2, #0x800
 8000a38:      	movs	r1, #0x23
 8000a3a:      	bl	#0x14a2
 8000a3e:      	trap

08000a40 _ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17heb703ed821990b45E:
;                             .modify(|r, w| unsafe { w.bits(r.bits() & !(0b1 << $i)) });
 8000a40:      	push	{r7, lr}
 8000a42:      	mov	r7, sp
 8000a44:      	sub	sp, #0x18
 8000a46:      	str	r0, [sp, #0x10]
 8000a48:      	str	r1, [sp, #0x14]
 8000a4a:      	str	r1, [sp, #0x8]
 8000a4c:      	bl	#0xb78
 8000a50:      	str	r0, [sp, #0x4]
 8000a52:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17heb703ed821990b45E+0x14>
 8000a54:      	ldr	r0, [sp, #0x4]
 8000a56:      	bic	r1, r0, #0x800
 8000a5a:      	ldr	r0, [sp, #0x8]
 8000a5c:      	bl	#0xb72
 8000a60:      	str	r0, [sp]
 8000a62:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17heb703ed821990b45E+0x24>
 8000a64:      	ldr	r0, [sp]
 8000a66:      	add	sp, #0x18
 8000a68:      	pop	{r7, pc}

08000a6a _ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h0b7e37edb186f1d1E:
;                     pub fn into_push_pull_output(
 8000a6a:      	push	{r7, lr}
 8000a6c:      	mov	r7, sp
 8000a6e:      	sub	sp, #0x38
 8000a70:      	str	r0, [sp, #0x30]
 8000a72:      	str	r1, [sp, #0x34]
 8000a74:      	movs	r2, #0x18
;                         let offset = 2 * $i;
 8000a76:      	str	r2, [sp, #0x14]
 8000a78:      	movs	r2, #0x0
 8000a7a:      	strb.w	r2, [sp, #0x18]
 8000a7e:      	ldr	r2, [sp, #0x14]
 8000a80:      	str	r2, [sp, #0x10]
 8000a82:      	movs	r2, #0x1
;                         let mode = 0b01;
 8000a84:      	str	r2, [sp, #0x1c]
;                         moder.moder().modify(|r, w| unsafe {
 8000a86:      	str	r1, [sp, #0x8]
 8000a88:      	bl	#0xbbe
 8000a8c:      	str	r0, [sp, #0x4]
 8000a8e:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h0b7e37edb186f1d1E+0x26>
 8000a90:      	add	r0, sp, #0x10
 8000a92:      	str	r0, [sp, #0x20]
 8000a94:      	add	r0, sp, #0x1c
 8000a96:      	str	r0, [sp, #0x24]
 8000a98:      	ldr	r1, [sp, #0x20]
 8000a9a:      	ldr	r2, [sp, #0x24]
 8000a9c:      	ldr	r0, [sp, #0x4]
 8000a9e:      	bl	#0x60c
 8000aa2:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h0b7e37edb186f1d1E+0x3a>
;                         otyper
 8000aa4:      	ldr	r0, [sp, #0x8]
 8000aa6:      	bl	#0xbb6
 8000aaa:      	str	r0, [sp]
 8000aac:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h0b7e37edb186f1d1E+0x44>
 8000aae:      	ldr	r0, [sp]
 8000ab0:      	bl	#0x87e
 8000ab4:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h0b7e37edb186f1d1E+0x4c>
;                     }
 8000ab6:      	add	sp, #0x38
 8000ab8:      	pop	{r7, pc}

08000aba _ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h869437ca5deb6e15E:
;                         moder.moder().modify(|r, w| unsafe {
 8000aba:      	push	{r4, r5, r7, lr}
 8000abc:      	add	r7, sp, #0x8
 8000abe:      	sub	sp, #0x30
 8000ac0:      	str	r0, [sp, #0x20]
 8000ac2:      	str	r1, [sp, #0x24]
 8000ac4:      	str	r2, [sp, #0x28]
 8000ac6:      	str	r3, [sp, #0x2c]
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 8000ac8:      	str	r0, [sp, #0x1c]
 8000aca:      	mov	r0, r2
 8000acc:      	str	r3, [sp, #0x18]
 8000ace:      	str	r1, [sp, #0x14]
 8000ad0:      	bl	#0xade
 8000ad4:      	str	r0, [sp, #0x10]
 8000ad6:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h869437ca5deb6e15E+0x1e>
 8000ad8:      	ldr	r0, [sp, #0x1c]
 8000ada:      	ldr	r1, [r0]
 8000adc:      	and	r2, r1, #0x1f
 8000ae0:      	movs	r3, #0x3
 8000ae2:      	lsl.w	r2, r3, r2
 8000ae6:      	lsrs	r1, r1, #0x5
 8000ae8:      	cmp	r1, #0x0
 8000aea:      	str	r2, [sp, #0xc]
 8000aec:      	bne	#0x42 <_ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h869437ca5deb6e15E+0x78>
 8000aee:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h869437ca5deb6e15E+0x36>
 8000af0:      	ldr	r0, [sp, #0x10]
 8000af2:      	ldr	r1, [sp, #0xc]
 8000af4:      	bic.w	r2, r0, r1
 8000af8:      	ldr	r3, [sp, #0x14]
 8000afa:      	ldr.w	r12, [r3]
 8000afe:      	ldr.w	lr, [sp, #0x1c]
 8000b02:      	ldr.w	r4, [lr]
 8000b06:      	and	r5, r4, #0x1f
 8000b0a:      	lsl.w	r12, r12, r5
 8000b0e:      	lsrs	r4, r4, #0x5
 8000b10:      	cmp	r4, #0x0
 8000b12:      	str	r2, [sp, #0x8]
 8000b14:      	str.w	r12, [sp, #0x4]
 8000b18:      	bne	#0x2e <_ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h869437ca5deb6e15E+0x90>
 8000b1a:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h869437ca5deb6e15E+0x62>
 8000b1c:      	ldr	r0, [sp, #0x8]
 8000b1e:      	ldr	r1, [sp, #0x4]
 8000b20:      	orrs	r1, r0
 8000b22:      	ldr	r0, [sp, #0x18]
 8000b24:      	bl	#0xa94
 8000b28:      	str	r0, [sp]
 8000b2a:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h869437ca5deb6e15E+0x72>
;                         });
 8000b2c:      	ldr	r0, [sp]
 8000b2e:      	add	sp, #0x30
 8000b30:      	pop	{r4, r5, r7, pc}
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 8000b32:      	movw	r0, #0x3b30
 8000b36:      	movt	r0, #0x800
 8000b3a:      	movw	r2, #0x3b54
 8000b3e:      	movt	r2, #0x800
 8000b42:      	movs	r1, #0x23
 8000b44:      	bl	#0x1398
 8000b48:      	trap
 8000b4a:      	movw	r0, #0x3b30
 8000b4e:      	movt	r0, #0x800
 8000b52:      	movw	r2, #0x3b64
 8000b56:      	movt	r2, #0x800
 8000b5a:      	movs	r1, #0x23
 8000b5c:      	bl	#0x1380
 8000b60:      	trap

08000b62 _ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfbb61fbc71532ec2E:
;                             .modify(|r, w| unsafe { w.bits(r.bits() & !(0b1 << $i)) });
 8000b62:      	push	{r7, lr}
 8000b64:      	mov	r7, sp
 8000b66:      	sub	sp, #0x18
 8000b68:      	str	r0, [sp, #0x10]
 8000b6a:      	str	r1, [sp, #0x14]
 8000b6c:      	str	r1, [sp, #0x8]
 8000b6e:      	bl	#0xa56
 8000b72:      	str	r0, [sp, #0x4]
 8000b74:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfbb61fbc71532ec2E+0x14>
 8000b76:      	ldr	r0, [sp, #0x4]
 8000b78:      	bic	r1, r0, #0x1000
 8000b7c:      	ldr	r0, [sp, #0x8]
 8000b7e:      	bl	#0xa50
 8000b82:      	str	r0, [sp]
 8000b84:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfbb61fbc71532ec2E+0x24>
 8000b86:      	ldr	r0, [sp]
 8000b88:      	add	sp, #0x18
 8000b8a:      	pop	{r7, pc}

08000b8c _ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17hc3dde9d32702e958E:
;                     pub fn into_push_pull_output(
 8000b8c:      	push	{r7, lr}
 8000b8e:      	mov	r7, sp
 8000b90:      	sub	sp, #0x38
 8000b92:      	str	r0, [sp, #0x30]
 8000b94:      	str	r1, [sp, #0x34]
 8000b96:      	movs	r2, #0x1a
;                         let offset = 2 * $i;
 8000b98:      	str	r2, [sp, #0x14]
 8000b9a:      	movs	r2, #0x0
 8000b9c:      	strb.w	r2, [sp, #0x18]
 8000ba0:      	ldr	r2, [sp, #0x14]
 8000ba2:      	str	r2, [sp, #0x10]
 8000ba4:      	movs	r2, #0x1
;                         let mode = 0b01;
 8000ba6:      	str	r2, [sp, #0x1c]
;                         moder.moder().modify(|r, w| unsafe {
 8000ba8:      	str	r1, [sp, #0x8]
 8000baa:      	bl	#0xa9c
 8000bae:      	str	r0, [sp, #0x4]
 8000bb0:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17hc3dde9d32702e958E+0x26>
 8000bb2:      	add	r0, sp, #0x10
 8000bb4:      	str	r0, [sp, #0x20]
 8000bb6:      	add	r0, sp, #0x1c
 8000bb8:      	str	r0, [sp, #0x24]
 8000bba:      	ldr	r1, [sp, #0x20]
 8000bbc:      	ldr	r2, [sp, #0x24]
 8000bbe:      	ldr	r0, [sp, #0x4]
 8000bc0:      	bl	#0x65a
 8000bc4:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17hc3dde9d32702e958E+0x3a>
;                         otyper
 8000bc6:      	ldr	r0, [sp, #0x8]
 8000bc8:      	bl	#0xa94
 8000bcc:      	str	r0, [sp]
 8000bce:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17hc3dde9d32702e958E+0x44>
 8000bd0:      	ldr	r0, [sp]
 8000bd2:      	bl	#0x89c
 8000bd6:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17hc3dde9d32702e958E+0x4c>
;                     }
 8000bd8:      	add	sp, #0x38
 8000bda:      	pop	{r7, pc}

08000bdc _ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hbf4329039d7754c1E:
;                         moder.moder().modify(|r, w| unsafe {
 8000bdc:      	push	{r4, r5, r7, lr}
 8000bde:      	add	r7, sp, #0x8
 8000be0:      	sub	sp, #0x30
 8000be2:      	str	r0, [sp, #0x20]
 8000be4:      	str	r1, [sp, #0x24]
 8000be6:      	str	r2, [sp, #0x28]
 8000be8:      	str	r3, [sp, #0x2c]
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 8000bea:      	str	r0, [sp, #0x1c]
 8000bec:      	mov	r0, r2
 8000bee:      	str	r3, [sp, #0x18]
 8000bf0:      	str	r1, [sp, #0x14]
 8000bf2:      	bl	#0x9bc
 8000bf6:      	str	r0, [sp, #0x10]
 8000bf8:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hbf4329039d7754c1E+0x1e>
 8000bfa:      	ldr	r0, [sp, #0x1c]
 8000bfc:      	ldr	r1, [r0]
 8000bfe:      	and	r2, r1, #0x1f
 8000c02:      	movs	r3, #0x3
 8000c04:      	lsl.w	r2, r3, r2
 8000c08:      	lsrs	r1, r1, #0x5
 8000c0a:      	cmp	r1, #0x0
 8000c0c:      	str	r2, [sp, #0xc]
 8000c0e:      	bne	#0x42 <_ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hbf4329039d7754c1E+0x78>
 8000c10:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hbf4329039d7754c1E+0x36>
 8000c12:      	ldr	r0, [sp, #0x10]
 8000c14:      	ldr	r1, [sp, #0xc]
 8000c16:      	bic.w	r2, r0, r1
 8000c1a:      	ldr	r3, [sp, #0x14]
 8000c1c:      	ldr.w	r12, [r3]
 8000c20:      	ldr.w	lr, [sp, #0x1c]
 8000c24:      	ldr.w	r4, [lr]
 8000c28:      	and	r5, r4, #0x1f
 8000c2c:      	lsl.w	r12, r12, r5
 8000c30:      	lsrs	r4, r4, #0x5
 8000c32:      	cmp	r4, #0x0
 8000c34:      	str	r2, [sp, #0x8]
 8000c36:      	str.w	r12, [sp, #0x4]
 8000c3a:      	bne	#0x2e <_ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hbf4329039d7754c1E+0x90>
 8000c3c:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hbf4329039d7754c1E+0x62>
 8000c3e:      	ldr	r0, [sp, #0x8]
 8000c40:      	ldr	r1, [sp, #0x4]
 8000c42:      	orrs	r1, r0
 8000c44:      	ldr	r0, [sp, #0x18]
 8000c46:      	bl	#0x972
 8000c4a:      	str	r0, [sp]
 8000c4c:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hbf4329039d7754c1E+0x72>
;                         });
 8000c4e:      	ldr	r0, [sp]
 8000c50:      	add	sp, #0x30
 8000c52:      	pop	{r4, r5, r7, pc}
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 8000c54:      	movw	r0, #0x3b30
 8000c58:      	movt	r0, #0x800
 8000c5c:      	movw	r2, #0x3b54
 8000c60:      	movt	r2, #0x800
 8000c64:      	movs	r1, #0x23
 8000c66:      	bl	#0x1276
 8000c6a:      	trap
 8000c6c:      	movw	r0, #0x3b30
 8000c70:      	movt	r0, #0x800
 8000c74:      	movw	r2, #0x3b64
 8000c78:      	movt	r2, #0x800
 8000c7c:      	movs	r1, #0x23
 8000c7e:      	bl	#0x125e
 8000c82:      	trap

08000c84 _ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd7b6adf9fdacd6e3E:
;                             .modify(|r, w| unsafe { w.bits(r.bits() & !(0b1 << $i)) });
 8000c84:      	push	{r7, lr}
 8000c86:      	mov	r7, sp
 8000c88:      	sub	sp, #0x18
 8000c8a:      	str	r0, [sp, #0x10]
 8000c8c:      	str	r1, [sp, #0x14]
 8000c8e:      	str	r1, [sp, #0x8]
 8000c90:      	bl	#0x934
 8000c94:      	str	r0, [sp, #0x4]
 8000c96:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd7b6adf9fdacd6e3E+0x14>
 8000c98:      	ldr	r0, [sp, #0x4]
 8000c9a:      	bic	r1, r0, #0x2000
 8000c9e:      	ldr	r0, [sp, #0x8]
 8000ca0:      	bl	#0x92e
 8000ca4:      	str	r0, [sp]
 8000ca6:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd7b6adf9fdacd6e3E+0x24>
 8000ca8:      	ldr	r0, [sp]
 8000caa:      	add	sp, #0x18
 8000cac:      	pop	{r7, pc}

08000cae _ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h2d998313c43362bdE:
;                     pub fn into_push_pull_output(
 8000cae:      	push	{r7, lr}
 8000cb0:      	mov	r7, sp
 8000cb2:      	sub	sp, #0x38
 8000cb4:      	str	r0, [sp, #0x30]
 8000cb6:      	str	r1, [sp, #0x34]
 8000cb8:      	movs	r2, #0x1c
;                         let offset = 2 * $i;
 8000cba:      	str	r2, [sp, #0x14]
 8000cbc:      	movs	r2, #0x0
 8000cbe:      	strb.w	r2, [sp, #0x18]
 8000cc2:      	ldr	r2, [sp, #0x14]
 8000cc4:      	str	r2, [sp, #0x10]
 8000cc6:      	movs	r2, #0x1
;                         let mode = 0b01;
 8000cc8:      	str	r2, [sp, #0x1c]
;                         moder.moder().modify(|r, w| unsafe {
 8000cca:      	str	r1, [sp, #0x8]
 8000ccc:      	bl	#0x97a
 8000cd0:      	str	r0, [sp, #0x4]
 8000cd2:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h2d998313c43362bdE+0x26>
 8000cd4:      	add	r0, sp, #0x10
 8000cd6:      	str	r0, [sp, #0x20]
 8000cd8:      	add	r0, sp, #0x1c
 8000cda:      	str	r0, [sp, #0x24]
 8000cdc:      	ldr	r1, [sp, #0x20]
 8000cde:      	ldr	r2, [sp, #0x24]
 8000ce0:      	ldr	r0, [sp, #0x4]
 8000ce2:      	bl	#0x480
 8000ce6:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h2d998313c43362bdE+0x3a>
;                         otyper
 8000ce8:      	ldr	r0, [sp, #0x8]
 8000cea:      	bl	#0x972
 8000cee:      	str	r0, [sp]
 8000cf0:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h2d998313c43362bdE+0x44>
 8000cf2:      	ldr	r0, [sp]
 8000cf4:      	bl	#0x81a
 8000cf8:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h2d998313c43362bdE+0x4c>
;                     }
 8000cfa:      	add	sp, #0x38
 8000cfc:      	pop	{r7, pc}

08000cfe _ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h253b8b5b4eb13bfbE:
;                         moder.moder().modify(|r, w| unsafe {
 8000cfe:      	push	{r4, r5, r7, lr}
 8000d00:      	add	r7, sp, #0x8
 8000d02:      	sub	sp, #0x30
 8000d04:      	str	r0, [sp, #0x20]
 8000d06:      	str	r1, [sp, #0x24]
 8000d08:      	str	r2, [sp, #0x28]
 8000d0a:      	str	r3, [sp, #0x2c]
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 8000d0c:      	str	r0, [sp, #0x1c]
 8000d0e:      	mov	r0, r2
 8000d10:      	str	r3, [sp, #0x18]
 8000d12:      	str	r1, [sp, #0x14]
 8000d14:      	bl	#0x89a
 8000d18:      	str	r0, [sp, #0x10]
 8000d1a:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h253b8b5b4eb13bfbE+0x1e>
 8000d1c:      	ldr	r0, [sp, #0x1c]
 8000d1e:      	ldr	r1, [r0]
 8000d20:      	and	r2, r1, #0x1f
 8000d24:      	movs	r3, #0x3
 8000d26:      	lsl.w	r2, r3, r2
 8000d2a:      	lsrs	r1, r1, #0x5
 8000d2c:      	cmp	r1, #0x0
 8000d2e:      	str	r2, [sp, #0xc]
 8000d30:      	bne	#0x42 <_ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h253b8b5b4eb13bfbE+0x78>
 8000d32:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h253b8b5b4eb13bfbE+0x36>
 8000d34:      	ldr	r0, [sp, #0x10]
 8000d36:      	ldr	r1, [sp, #0xc]
 8000d38:      	bic.w	r2, r0, r1
 8000d3c:      	ldr	r3, [sp, #0x14]
 8000d3e:      	ldr.w	r12, [r3]
 8000d42:      	ldr.w	lr, [sp, #0x1c]
 8000d46:      	ldr.w	r4, [lr]
 8000d4a:      	and	r5, r4, #0x1f
 8000d4e:      	lsl.w	r12, r12, r5
 8000d52:      	lsrs	r4, r4, #0x5
 8000d54:      	cmp	r4, #0x0
 8000d56:      	str	r2, [sp, #0x8]
 8000d58:      	str.w	r12, [sp, #0x4]
 8000d5c:      	bne	#0x2e <_ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h253b8b5b4eb13bfbE+0x90>
 8000d5e:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h253b8b5b4eb13bfbE+0x62>
 8000d60:      	ldr	r0, [sp, #0x8]
 8000d62:      	ldr	r1, [sp, #0x4]
 8000d64:      	orrs	r1, r0
 8000d66:      	ldr	r0, [sp, #0x18]
 8000d68:      	bl	#0x850
 8000d6c:      	str	r0, [sp]
 8000d6e:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h253b8b5b4eb13bfbE+0x72>
;                         });
 8000d70:      	ldr	r0, [sp]
 8000d72:      	add	sp, #0x30
 8000d74:      	pop	{r4, r5, r7, pc}
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 8000d76:      	movw	r0, #0x3b30
 8000d7a:      	movt	r0, #0x800
 8000d7e:      	movw	r2, #0x3b54
 8000d82:      	movt	r2, #0x800
 8000d86:      	movs	r1, #0x23
 8000d88:      	bl	#0x1154
 8000d8c:      	trap
 8000d8e:      	movw	r0, #0x3b30
 8000d92:      	movt	r0, #0x800
 8000d96:      	movw	r2, #0x3b64
 8000d9a:      	movt	r2, #0x800
 8000d9e:      	movs	r1, #0x23
 8000da0:      	bl	#0x113c
 8000da4:      	trap

08000da6 _ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfe4ff9e7888fc0b2E:
;                             .modify(|r, w| unsafe { w.bits(r.bits() & !(0b1 << $i)) });
 8000da6:      	push	{r7, lr}
 8000da8:      	mov	r7, sp
 8000daa:      	sub	sp, #0x18
 8000dac:      	str	r0, [sp, #0x10]
 8000dae:      	str	r1, [sp, #0x14]
 8000db0:      	str	r1, [sp, #0x8]
 8000db2:      	bl	#0x812
 8000db6:      	str	r0, [sp, #0x4]
 8000db8:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfe4ff9e7888fc0b2E+0x14>
 8000dba:      	ldr	r0, [sp, #0x4]
 8000dbc:      	bic	r1, r0, #0x4000
 8000dc0:      	ldr	r0, [sp, #0x8]
 8000dc2:      	bl	#0x80c
 8000dc6:      	str	r0, [sp]
 8000dc8:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfe4ff9e7888fc0b2E+0x24>
 8000dca:      	ldr	r0, [sp]
 8000dcc:      	add	sp, #0x18
 8000dce:      	pop	{r7, pc}

08000dd0 _ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h8af72dccd0961cdbE:
;                     pub fn into_push_pull_output(
 8000dd0:      	push	{r7, lr}
 8000dd2:      	mov	r7, sp
 8000dd4:      	sub	sp, #0x38
 8000dd6:      	str	r0, [sp, #0x30]
 8000dd8:      	str	r1, [sp, #0x34]
 8000dda:      	movs	r2, #0x1e
;                         let offset = 2 * $i;
 8000ddc:      	str	r2, [sp, #0x14]
 8000dde:      	movs	r2, #0x0
 8000de0:      	strb.w	r2, [sp, #0x18]
 8000de4:      	ldr	r2, [sp, #0x14]
 8000de6:      	str	r2, [sp, #0x10]
 8000de8:      	movs	r2, #0x1
;                         let mode = 0b01;
 8000dea:      	str	r2, [sp, #0x1c]
;                         moder.moder().modify(|r, w| unsafe {
 8000dec:      	str	r1, [sp, #0x8]
 8000dee:      	bl	#0x858
 8000df2:      	str	r0, [sp, #0x4]
 8000df4:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h8af72dccd0961cdbE+0x26>
 8000df6:      	add	r0, sp, #0x10
 8000df8:      	str	r0, [sp, #0x20]
 8000dfa:      	add	r0, sp, #0x1c
 8000dfc:      	str	r0, [sp, #0x24]
 8000dfe:      	ldr	r1, [sp, #0x20]
 8000e00:      	ldr	r2, [sp, #0x24]
 8000e02:      	ldr	r0, [sp, #0x4]
 8000e04:      	bl	#0x472
 8000e08:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h8af72dccd0961cdbE+0x3a>
;                         otyper
 8000e0a:      	ldr	r0, [sp, #0x8]
 8000e0c:      	bl	#0x850
 8000e10:      	str	r0, [sp]
 8000e12:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h8af72dccd0961cdbE+0x44>
 8000e14:      	ldr	r0, [sp]
 8000e16:      	bl	#0x6a8
 8000e1a:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h8af72dccd0961cdbE+0x4c>
;                     }
 8000e1c:      	add	sp, #0x38
 8000e1e:      	pop	{r7, pc}

08000e20 _ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h258690331b2108e4E:
;                             .modify(|r, w| unsafe { w.bits(r.bits() & !(0b1 << $i)) });
 8000e20:      	push	{r7, lr}
 8000e22:      	mov	r7, sp
 8000e24:      	sub	sp, #0x18
 8000e26:      	str	r0, [sp, #0x10]
 8000e28:      	str	r1, [sp, #0x14]
 8000e2a:      	str	r1, [sp, #0x8]
 8000e2c:      	bl	#0x798
 8000e30:      	str	r0, [sp, #0x4]
 8000e32:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h258690331b2108e4E+0x14>
 8000e34:      	ldr	r0, [sp, #0x4]
 8000e36:      	bic	r1, r0, #0x8000
 8000e3a:      	ldr	r0, [sp, #0x8]
 8000e3c:      	bl	#0x792
 8000e40:      	str	r0, [sp]
 8000e42:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h258690331b2108e4E+0x24>
 8000e44:      	ldr	r0, [sp]
 8000e46:      	add	sp, #0x18
 8000e48:      	pop	{r7, pc}

08000e4a _ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hac3b4c9decab2e88E:
;                         moder.moder().modify(|r, w| unsafe {
 8000e4a:      	push	{r4, r5, r7, lr}
 8000e4c:      	add	r7, sp, #0x8
 8000e4e:      	sub	sp, #0x30
 8000e50:      	str	r0, [sp, #0x20]
 8000e52:      	str	r1, [sp, #0x24]
 8000e54:      	str	r2, [sp, #0x28]
 8000e56:      	str	r3, [sp, #0x2c]
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 8000e58:      	str	r0, [sp, #0x1c]
 8000e5a:      	mov	r0, r2
 8000e5c:      	str	r3, [sp, #0x18]
 8000e5e:      	str	r1, [sp, #0x14]
 8000e60:      	bl	#0x74e
 8000e64:      	str	r0, [sp, #0x10]
 8000e66:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hac3b4c9decab2e88E+0x1e>
 8000e68:      	ldr	r0, [sp, #0x1c]
 8000e6a:      	ldr	r1, [r0]
 8000e6c:      	and	r2, r1, #0x1f
 8000e70:      	movs	r3, #0x3
 8000e72:      	lsl.w	r2, r3, r2
 8000e76:      	lsrs	r1, r1, #0x5
 8000e78:      	cmp	r1, #0x0
 8000e7a:      	str	r2, [sp, #0xc]
 8000e7c:      	bne	#0x42 <_ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hac3b4c9decab2e88E+0x78>
 8000e7e:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hac3b4c9decab2e88E+0x36>
 8000e80:      	ldr	r0, [sp, #0x10]
 8000e82:      	ldr	r1, [sp, #0xc]
 8000e84:      	bic.w	r2, r0, r1
 8000e88:      	ldr	r3, [sp, #0x14]
 8000e8a:      	ldr.w	r12, [r3]
 8000e8e:      	ldr.w	lr, [sp, #0x1c]
 8000e92:      	ldr.w	r4, [lr]
 8000e96:      	and	r5, r4, #0x1f
 8000e9a:      	lsl.w	r12, r12, r5
 8000e9e:      	lsrs	r4, r4, #0x5
 8000ea0:      	cmp	r4, #0x0
 8000ea2:      	str	r2, [sp, #0x8]
 8000ea4:      	str.w	r12, [sp, #0x4]
 8000ea8:      	bne	#0x2e <_ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hac3b4c9decab2e88E+0x90>
 8000eaa:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hac3b4c9decab2e88E+0x62>
 8000eac:      	ldr	r0, [sp, #0x8]
 8000eae:      	ldr	r1, [sp, #0x4]
 8000eb0:      	orrs	r1, r0
 8000eb2:      	ldr	r0, [sp, #0x18]
 8000eb4:      	bl	#0x704
 8000eb8:      	str	r0, [sp]
 8000eba:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hac3b4c9decab2e88E+0x72>
;                         });
 8000ebc:      	ldr	r0, [sp]
 8000ebe:      	add	sp, #0x30
 8000ec0:      	pop	{r4, r5, r7, pc}
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 8000ec2:      	movw	r0, #0x3b30
 8000ec6:      	movt	r0, #0x800
 8000eca:      	movw	r2, #0x3b54
 8000ece:      	movt	r2, #0x800
 8000ed2:      	movs	r1, #0x23
 8000ed4:      	bl	#0x1008
 8000ed8:      	trap
 8000eda:      	movw	r0, #0x3b30
 8000ede:      	movt	r0, #0x800
 8000ee2:      	movw	r2, #0x3b64
 8000ee6:      	movt	r2, #0x800
 8000eea:      	movs	r1, #0x23
 8000eec:      	bl	#0xff0
 8000ef0:      	trap

08000ef2 _ZN13stm32f30x_hal4gpio5gpioe50PE8$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h34cdab56f77ef05eE:
;                     pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000ef2:      	sub	sp, #0x8
 8000ef4:      	movs	r0, #0x8
;                         $PXx {
 8000ef6:      	strb.w	r0, [sp, #0x3]
;                     }
 8000efa:      	ldrb.w	r0, [sp, #0x3]
 8000efe:      	add	sp, #0x8
 8000f00:      	bx	lr

08000f02 _ZN13stm32f30x_hal4gpio5gpioe50PE9$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h1a28662a32131632E:
;                     pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000f02:      	sub	sp, #0x8
 8000f04:      	movs	r0, #0x9
;                         $PXx {
 8000f06:      	strb.w	r0, [sp, #0x3]
;                     }
 8000f0a:      	ldrb.w	r0, [sp, #0x3]
 8000f0e:      	add	sp, #0x8
 8000f10:      	bx	lr

08000f12 _ZN13stm32f30x_hal4gpio5gpioe51PE10$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h0983f4e199e5b94aE:
;                     pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000f12:      	sub	sp, #0x8
 8000f14:      	movs	r0, #0xa
;                         $PXx {
 8000f16:      	strb.w	r0, [sp, #0x3]
;                     }
 8000f1a:      	ldrb.w	r0, [sp, #0x3]
 8000f1e:      	add	sp, #0x8
 8000f20:      	bx	lr

08000f22 _ZN13stm32f30x_hal4gpio5gpioe51PE11$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h248b15ff0ce6a045E:
;                     pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000f22:      	sub	sp, #0x8
 8000f24:      	movs	r0, #0xb
;                         $PXx {
 8000f26:      	strb.w	r0, [sp, #0x3]
;                     }
 8000f2a:      	ldrb.w	r0, [sp, #0x3]
 8000f2e:      	add	sp, #0x8
 8000f30:      	bx	lr

08000f32 _ZN13stm32f30x_hal4gpio5gpioe51PE12$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h65131d9e3f5ffab3E:
;                     pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000f32:      	sub	sp, #0x8
 8000f34:      	movs	r0, #0xc
;                         $PXx {
 8000f36:      	strb.w	r0, [sp, #0x3]
;                     }
 8000f3a:      	ldrb.w	r0, [sp, #0x3]
 8000f3e:      	add	sp, #0x8
 8000f40:      	bx	lr

08000f42 _ZN13stm32f30x_hal4gpio5gpioe51PE13$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hf669256ef1df3cd0E:
;                     pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000f42:      	sub	sp, #0x8
 8000f44:      	movs	r0, #0xd
;                         $PXx {
 8000f46:      	strb.w	r0, [sp, #0x3]
;                     }
 8000f4a:      	ldrb.w	r0, [sp, #0x3]
 8000f4e:      	add	sp, #0x8
 8000f50:      	bx	lr

08000f52 _ZN13stm32f30x_hal4gpio5gpioe51PE14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h47b5db425297368eE:
;                     pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000f52:      	sub	sp, #0x8
 8000f54:      	movs	r0, #0xe
;                         $PXx {
 8000f56:      	strb.w	r0, [sp, #0x3]
;                     }
 8000f5a:      	ldrb.w	r0, [sp, #0x3]
 8000f5e:      	add	sp, #0x8
 8000f60:      	bx	lr

08000f62 _ZN13stm32f30x_hal4gpio5gpioe51PE15$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h8f9c9ca3b0c826bdE:
;                     pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000f62:      	sub	sp, #0x8
 8000f64:      	movs	r0, #0xf
;                         $PXx {
 8000f66:      	strb.w	r0, [sp, #0x3]
;                     }
 8000f6a:      	ldrb.w	r0, [sp, #0x3]
 8000f6e:      	add	sp, #0x8
 8000f70:      	bx	lr

08000f72 f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE9<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::hb3ab6d7e0b1bedce:
;                 fn into(self) -> Led {
 8000f72:      	push	{r7, lr}
 8000f74:      	mov	r7, sp
 8000f76:      	sub	sp, #0x10
;                         pex: self.downgrade(),
 8000f78:      	bl	#-0x7a
 8000f7c:      	str	r0, [sp, #0x4]
 8000f7e:      	b	#-0x2 <f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE9<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::hb3ab6d7e0b1bedce+0xe>
;                     Led {
 8000f80:      	ldr	r0, [sp, #0x4]
 8000f82:      	strb	r0, [r7, #-5]
;                 }
 8000f86:      	ldrb	r0, [r7, #-5]
 8000f8a:      	add	sp, #0x10
 8000f8c:      	pop	{r7, pc}

08000f8e f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE8<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::h00cc7eb35e32c28f:
;                 fn into(self) -> Led {
 8000f8e:      	push	{r7, lr}
 8000f90:      	mov	r7, sp
 8000f92:      	sub	sp, #0x10
;                         pex: self.downgrade(),
 8000f94:      	bl	#-0xa6
 8000f98:      	str	r0, [sp, #0x4]
 8000f9a:      	b	#-0x2 <f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE8<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::h00cc7eb35e32c28f+0xe>
;                     Led {
 8000f9c:      	ldr	r0, [sp, #0x4]
 8000f9e:      	strb	r0, [r7, #-5]
;                 }
 8000fa2:      	ldrb	r0, [r7, #-5]
 8000fa6:      	add	sp, #0x10
 8000fa8:      	pop	{r7, pc}

08000faa f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE10<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::hf72009d34fc8cc62:
;                 fn into(self) -> Led {
 8000faa:      	push	{r7, lr}
 8000fac:      	mov	r7, sp
 8000fae:      	sub	sp, #0x10
;                         pex: self.downgrade(),
 8000fb0:      	bl	#-0xa2
 8000fb4:      	str	r0, [sp, #0x4]
 8000fb6:      	b	#-0x2 <f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE10<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::hf72009d34fc8cc62+0xe>
;                     Led {
 8000fb8:      	ldr	r0, [sp, #0x4]
 8000fba:      	strb	r0, [r7, #-5]
;                 }
 8000fbe:      	ldrb	r0, [r7, #-5]
 8000fc2:      	add	sp, #0x10
 8000fc4:      	pop	{r7, pc}

08000fc6 f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE15<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::h6136bcd450e7c7de:
;                 fn into(self) -> Led {
 8000fc6:      	push	{r7, lr}
 8000fc8:      	mov	r7, sp
 8000fca:      	sub	sp, #0x10
;                         pex: self.downgrade(),
 8000fcc:      	bl	#-0x6e
 8000fd0:      	str	r0, [sp, #0x4]
 8000fd2:      	b	#-0x2 <f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE15<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::h6136bcd450e7c7de+0xe>
;                     Led {
 8000fd4:      	ldr	r0, [sp, #0x4]
 8000fd6:      	strb	r0, [r7, #-5]
;                 }
 8000fda:      	ldrb	r0, [r7, #-5]
 8000fde:      	add	sp, #0x10
 8000fe0:      	pop	{r7, pc}

08000fe2 f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE11<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::h3a9a8a10be616c93:
;                 fn into(self) -> Led {
 8000fe2:      	push	{r7, lr}
 8000fe4:      	mov	r7, sp
 8000fe6:      	sub	sp, #0x10
;                         pex: self.downgrade(),
 8000fe8:      	bl	#-0xca
 8000fec:      	str	r0, [sp, #0x4]
 8000fee:      	b	#-0x2 <f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE11<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::h3a9a8a10be616c93+0xe>
;                     Led {
 8000ff0:      	ldr	r0, [sp, #0x4]
 8000ff2:      	strb	r0, [r7, #-5]
;                 }
 8000ff6:      	ldrb	r0, [r7, #-5]
 8000ffa:      	add	sp, #0x10
 8000ffc:      	pop	{r7, pc}

08000ffe f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE14<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::h0da9fceab575b274:
;                 fn into(self) -> Led {
 8000ffe:      	push	{r7, lr}
 8001000:      	mov	r7, sp
 8001002:      	sub	sp, #0x10
;                         pex: self.downgrade(),
 8001004:      	bl	#-0xb6
 8001008:      	str	r0, [sp, #0x4]
 800100a:      	b	#-0x2 <f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE14<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::h0da9fceab575b274+0xe>
;                     Led {
 800100c:      	ldr	r0, [sp, #0x4]
 800100e:      	strb	r0, [r7, #-5]
;                 }
 8001012:      	ldrb	r0, [r7, #-5]
 8001016:      	add	sp, #0x10
 8001018:      	pop	{r7, pc}

0800101a f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE12<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::hde16b4f2b8d28386:
;                 fn into(self) -> Led {
 800101a:      	push	{r7, lr}
 800101c:      	mov	r7, sp
 800101e:      	sub	sp, #0x10
;                         pex: self.downgrade(),
 8001020:      	bl	#-0xf2
 8001024:      	str	r0, [sp, #0x4]
 8001026:      	b	#-0x2 <f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE12<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::hde16b4f2b8d28386+0xe>
;                     Led {
 8001028:      	ldr	r0, [sp, #0x4]
 800102a:      	strb	r0, [r7, #-5]
;                 }
 800102e:      	ldrb	r0, [r7, #-5]
 8001032:      	add	sp, #0x10
 8001034:      	pop	{r7, pc}

08001036 f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE13<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::hc51558e92ca29b0a:
;                 fn into(self) -> Led {
 8001036:      	push	{r7, lr}
 8001038:      	mov	r7, sp
 800103a:      	sub	sp, #0x10
;                         pex: self.downgrade(),
 800103c:      	bl	#-0xfe
 8001040:      	str	r0, [sp, #0x4]
 8001042:      	b	#-0x2 <f3::led::<impl core::convert::Into<f3::led::Led> for stm32f30x_hal::gpio::gpioe::PE13<stm32f30x_hal::gpio::Output<stm32f30x_hal::gpio::PushPull>>>::into::hc51558e92ca29b0a+0xe>
;                     Led {
 8001044:      	ldr	r0, [sp, #0x4]
 8001046:      	strb	r0, [r7, #-5]
;                 }
 800104a:      	ldrb	r0, [r7, #-5]
 800104e:      	add	sp, #0x10
 8001050:      	pop	{r7, pc}

08001052 stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h019a10367b5b0cd9:
;     pub fn modify<F>(&self, f: F)
 8001052:      	push	{r7, lr}
 8001054:      	mov	r7, sp
 8001056:      	sub	sp, #0x40
 8001058:      	str	r0, [sp, #0x24]
 800105a:      	str	r1, [sp, #0x28]
 800105c:      	str	r2, [sp, #0x2c]
 800105e:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001060:      	str	r0, [sp, #0x10]
 8001062:      	str	r2, [sp, #0xc]
 8001064:      	str	r1, [sp, #0x8]
 8001066:      	bl	#0xd1e
 800106a:      	bl	#0x994
 800106e:      	mov	r1, r0
;         let bits = self.register.get();
 8001070:      	str	r0, [sp, #0x30]
 8001072:      	str	r1, [sp, #0x4]
 8001074:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h019a10367b5b0cd9+0x24>
;         let r = R { bits: bits };
 8001076:      	ldr	r0, [sp, #0x4]
 8001078:      	str	r0, [sp, #0x14]
;         let mut w = W { bits: bits };
 800107a:      	str	r0, [sp, #0x18]
 800107c:      	add	r1, sp, #0x14
;         f(&r, &mut w);
 800107e:      	str	r1, [sp, #0x1c]
 8001080:      	add	r1, sp, #0x18
 8001082:      	str	r1, [sp, #0x20]
 8001084:      	ldr	r2, [sp, #0x1c]
 8001086:      	ldr	r3, [sp, #0x20]
 8001088:      	ldr	r0, [sp, #0x8]
 800108a:      	ldr	r1, [sp, #0xc]
 800108c:      	bl	#-0x7f0
 8001090:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h019a10367b5b0cd9+0x40>
;         self.register.set(w.bits);
 8001092:      	ldr	r0, [sp, #0x18]
 8001094:      	ldr	r1, [sp, #0x10]
 8001096:      	str	r1, [sp, #0x38]
 8001098:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800109a:      	str	r0, [sp]
 800109c:      	mov	r0, r1
 800109e:      	bl	#0xce6
 80010a2:      	ldr	r1, [sp]
 80010a4:      	bl	#0x8e0
;         self.register.set(w.bits);
 80010a8:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h019a10367b5b0cd9+0x58>
;     }
 80010aa:      	add	sp, #0x40
 80010ac:      	pop	{r7, pc}

080010ae stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h1ffd435bfdccb94e:
;     pub fn modify<F>(&self, f: F)
 80010ae:      	push	{r7, lr}
 80010b0:      	mov	r7, sp
 80010b2:      	sub	sp, #0x40
 80010b4:      	str	r0, [sp, #0x24]
 80010b6:      	str	r1, [sp, #0x28]
 80010b8:      	str	r2, [sp, #0x2c]
 80010ba:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80010bc:      	str	r0, [sp, #0x10]
 80010be:      	str	r2, [sp, #0xc]
 80010c0:      	str	r1, [sp, #0x8]
 80010c2:      	bl	#0xcc2
 80010c6:      	bl	#0x938
 80010ca:      	mov	r1, r0
;         let bits = self.register.get();
 80010cc:      	str	r0, [sp, #0x30]
 80010ce:      	str	r1, [sp, #0x4]
 80010d0:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h1ffd435bfdccb94e+0x24>
;         let r = R { bits: bits };
 80010d2:      	ldr	r0, [sp, #0x4]
 80010d4:      	str	r0, [sp, #0x14]
;         let mut w = W { bits: bits };
 80010d6:      	str	r0, [sp, #0x18]
 80010d8:      	add	r1, sp, #0x14
;         f(&r, &mut w);
 80010da:      	str	r1, [sp, #0x1c]
 80010dc:      	add	r1, sp, #0x18
 80010de:      	str	r1, [sp, #0x20]
 80010e0:      	ldr	r2, [sp, #0x1c]
 80010e2:      	ldr	r3, [sp, #0x20]
 80010e4:      	ldr	r0, [sp, #0x8]
 80010e6:      	ldr	r1, [sp, #0xc]
 80010e8:      	bl	#-0x632
 80010ec:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h1ffd435bfdccb94e+0x40>
;         self.register.set(w.bits);
 80010ee:      	ldr	r0, [sp, #0x18]
 80010f0:      	ldr	r1, [sp, #0x10]
 80010f2:      	str	r1, [sp, #0x38]
 80010f4:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80010f6:      	str	r0, [sp]
 80010f8:      	mov	r0, r1
 80010fa:      	bl	#0xc8a
 80010fe:      	ldr	r1, [sp]
 8001100:      	bl	#0x884
;         self.register.set(w.bits);
 8001104:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h1ffd435bfdccb94e+0x58>
;     }
 8001106:      	add	sp, #0x40
 8001108:      	pop	{r7, pc}

0800110a stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h2943616f48673e19:
;     pub fn modify<F>(&self, f: F)
 800110a:      	push	{r7, lr}
 800110c:      	mov	r7, sp
 800110e:      	sub	sp, #0x40
 8001110:      	str	r0, [sp, #0x24]
 8001112:      	str	r1, [sp, #0x28]
 8001114:      	str	r2, [sp, #0x2c]
 8001116:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001118:      	str	r0, [sp, #0x10]
 800111a:      	str	r2, [sp, #0xc]
 800111c:      	str	r1, [sp, #0x8]
 800111e:      	bl	#0xc66
 8001122:      	bl	#0x8dc
 8001126:      	mov	r1, r0
;         let bits = self.register.get();
 8001128:      	str	r0, [sp, #0x30]
 800112a:      	str	r1, [sp, #0x4]
 800112c:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h2943616f48673e19+0x24>
;         let r = R { bits: bits };
 800112e:      	ldr	r0, [sp, #0x4]
 8001130:      	str	r0, [sp, #0x14]
;         let mut w = W { bits: bits };
 8001132:      	str	r0, [sp, #0x18]
 8001134:      	add	r1, sp, #0x14
;         f(&r, &mut w);
 8001136:      	str	r1, [sp, #0x1c]
 8001138:      	add	r1, sp, #0x18
 800113a:      	str	r1, [sp, #0x20]
 800113c:      	ldr	r2, [sp, #0x1c]
 800113e:      	ldr	r3, [sp, #0x20]
 8001140:      	ldr	r0, [sp, #0x8]
 8001142:      	ldr	r1, [sp, #0xc]
 8001144:      	bl	#-0xaec
 8001148:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h2943616f48673e19+0x40>
;         self.register.set(w.bits);
 800114a:      	ldr	r0, [sp, #0x18]
 800114c:      	ldr	r1, [sp, #0x10]
 800114e:      	str	r1, [sp, #0x38]
 8001150:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001152:      	str	r0, [sp]
 8001154:      	mov	r0, r1
 8001156:      	bl	#0xc2e
 800115a:      	ldr	r1, [sp]
 800115c:      	bl	#0x828
;         self.register.set(w.bits);
 8001160:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h2943616f48673e19+0x58>
;     }
 8001162:      	add	sp, #0x40
 8001164:      	pop	{r7, pc}

08001166 stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h3b304c43461a9749:
;     pub fn modify<F>(&self, f: F)
 8001166:      	push	{r7, lr}
 8001168:      	mov	r7, sp
 800116a:      	sub	sp, #0x40
 800116c:      	str	r0, [sp, #0x24]
 800116e:      	str	r1, [sp, #0x28]
 8001170:      	str	r2, [sp, #0x2c]
 8001172:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001174:      	str	r0, [sp, #0x10]
 8001176:      	str	r2, [sp, #0xc]
 8001178:      	str	r1, [sp, #0x8]
 800117a:      	bl	#0xc0a
 800117e:      	bl	#0x880
 8001182:      	mov	r1, r0
;         let bits = self.register.get();
 8001184:      	str	r0, [sp, #0x30]
 8001186:      	str	r1, [sp, #0x4]
 8001188:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h3b304c43461a9749+0x24>
;         let r = R { bits: bits };
 800118a:      	ldr	r0, [sp, #0x4]
 800118c:      	str	r0, [sp, #0x14]
;         let mut w = W { bits: bits };
 800118e:      	str	r0, [sp, #0x18]
 8001190:      	add	r1, sp, #0x14
;         f(&r, &mut w);
 8001192:      	str	r1, [sp, #0x1c]
 8001194:      	add	r1, sp, #0x18
 8001196:      	str	r1, [sp, #0x20]
 8001198:      	ldr	r2, [sp, #0x1c]
 800119a:      	ldr	r3, [sp, #0x20]
 800119c:      	ldr	r0, [sp, #0x8]
 800119e:      	ldr	r1, [sp, #0xc]
 80011a0:      	bl	#-0x4a6
 80011a4:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h3b304c43461a9749+0x40>
;         self.register.set(w.bits);
 80011a6:      	ldr	r0, [sp, #0x18]
 80011a8:      	ldr	r1, [sp, #0x10]
 80011aa:      	str	r1, [sp, #0x38]
 80011ac:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80011ae:      	str	r0, [sp]
 80011b0:      	mov	r0, r1
 80011b2:      	bl	#0xbd2
 80011b6:      	ldr	r1, [sp]
 80011b8:      	bl	#0x7cc
;         self.register.set(w.bits);
 80011bc:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h3b304c43461a9749+0x58>
;     }
 80011be:      	add	sp, #0x40
 80011c0:      	pop	{r7, pc}

080011c2 stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h83a799d56530f6e3:
;     pub fn modify<F>(&self, f: F)
 80011c2:      	push	{r7, lr}
 80011c4:      	mov	r7, sp
 80011c6:      	sub	sp, #0x40
 80011c8:      	str	r0, [sp, #0x24]
 80011ca:      	str	r1, [sp, #0x28]
 80011cc:      	str	r2, [sp, #0x2c]
 80011ce:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80011d0:      	str	r0, [sp, #0x10]
 80011d2:      	str	r2, [sp, #0xc]
 80011d4:      	str	r1, [sp, #0x8]
 80011d6:      	bl	#0xbae
 80011da:      	bl	#0x824
 80011de:      	mov	r1, r0
;         let bits = self.register.get();
 80011e0:      	str	r0, [sp, #0x30]
 80011e2:      	str	r1, [sp, #0x4]
 80011e4:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h83a799d56530f6e3+0x24>
;         let r = R { bits: bits };
 80011e6:      	ldr	r0, [sp, #0x4]
 80011e8:      	str	r0, [sp, #0x14]
;         let mut w = W { bits: bits };
 80011ea:      	str	r0, [sp, #0x18]
 80011ec:      	add	r1, sp, #0x14
;         f(&r, &mut w);
 80011ee:      	str	r1, [sp, #0x1c]
 80011f0:      	add	r1, sp, #0x18
 80011f2:      	str	r1, [sp, #0x20]
 80011f4:      	ldr	r2, [sp, #0x1c]
 80011f6:      	ldr	r3, [sp, #0x20]
 80011f8:      	ldr	r0, [sp, #0x8]
 80011fa:      	ldr	r1, [sp, #0xc]
 80011fc:      	bl	#-0xa82
 8001200:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h83a799d56530f6e3+0x40>
;         self.register.set(w.bits);
 8001202:      	ldr	r0, [sp, #0x18]
 8001204:      	ldr	r1, [sp, #0x10]
 8001206:      	str	r1, [sp, #0x38]
 8001208:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800120a:      	str	r0, [sp]
 800120c:      	mov	r0, r1
 800120e:      	bl	#0xb76
 8001212:      	ldr	r1, [sp]
 8001214:      	bl	#0x770
;         self.register.set(w.bits);
 8001218:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h83a799d56530f6e3+0x58>
;     }
 800121a:      	add	sp, #0x40
 800121c:      	pop	{r7, pc}

0800121e stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::hb28dddb5340ce465:
;     pub fn modify<F>(&self, f: F)
 800121e:      	push	{r7, lr}
 8001220:      	mov	r7, sp
 8001222:      	sub	sp, #0x40
 8001224:      	str	r0, [sp, #0x24]
 8001226:      	str	r1, [sp, #0x28]
 8001228:      	str	r2, [sp, #0x2c]
 800122a:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800122c:      	str	r0, [sp, #0x10]
 800122e:      	str	r2, [sp, #0xc]
 8001230:      	str	r1, [sp, #0x8]
 8001232:      	bl	#0xb52
 8001236:      	bl	#0x7c8
 800123a:      	mov	r1, r0
;         let bits = self.register.get();
 800123c:      	str	r0, [sp, #0x30]
 800123e:      	str	r1, [sp, #0x4]
 8001240:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::hb28dddb5340ce465+0x24>
;         let r = R { bits: bits };
 8001242:      	ldr	r0, [sp, #0x4]
 8001244:      	str	r0, [sp, #0x14]
;         let mut w = W { bits: bits };
 8001246:      	str	r0, [sp, #0x18]
 8001248:      	add	r1, sp, #0x14
;         f(&r, &mut w);
 800124a:      	str	r1, [sp, #0x1c]
 800124c:      	add	r1, sp, #0x18
 800124e:      	str	r1, [sp, #0x20]
 8001250:      	ldr	r2, [sp, #0x1c]
 8001252:      	ldr	r3, [sp, #0x20]
 8001254:      	ldr	r0, [sp, #0x8]
 8001256:      	ldr	r1, [sp, #0xc]
 8001258:      	bl	#-0x680
 800125c:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::hb28dddb5340ce465+0x40>
;         self.register.set(w.bits);
 800125e:      	ldr	r0, [sp, #0x18]
 8001260:      	ldr	r1, [sp, #0x10]
 8001262:      	str	r1, [sp, #0x38]
 8001264:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001266:      	str	r0, [sp]
 8001268:      	mov	r0, r1
 800126a:      	bl	#0xb1a
 800126e:      	ldr	r1, [sp]
 8001270:      	bl	#0x714
;         self.register.set(w.bits);
 8001274:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::hb28dddb5340ce465+0x58>
;     }
 8001276:      	add	sp, #0x40
 8001278:      	pop	{r7, pc}

0800127a stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::hc3a4bb7e84da63c3:
;     pub fn modify<F>(&self, f: F)
 800127a:      	push	{r7, lr}
 800127c:      	mov	r7, sp
 800127e:      	sub	sp, #0x40
 8001280:      	str	r0, [sp, #0x24]
 8001282:      	str	r1, [sp, #0x28]
 8001284:      	str	r2, [sp, #0x2c]
 8001286:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001288:      	str	r0, [sp, #0x10]
 800128a:      	str	r2, [sp, #0xc]
 800128c:      	str	r1, [sp, #0x8]
 800128e:      	bl	#0xaf6
 8001292:      	bl	#0x76c
 8001296:      	mov	r1, r0
;         let bits = self.register.get();
 8001298:      	str	r0, [sp, #0x30]
 800129a:      	str	r1, [sp, #0x4]
 800129c:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::hc3a4bb7e84da63c3+0x24>
;         let r = R { bits: bits };
 800129e:      	ldr	r0, [sp, #0x4]
 80012a0:      	str	r0, [sp, #0x14]
;         let mut w = W { bits: bits };
 80012a2:      	str	r0, [sp, #0x18]
 80012a4:      	add	r1, sp, #0x14
;         f(&r, &mut w);
 80012a6:      	str	r1, [sp, #0x1c]
 80012a8:      	add	r1, sp, #0x18
 80012aa:      	str	r1, [sp, #0x20]
 80012ac:      	ldr	r2, [sp, #0x1c]
 80012ae:      	ldr	r3, [sp, #0x20]
 80012b0:      	ldr	r0, [sp, #0x8]
 80012b2:      	ldr	r1, [sp, #0xc]
 80012b4:      	bl	#-0x46e
 80012b8:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::hc3a4bb7e84da63c3+0x40>
;         self.register.set(w.bits);
 80012ba:      	ldr	r0, [sp, #0x18]
 80012bc:      	ldr	r1, [sp, #0x10]
 80012be:      	str	r1, [sp, #0x38]
 80012c0:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80012c2:      	str	r0, [sp]
 80012c4:      	mov	r0, r1
 80012c6:      	bl	#0xabe
 80012ca:      	ldr	r1, [sp]
 80012cc:      	bl	#0x6b8
;         self.register.set(w.bits);
 80012d0:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::hc3a4bb7e84da63c3+0x58>
;     }
 80012d2:      	add	sp, #0x40
 80012d4:      	pop	{r7, pc}

080012d6 stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::hcdf73da63e795bb8:
;     pub fn modify<F>(&self, f: F)
 80012d6:      	push	{r7, lr}
 80012d8:      	mov	r7, sp
 80012da:      	sub	sp, #0x40
 80012dc:      	str	r0, [sp, #0x24]
 80012de:      	str	r1, [sp, #0x28]
 80012e0:      	str	r2, [sp, #0x2c]
 80012e2:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80012e4:      	str	r0, [sp, #0x10]
 80012e6:      	str	r2, [sp, #0xc]
 80012e8:      	str	r1, [sp, #0x8]
 80012ea:      	bl	#0xa9a
 80012ee:      	bl	#0x710
 80012f2:      	mov	r1, r0
;         let bits = self.register.get();
 80012f4:      	str	r0, [sp, #0x30]
 80012f6:      	str	r1, [sp, #0x4]
 80012f8:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::hcdf73da63e795bb8+0x24>
;         let r = R { bits: bits };
 80012fa:      	ldr	r0, [sp, #0x4]
 80012fc:      	str	r0, [sp, #0x14]
;         let mut w = W { bits: bits };
 80012fe:      	str	r0, [sp, #0x18]
 8001300:      	add	r1, sp, #0x14
;         f(&r, &mut w);
 8001302:      	str	r1, [sp, #0x1c]
 8001304:      	add	r1, sp, #0x18
 8001306:      	str	r1, [sp, #0x20]
 8001308:      	ldr	r2, [sp, #0x1c]
 800130a:      	ldr	r3, [sp, #0x20]
 800130c:      	ldr	r0, [sp, #0x8]
 800130e:      	ldr	r1, [sp, #0xc]
 8001310:      	bl	#-0x97c
 8001314:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::hcdf73da63e795bb8+0x40>
;         self.register.set(w.bits);
 8001316:      	ldr	r0, [sp, #0x18]
 8001318:      	ldr	r1, [sp, #0x10]
 800131a:      	str	r1, [sp, #0x38]
 800131c:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800131e:      	str	r0, [sp]
 8001320:      	mov	r0, r1
 8001322:      	bl	#0xa62
 8001326:      	ldr	r1, [sp]
 8001328:      	bl	#0x65c
;         self.register.set(w.bits);
 800132c:      	b	#-0x2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::hcdf73da63e795bb8+0x58>
;     }
 800132e:      	add	sp, #0x40
 8001330:      	pop	{r7, pc}

08001332 stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h45b78b634e92431c:
;     pub fn modify<F>(&self, f: F)
 8001332:      	push	{r7, lr}
 8001334:      	mov	r7, sp
 8001336:      	sub	sp, #0x38
 8001338:      	str	r0, [sp, #0x20]
 800133a:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800133c:      	str	r0, [sp, #0xc]
 800133e:      	bl	#0xa46
 8001342:      	bl	#0x6bc
 8001346:      	mov	r1, r0
;         let bits = self.register.get();
 8001348:      	str	r0, [sp, #0x28]
 800134a:      	str	r1, [sp, #0x8]
 800134c:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h45b78b634e92431c+0x1c>
;         let r = R { bits: bits };
 800134e:      	ldr	r0, [sp, #0x8]
 8001350:      	str	r0, [sp, #0x10]
;         let mut w = W { bits: bits };
 8001352:      	str	r0, [sp, #0x14]
 8001354:      	add	r1, sp, #0x10
;         f(&r, &mut w);
 8001356:      	str	r1, [sp, #0x18]
 8001358:      	add	r1, sp, #0x14
 800135a:      	str	r1, [sp, #0x1c]
 800135c:      	ldr	r0, [sp, #0x18]
 800135e:      	ldr	r1, [sp, #0x1c]
 8001360:      	bl	#-0x802
 8001364:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h45b78b634e92431c+0x34>
;         self.register.set(w.bits);
 8001366:      	ldr	r0, [sp, #0x14]
 8001368:      	ldr	r1, [sp, #0xc]
 800136a:      	str	r1, [sp, #0x30]
 800136c:      	str	r0, [sp, #0x34]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800136e:      	str	r0, [sp, #0x4]
 8001370:      	mov	r0, r1
 8001372:      	bl	#0xa12
 8001376:      	ldr	r1, [sp, #0x4]
 8001378:      	bl	#0x60c
;         self.register.set(w.bits);
 800137c:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h45b78b634e92431c+0x4c>
;     }
 800137e:      	add	sp, #0x38
 8001380:      	pop	{r7, pc}

08001382 stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h67bad751fde7da20:
;     pub fn modify<F>(&self, f: F)
 8001382:      	push	{r7, lr}
 8001384:      	mov	r7, sp
 8001386:      	sub	sp, #0x38
 8001388:      	str	r0, [sp, #0x20]
 800138a:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800138c:      	str	r0, [sp, #0xc]
 800138e:      	bl	#0x9f6
 8001392:      	bl	#0x66c
 8001396:      	mov	r1, r0
;         let bits = self.register.get();
 8001398:      	str	r0, [sp, #0x28]
 800139a:      	str	r1, [sp, #0x8]
 800139c:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h67bad751fde7da20+0x1c>
;         let r = R { bits: bits };
 800139e:      	ldr	r0, [sp, #0x8]
 80013a0:      	str	r0, [sp, #0x10]
;         let mut w = W { bits: bits };
 80013a2:      	str	r0, [sp, #0x14]
 80013a4:      	add	r1, sp, #0x10
;         f(&r, &mut w);
 80013a6:      	str	r1, [sp, #0x18]
 80013a8:      	add	r1, sp, #0x14
 80013aa:      	str	r1, [sp, #0x1c]
 80013ac:      	ldr	r0, [sp, #0x18]
 80013ae:      	ldr	r1, [sp, #0x1c]
 80013b0:      	bl	#-0x974
 80013b4:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h67bad751fde7da20+0x34>
;         self.register.set(w.bits);
 80013b6:      	ldr	r0, [sp, #0x14]
 80013b8:      	ldr	r1, [sp, #0xc]
 80013ba:      	str	r1, [sp, #0x30]
 80013bc:      	str	r0, [sp, #0x34]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80013be:      	str	r0, [sp, #0x4]
 80013c0:      	mov	r0, r1
 80013c2:      	bl	#0x9c2
 80013c6:      	ldr	r1, [sp, #0x4]
 80013c8:      	bl	#0x5bc
;         self.register.set(w.bits);
 80013cc:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h67bad751fde7da20+0x4c>
;     }
 80013ce:      	add	sp, #0x38
 80013d0:      	pop	{r7, pc}

080013d2 stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h6ae9d99852eaeeda:
;     pub fn modify<F>(&self, f: F)
 80013d2:      	push	{r7, lr}
 80013d4:      	mov	r7, sp
 80013d6:      	sub	sp, #0x38
 80013d8:      	str	r0, [sp, #0x20]
 80013da:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80013dc:      	str	r0, [sp, #0xc]
 80013de:      	bl	#0x9a6
 80013e2:      	bl	#0x61c
 80013e6:      	mov	r1, r0
;         let bits = self.register.get();
 80013e8:      	str	r0, [sp, #0x28]
 80013ea:      	str	r1, [sp, #0x8]
 80013ec:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h6ae9d99852eaeeda+0x1c>
;         let r = R { bits: bits };
 80013ee:      	ldr	r0, [sp, #0x8]
 80013f0:      	str	r0, [sp, #0x10]
;         let mut w = W { bits: bits };
 80013f2:      	str	r0, [sp, #0x14]
 80013f4:      	add	r1, sp, #0x10
;         f(&r, &mut w);
 80013f6:      	str	r1, [sp, #0x18]
 80013f8:      	add	r1, sp, #0x14
 80013fa:      	str	r1, [sp, #0x1c]
 80013fc:      	ldr	r0, [sp, #0x18]
 80013fe:      	ldr	r1, [sp, #0x1c]
 8001400:      	bl	#-0xb8e
 8001404:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h6ae9d99852eaeeda+0x34>
;         self.register.set(w.bits);
 8001406:      	ldr	r0, [sp, #0x14]
 8001408:      	ldr	r1, [sp, #0xc]
 800140a:      	str	r1, [sp, #0x30]
 800140c:      	str	r0, [sp, #0x34]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800140e:      	str	r0, [sp, #0x4]
 8001410:      	mov	r0, r1
 8001412:      	bl	#0x972
 8001416:      	ldr	r1, [sp, #0x4]
 8001418:      	bl	#0x56c
;         self.register.set(w.bits);
 800141c:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h6ae9d99852eaeeda+0x4c>
;     }
 800141e:      	add	sp, #0x38
 8001420:      	pop	{r7, pc}

08001422 stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h6cb6d31e67463eb7:
;     pub fn modify<F>(&self, f: F)
 8001422:      	push	{r7, lr}
 8001424:      	mov	r7, sp
 8001426:      	sub	sp, #0x38
 8001428:      	str	r0, [sp, #0x20]
 800142a:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800142c:      	str	r0, [sp, #0xc]
 800142e:      	bl	#0x956
 8001432:      	bl	#0x5cc
 8001436:      	mov	r1, r0
;         let bits = self.register.get();
 8001438:      	str	r0, [sp, #0x28]
 800143a:      	str	r1, [sp, #0x8]
 800143c:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h6cb6d31e67463eb7+0x1c>
;         let r = R { bits: bits };
 800143e:      	ldr	r0, [sp, #0x8]
 8001440:      	str	r0, [sp, #0x10]
;         let mut w = W { bits: bits };
 8001442:      	str	r0, [sp, #0x14]
 8001444:      	add	r1, sp, #0x10
;         f(&r, &mut w);
 8001446:      	str	r1, [sp, #0x18]
 8001448:      	add	r1, sp, #0x14
 800144a:      	str	r1, [sp, #0x1c]
 800144c:      	ldr	r0, [sp, #0x18]
 800144e:      	ldr	r1, [sp, #0x1c]
 8001450:      	bl	#-0xd00
 8001454:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h6cb6d31e67463eb7+0x34>
;         self.register.set(w.bits);
 8001456:      	ldr	r0, [sp, #0x14]
 8001458:      	ldr	r1, [sp, #0xc]
 800145a:      	str	r1, [sp, #0x30]
 800145c:      	str	r0, [sp, #0x34]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800145e:      	str	r0, [sp, #0x4]
 8001460:      	mov	r0, r1
 8001462:      	bl	#0x922
 8001466:      	ldr	r1, [sp, #0x4]
 8001468:      	bl	#0x51c
;         self.register.set(w.bits);
 800146c:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h6cb6d31e67463eb7+0x4c>
;     }
 800146e:      	add	sp, #0x38
 8001470:      	pop	{r7, pc}

08001472 stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h6e9847435dc77ade:
;     pub fn modify<F>(&self, f: F)
 8001472:      	push	{r7, lr}
 8001474:      	mov	r7, sp
 8001476:      	sub	sp, #0x38
 8001478:      	str	r0, [sp, #0x20]
 800147a:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800147c:      	str	r0, [sp, #0xc]
 800147e:      	bl	#0x906
 8001482:      	bl	#0x57c
 8001486:      	mov	r1, r0
;         let bits = self.register.get();
 8001488:      	str	r0, [sp, #0x28]
 800148a:      	str	r1, [sp, #0x8]
 800148c:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h6e9847435dc77ade+0x1c>
;         let r = R { bits: bits };
 800148e:      	ldr	r0, [sp, #0x8]
 8001490:      	str	r0, [sp, #0x10]
;         let mut w = W { bits: bits };
 8001492:      	str	r0, [sp, #0x14]
 8001494:      	add	r1, sp, #0x10
;         f(&r, &mut w);
 8001496:      	str	r1, [sp, #0x18]
 8001498:      	add	r1, sp, #0x14
 800149a:      	str	r1, [sp, #0x1c]
 800149c:      	ldr	r0, [sp, #0x18]
 800149e:      	ldr	r1, [sp, #0x1c]
 80014a0:      	bl	#-0x820
 80014a4:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h6e9847435dc77ade+0x34>
;         self.register.set(w.bits);
 80014a6:      	ldr	r0, [sp, #0x14]
 80014a8:      	ldr	r1, [sp, #0xc]
 80014aa:      	str	r1, [sp, #0x30]
 80014ac:      	str	r0, [sp, #0x34]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80014ae:      	str	r0, [sp, #0x4]
 80014b0:      	mov	r0, r1
 80014b2:      	bl	#0x8d2
 80014b6:      	ldr	r1, [sp, #0x4]
 80014b8:      	bl	#0x4cc
;         self.register.set(w.bits);
 80014bc:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::h6e9847435dc77ade+0x4c>
;     }
 80014be:      	add	sp, #0x38
 80014c0:      	pop	{r7, pc}

080014c2 stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::ha5a7003dc23cd266:
;     pub fn modify<F>(&self, f: F)
 80014c2:      	push	{r7, lr}
 80014c4:      	mov	r7, sp
 80014c6:      	sub	sp, #0x38
 80014c8:      	str	r0, [sp, #0x20]
 80014ca:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80014cc:      	str	r0, [sp, #0xc]
 80014ce:      	bl	#0x8b6
 80014d2:      	bl	#0x52c
 80014d6:      	mov	r1, r0
;         let bits = self.register.get();
 80014d8:      	str	r0, [sp, #0x28]
 80014da:      	str	r1, [sp, #0x8]
 80014dc:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::ha5a7003dc23cd266+0x1c>
;         let r = R { bits: bits };
 80014de:      	ldr	r0, [sp, #0x8]
 80014e0:      	str	r0, [sp, #0x10]
;         let mut w = W { bits: bits };
 80014e2:      	str	r0, [sp, #0x14]
 80014e4:      	add	r1, sp, #0x10
;         f(&r, &mut w);
 80014e6:      	str	r1, [sp, #0x18]
 80014e8:      	add	r1, sp, #0x14
 80014ea:      	str	r1, [sp, #0x1c]
 80014ec:      	ldr	r0, [sp, #0x18]
 80014ee:      	ldr	r1, [sp, #0x1c]
 80014f0:      	bl	#-0x6d4
 80014f4:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::ha5a7003dc23cd266+0x34>
;         self.register.set(w.bits);
 80014f6:      	ldr	r0, [sp, #0x14]
 80014f8:      	ldr	r1, [sp, #0xc]
 80014fa:      	str	r1, [sp, #0x30]
 80014fc:      	str	r0, [sp, #0x34]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80014fe:      	str	r0, [sp, #0x4]
 8001500:      	mov	r0, r1
 8001502:      	bl	#0x882
 8001506:      	ldr	r1, [sp, #0x4]
 8001508:      	bl	#0x47c
;         self.register.set(w.bits);
 800150c:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::ha5a7003dc23cd266+0x4c>
;     }
 800150e:      	add	sp, #0x38
 8001510:      	pop	{r7, pc}

08001512 stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::hd833b76228b9b1c6:
;     pub fn modify<F>(&self, f: F)
 8001512:      	push	{r7, lr}
 8001514:      	mov	r7, sp
 8001516:      	sub	sp, #0x38
 8001518:      	str	r0, [sp, #0x20]
 800151a:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800151c:      	str	r0, [sp, #0xc]
 800151e:      	bl	#0x866
 8001522:      	bl	#0x4dc
 8001526:      	mov	r1, r0
;         let bits = self.register.get();
 8001528:      	str	r0, [sp, #0x28]
 800152a:      	str	r1, [sp, #0x8]
 800152c:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::hd833b76228b9b1c6+0x1c>
;         let r = R { bits: bits };
 800152e:      	ldr	r0, [sp, #0x8]
 8001530:      	str	r0, [sp, #0x10]
;         let mut w = W { bits: bits };
 8001532:      	str	r0, [sp, #0x14]
 8001534:      	add	r1, sp, #0x10
;         f(&r, &mut w);
 8001536:      	str	r1, [sp, #0x18]
 8001538:      	add	r1, sp, #0x14
 800153a:      	str	r1, [sp, #0x1c]
 800153c:      	ldr	r0, [sp, #0x18]
 800153e:      	ldr	r1, [sp, #0x1c]
 8001540:      	bl	#-0x79e
 8001544:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::hd833b76228b9b1c6+0x34>
;         self.register.set(w.bits);
 8001546:      	ldr	r0, [sp, #0x14]
 8001548:      	ldr	r1, [sp, #0xc]
 800154a:      	str	r1, [sp, #0x30]
 800154c:      	str	r0, [sp, #0x34]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800154e:      	str	r0, [sp, #0x4]
 8001550:      	mov	r0, r1
 8001552:      	bl	#0x832
 8001556:      	ldr	r1, [sp, #0x4]
 8001558:      	bl	#0x42c
;         self.register.set(w.bits);
 800155c:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::hd833b76228b9b1c6+0x4c>
;     }
 800155e:      	add	sp, #0x38
 8001560:      	pop	{r7, pc}

08001562 stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::hf3f3f49cfaa5fa4f:
;     pub fn modify<F>(&self, f: F)
 8001562:      	push	{r7, lr}
 8001564:      	mov	r7, sp
 8001566:      	sub	sp, #0x38
 8001568:      	str	r0, [sp, #0x20]
 800156a:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800156c:      	str	r0, [sp, #0xc]
 800156e:      	bl	#0x816
 8001572:      	bl	#0x48c
 8001576:      	mov	r1, r0
;         let bits = self.register.get();
 8001578:      	str	r0, [sp, #0x28]
 800157a:      	str	r1, [sp, #0x8]
 800157c:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::hf3f3f49cfaa5fa4f+0x1c>
;         let r = R { bits: bits };
 800157e:      	ldr	r0, [sp, #0x8]
 8001580:      	str	r0, [sp, #0x10]
;         let mut w = W { bits: bits };
 8001582:      	str	r0, [sp, #0x14]
 8001584:      	add	r1, sp, #0x10
;         f(&r, &mut w);
 8001586:      	str	r1, [sp, #0x18]
 8001588:      	add	r1, sp, #0x14
 800158a:      	str	r1, [sp, #0x1c]
 800158c:      	ldr	r0, [sp, #0x18]
 800158e:      	ldr	r1, [sp, #0x1c]
 8001590:      	bl	#-0xf62
 8001594:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::hf3f3f49cfaa5fa4f+0x34>
;         self.register.set(w.bits);
 8001596:      	ldr	r0, [sp, #0x14]
 8001598:      	ldr	r1, [sp, #0xc]
 800159a:      	str	r1, [sp, #0x30]
 800159c:      	str	r0, [sp, #0x34]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800159e:      	str	r0, [sp, #0x4]
 80015a0:      	mov	r0, r1
 80015a2:      	bl	#0x7e2
 80015a6:      	ldr	r1, [sp, #0x4]
 80015a8:      	bl	#0x3dc
;         self.register.set(w.bits);
 80015ac:      	b	#-0x2 <stm32f30x::gpioc::otyper::<impl stm32f30x::gpioc::OTYPER>::modify::hf3f3f49cfaa5fa4f+0x4c>
;     }
 80015ae:      	add	sp, #0x38
 80015b0:      	pop	{r7, pc}

080015b2 stm32f30x::gpioc::moder::R::bits::hb1599a5e6673fb12:
;     pub fn bits(&self) -> u32 {
 80015b2:      	sub	sp, #0x4
 80015b4:      	str	r0, [sp]
;         self.bits
 80015b6:      	ldr	r0, [r0]
;     }
 80015b8:      	add	sp, #0x4
 80015ba:      	bx	lr

080015bc stm32f30x::gpioc::moder::W::bits::h7f7a57fb6a5a29f9:
;     pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
 80015bc:      	sub	sp, #0x8
 80015be:      	str	r0, [sp]
 80015c0:      	str	r1, [sp, #0x4]
;         self.bits = bits;
 80015c2:      	str	r1, [r0]
;     }
 80015c4:      	add	sp, #0x8
 80015c6:      	bx	lr

080015c8 stm32f30x::gpioc::otyper::R::bits::h77babc29461c8269:
;     pub fn bits(&self) -> u32 {
 80015c8:      	sub	sp, #0x4
 80015ca:      	str	r0, [sp]
;         self.bits
 80015cc:      	ldr	r0, [r0]
;     }
 80015ce:      	add	sp, #0x4
 80015d0:      	bx	lr

080015d2 stm32f30x::gpioc::otyper::W::bits::h97dd5a9cb939039c:
;     pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
 80015d2:      	sub	sp, #0x8
 80015d4:      	str	r0, [sp]
 80015d6:      	str	r1, [sp, #0x4]
;         self.bits = bits;
 80015d8:      	str	r1, [r0]
;     }
 80015da:      	add	sp, #0x8
 80015dc:      	bx	lr

080015de _ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h0147ef18ac43f814E:
;                     ahb.enr().modify(|_, w| w.$iopxenr().enabled());
 80015de:      	push	{r7, lr}
 80015e0:      	mov	r7, sp
 80015e2:      	sub	sp, #0x18
 80015e4:      	str	r0, [sp, #0x10]
 80015e6:      	str	r1, [sp, #0x14]
 80015e8:      	mov	r0, r1
 80015ea:      	bl	#0x232
 80015ee:      	str	r0, [sp, #0x8]
 80015f0:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h0147ef18ac43f814E+0x14>
 80015f2:      	ldr	r0, [sp, #0x8]
 80015f4:      	bl	#0x284
 80015f8:      	str	r0, [sp, #0x4]
 80015fa:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h0147ef18ac43f814E+0x1e>
 80015fc:      	ldr	r0, [sp, #0x4]
 80015fe:      	add	sp, #0x18
 8001600:      	pop	{r7, pc}

08001602 _ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h37dff0872fd8d0d5E:
;                     ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001602:      	push	{r7, lr}
 8001604:      	mov	r7, sp
 8001606:      	sub	sp, #0x18
 8001608:      	str	r0, [sp, #0x10]
 800160a:      	str	r1, [sp, #0x14]
 800160c:      	mov	r0, r1
 800160e:      	bl	#0x2be
 8001612:      	str	r0, [sp, #0x8]
 8001614:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h37dff0872fd8d0d5E+0x14>
 8001616:      	ldr	r0, [sp, #0x8]
 8001618:      	bl	#0x314
 800161c:      	str	r0, [sp, #0x4]
 800161e:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h37dff0872fd8d0d5E+0x1e>
 8001620:      	ldr	r0, [sp, #0x4]
 8001622:      	add	sp, #0x18
 8001624:      	pop	{r7, pc}

08001626 _ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hd3d23519d0cae51cE:
;                     ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 8001626:      	push	{r7, lr}
 8001628:      	mov	r7, sp
 800162a:      	sub	sp, #0x18
 800162c:      	str	r0, [sp, #0x10]
 800162e:      	str	r1, [sp, #0x14]
 8001630:      	mov	r0, r1
 8001632:      	bl	#0x29a
 8001636:      	str	r0, [sp, #0x8]
 8001638:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hd3d23519d0cae51cE+0x14>
 800163a:      	ldr	r0, [sp, #0x8]
 800163c:      	bl	#0x308
 8001640:      	str	r0, [sp, #0x4]
 8001642:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hd3d23519d0cae51cE+0x1e>
 8001644:      	ldr	r0, [sp, #0x4]
 8001646:      	add	sp, #0x18
 8001648:      	pop	{r7, pc}

0800164a stm32f30x_hal::gpio::gpioe::MODER::moder::h07c1e2b9dcacc66f:
;                 pub(crate) fn moder(&mut self) -> &$gpioy::MODER {
 800164a:      	push	{r7, lr}
 800164c:      	mov	r7, sp
 800164e:      	sub	sp, #0x8
 8001650:      	str	r0, [sp, #0x4]
;                     unsafe { &(*$GPIOX::ptr()).moder }
 8001652:      	bl	#0x286
 8001656:      	str	r0, [sp]
 8001658:      	b	#-0x2 <stm32f30x_hal::gpio::gpioe::MODER::moder::h07c1e2b9dcacc66f+0x10>
;                 }
 800165a:      	ldr	r0, [sp]
 800165c:      	add	sp, #0x8
 800165e:      	pop	{r7, pc}

08001660 stm32f30x_hal::gpio::gpioe::OTYPER::otyper::he9bb95f4d178dbb4:
;                 pub(crate) fn otyper(&mut self) -> &$gpioy::OTYPER {
 8001660:      	push	{r7, lr}
 8001662:      	mov	r7, sp
 8001664:      	sub	sp, #0x8
 8001666:      	str	r0, [sp, #0x4]
;                     unsafe { &(*$GPIOX::ptr()).otyper }
 8001668:      	bl	#0x270
 800166c:      	str	r0, [sp]
 800166e:      	b	#-0x2 <stm32f30x_hal::gpio::gpioe::OTYPER::otyper::he9bb95f4d178dbb4+0x10>
 8001670:      	ldr	r0, [sp]
 8001672:      	adds	r0, #0x4
;                 }
 8001674:      	add	sp, #0x8
 8001676:      	pop	{r7, pc}

08001678 stm32f30x_hal::rcc::AHB::enr::h6ad2dc7fccc60533:
;     pub(crate) fn enr(&mut self) -> &rcc::AHBENR {
 8001678:      	push	{r7, lr}
 800167a:      	mov	r7, sp
 800167c:      	sub	sp, #0x8
 800167e:      	str	r0, [sp, #0x4]
;         unsafe { &(*RCC::ptr()).ahbenr }
 8001680:      	bl	#0x262
 8001684:      	str	r0, [sp]
 8001686:      	b	#-0x2 <stm32f30x_hal::rcc::AHB::enr::h6ad2dc7fccc60533+0x10>
 8001688:      	ldr	r0, [sp]
 800168a:      	adds	r0, #0x14
;     }
 800168c:      	add	sp, #0x8
 800168e:      	pop	{r7, pc}

08001690 stm32f30x_hal::rcc::AHB::rstr::hd51852f638fb07d1:
;     pub(crate) fn rstr(&mut self) -> &rcc::AHBRSTR {
 8001690:      	push	{r7, lr}
 8001692:      	mov	r7, sp
 8001694:      	sub	sp, #0x8
 8001696:      	str	r0, [sp, #0x4]
;         unsafe { &(*RCC::ptr()).ahbrstr }
 8001698:      	bl	#0x24a
 800169c:      	str	r0, [sp]
 800169e:      	b	#-0x2 <stm32f30x_hal::rcc::AHB::rstr::hd51852f638fb07d1+0x10>
 80016a0:      	ldr	r0, [sp]
 80016a2:      	adds	r0, #0x28
;     }
 80016a4:      	add	sp, #0x8
 80016a6:      	pop	{r7, pc}

080016a8 stm32f30x::rcc::ahbenr::<impl stm32f30x::rcc::AHBENR>::modify::h0ff371c9bf18c6e5:
;     pub fn modify<F>(&self, f: F)
 80016a8:      	push	{r7, lr}
 80016aa:      	mov	r7, sp
 80016ac:      	sub	sp, #0x38
 80016ae:      	str	r0, [sp, #0x20]
 80016b0:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80016b2:      	str	r0, [sp, #0xc]
 80016b4:      	bl	#0x6d0
 80016b8:      	bl	#0x346
 80016bc:      	mov	r1, r0
;         let bits = self.register.get();
 80016be:      	str	r0, [sp, #0x28]
 80016c0:      	str	r1, [sp, #0x8]
 80016c2:      	b	#-0x2 <stm32f30x::rcc::ahbenr::<impl stm32f30x::rcc::AHBENR>::modify::h0ff371c9bf18c6e5+0x1c>
;         let r = R { bits: bits };
 80016c4:      	ldr	r0, [sp, #0x8]
 80016c6:      	str	r0, [sp, #0x10]
;         let mut w = W { bits: bits };
 80016c8:      	str	r0, [sp, #0x14]
 80016ca:      	add	r1, sp, #0x10
;         f(&r, &mut w);
 80016cc:      	str	r1, [sp, #0x18]
 80016ce:      	add	r1, sp, #0x14
 80016d0:      	str	r1, [sp, #0x1c]
 80016d2:      	ldr	r0, [sp, #0x18]
 80016d4:      	ldr	r1, [sp, #0x1c]
 80016d6:      	bl	#-0xfc
 80016da:      	b	#-0x2 <stm32f30x::rcc::ahbenr::<impl stm32f30x::rcc::AHBENR>::modify::h0ff371c9bf18c6e5+0x34>
;         self.register.set(w.bits);
 80016dc:      	ldr	r0, [sp, #0x14]
 80016de:      	ldr	r1, [sp, #0xc]
 80016e0:      	str	r1, [sp, #0x30]
 80016e2:      	str	r0, [sp, #0x34]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80016e4:      	str	r0, [sp, #0x4]
 80016e6:      	mov	r0, r1
 80016e8:      	bl	#0x69c
 80016ec:      	ldr	r1, [sp, #0x4]
 80016ee:      	bl	#0x296
;         self.register.set(w.bits);
 80016f2:      	b	#-0x2 <stm32f30x::rcc::ahbenr::<impl stm32f30x::rcc::AHBENR>::modify::h0ff371c9bf18c6e5+0x4c>
;     }
 80016f4:      	add	sp, #0x38
 80016f6:      	pop	{r7, pc}

080016f8 stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::h9b4d617d1cf207fc:
;     pub fn modify<F>(&self, f: F)
 80016f8:      	push	{r7, lr}
 80016fa:      	mov	r7, sp
 80016fc:      	sub	sp, #0x38
 80016fe:      	str	r0, [sp, #0x20]
 8001700:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001702:      	str	r0, [sp, #0xc]
 8001704:      	bl	#0x680
 8001708:      	bl	#0x2f6
 800170c:      	mov	r1, r0
;         let bits = self.register.get();
 800170e:      	str	r0, [sp, #0x28]
 8001710:      	str	r1, [sp, #0x8]
 8001712:      	b	#-0x2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::h9b4d617d1cf207fc+0x1c>
;         let r = R { bits: bits };
 8001714:      	ldr	r0, [sp, #0x8]
 8001716:      	str	r0, [sp, #0x10]
;         let mut w = W { bits: bits };
 8001718:      	str	r0, [sp, #0x14]
 800171a:      	add	r1, sp, #0x10
;         f(&r, &mut w);
 800171c:      	str	r1, [sp, #0x18]
 800171e:      	add	r1, sp, #0x14
 8001720:      	str	r1, [sp, #0x1c]
 8001722:      	ldr	r0, [sp, #0x18]
 8001724:      	ldr	r1, [sp, #0x1c]
 8001726:      	bl	#-0x104
 800172a:      	b	#-0x2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::h9b4d617d1cf207fc+0x34>
;         self.register.set(w.bits);
 800172c:      	ldr	r0, [sp, #0x14]
 800172e:      	ldr	r1, [sp, #0xc]
 8001730:      	str	r1, [sp, #0x30]
 8001732:      	str	r0, [sp, #0x34]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001734:      	str	r0, [sp, #0x4]
 8001736:      	mov	r0, r1
 8001738:      	bl	#0x64c
 800173c:      	ldr	r1, [sp, #0x4]
 800173e:      	bl	#0x246
;         self.register.set(w.bits);
 8001742:      	b	#-0x2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::h9b4d617d1cf207fc+0x4c>
;     }
 8001744:      	add	sp, #0x38
 8001746:      	pop	{r7, pc}

08001748 stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::hfa6fe7da5d0644b2:
;     pub fn modify<F>(&self, f: F)
 8001748:      	push	{r7, lr}
 800174a:      	mov	r7, sp
 800174c:      	sub	sp, #0x38
 800174e:      	str	r0, [sp, #0x20]
 8001750:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001752:      	str	r0, [sp, #0xc]
 8001754:      	bl	#0x630
 8001758:      	bl	#0x2a6
 800175c:      	mov	r1, r0
;         let bits = self.register.get();
 800175e:      	str	r0, [sp, #0x28]
 8001760:      	str	r1, [sp, #0x8]
 8001762:      	b	#-0x2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::hfa6fe7da5d0644b2+0x1c>
;         let r = R { bits: bits };
 8001764:      	ldr	r0, [sp, #0x8]
 8001766:      	str	r0, [sp, #0x10]
;         let mut w = W { bits: bits };
 8001768:      	str	r0, [sp, #0x14]
 800176a:      	add	r1, sp, #0x10
;         f(&r, &mut w);
 800176c:      	str	r1, [sp, #0x18]
 800176e:      	add	r1, sp, #0x14
 8001770:      	str	r1, [sp, #0x1c]
 8001772:      	ldr	r0, [sp, #0x18]
 8001774:      	ldr	r1, [sp, #0x1c]
 8001776:      	bl	#-0x178
 800177a:      	b	#-0x2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::hfa6fe7da5d0644b2+0x34>
;         self.register.set(w.bits);
 800177c:      	ldr	r0, [sp, #0x14]
 800177e:      	ldr	r1, [sp, #0xc]
 8001780:      	str	r1, [sp, #0x30]
 8001782:      	str	r0, [sp, #0x34]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001784:      	str	r0, [sp, #0x4]
 8001786:      	mov	r0, r1
 8001788:      	bl	#0x5fc
 800178c:      	ldr	r1, [sp, #0x4]
 800178e:      	bl	#0x1f6
;         self.register.set(w.bits);
 8001792:      	b	#-0x2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::hfa6fe7da5d0644b2+0x4c>
;     }
 8001794:      	add	sp, #0x38
 8001796:      	pop	{r7, pc}

08001798 <stm32f30x::RCC as stm32f30x_hal::rcc::RccExt>::constrain::h504648c1fd6cfe8f:
;     fn constrain(self) -> Rcc {
 8001798:      	push	{r7, lr}
 800179a:      	mov	r7, sp
 800179c:      	sub	sp, #0x44
 800179e:      	movs	r1, #0x0
;                 hclk: None,
 80017a0:      	str	r1, [sp, #0x20]
;                 pclk1: None,
 80017a2:      	str	r1, [sp, #0x28]
;                 pclk2: None,
 80017a4:      	str	r1, [sp, #0x30]
;                 sysclk: None,
 80017a6:      	str	r1, [sp, #0x38]
;             cfgr: CFGR {
 80017a8:      	ldr	r1, [sp, #0x20]
 80017aa:      	ldr	r2, [sp, #0x24]
 80017ac:      	str	r1, [sp]
 80017ae:      	str	r2, [sp, #0x4]
 80017b0:      	ldr	r1, [sp, #0x28]
 80017b2:      	ldr	r2, [sp, #0x2c]
 80017b4:      	str	r1, [sp, #0x8]
 80017b6:      	str	r2, [sp, #0xc]
 80017b8:      	ldr	r1, [sp, #0x30]
 80017ba:      	ldr	r2, [sp, #0x34]
 80017bc:      	str	r1, [sp, #0x10]
 80017be:      	str	r2, [sp, #0x14]
 80017c0:      	ldr	r1, [sp, #0x38]
 80017c2:      	ldr	r2, [sp, #0x3c]
 80017c4:      	str	r1, [sp, #0x18]
 80017c6:      	str	r2, [sp, #0x1c]
 80017c8:      	mov	r1, sp
;         Rcc {
 80017ca:      	ldm.w	r1!, {r2, r3, r12, lr}
 80017ce:      	stm.w	r0!, {r2, r3, r12, lr}
 80017d2:      	ldm.w	r1, {r2, r3, r12, lr}
 80017d6:      	stm.w	r0, {r2, r3, r12, lr}
;     }
 80017da:      	add	sp, #0x44
 80017dc:      	pop	{r7, pc}

080017de _ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split17h1625a52753fb06e9E:
;                 fn split(self, ahb: &mut AHB) -> Parts {
 80017de:      	push	{r7, lr}
 80017e0:      	mov	r7, sp
 80017e2:      	sub	sp, #0x20
 80017e4:      	str	r0, [sp, #0x1c]
;                     ahb.enr().modify(|_, w| w.$iopxenr().enabled());
 80017e6:      	str	r0, [sp, #0x10]
 80017e8:      	bl	#-0x174
 80017ec:      	str	r0, [sp, #0xc]
 80017ee:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split17h1625a52753fb06e9E+0x12>
 80017f0:      	ldr	r0, [sp, #0xc]
 80017f2:      	bl	#-0x14e
 80017f6:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split17h1625a52753fb06e9E+0x1a>
;                     ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80017f8:      	ldr	r0, [sp, #0x10]
 80017fa:      	bl	#-0x16e
 80017fe:      	str	r0, [sp, #0x8]
 8001800:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split17h1625a52753fb06e9E+0x24>
 8001802:      	ldr	r0, [sp, #0x8]
 8001804:      	bl	#-0xc0
 8001808:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split17h1625a52753fb06e9E+0x2c>
;                     ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 800180a:      	ldr	r0, [sp, #0x10]
 800180c:      	bl	#-0x180
 8001810:      	str	r0, [sp, #0x4]
 8001812:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split17h1625a52753fb06e9E+0x36>
 8001814:      	ldr	r0, [sp, #0x4]
 8001816:      	bl	#-0x122
 800181a:      	b	#-0x2 <_ZN13stm32f30x_hal4gpio5gpioe75_$LT$impl$u20$stm32f30x_hal..gpio..GpioExt$u20$for$u20$stm32f30x..GPIOE$GT$5split17h1625a52753fb06e9E+0x3e>
;                 }
 800181c:      	add	sp, #0x20
 800181e:      	pop	{r7, pc}

08001820 stm32f30x::rcc::ahbenr::W::iopeen::h54d18445e1cb438d:
;     pub fn iopeen(&mut self) -> _IOPEENW {
 8001820:      	sub	sp, #0x8
 8001822:      	str	r0, [sp, #0x4]
;         _IOPEENW { w: self }
 8001824:      	str	r0, [sp]
;     }
 8001826:      	ldr	r0, [sp]
 8001828:      	add	sp, #0x8
 800182a:      	bx	lr

0800182c stm32f30x::rcc::ahbenr::DMAENW::_bits::h5f6603e607c64917:
;     pub fn _bits(&self) -> bool {
 800182c:      	sub	sp, #0x8
 800182e:      	str	r0, [sp, #0x4]
;             DMAENW::DISABLED => false,
 8001830:      	ldrb	r0, [r0]
 8001832:      	lsls	r1, r0, #0x1f
 8001834:      	cmp	r1, #0x0
 8001836:      	beq	#0xa <stm32f30x::rcc::ahbenr::DMAENW::_bits::h5f6603e607c64917+0x18>
 8001838:      	b	#-0x2 <stm32f30x::rcc::ahbenr::DMAENW::_bits::h5f6603e607c64917+0xe>
 800183a:      	movs	r0, #0x1
;             DMAENW::ENABLED => true,
 800183c:      	strb.w	r0, [sp, #0x3]
;         match *self {
 8001840:      	b	#0x8 <stm32f30x::rcc::ahbenr::DMAENW::_bits::h5f6603e607c64917+0x20>
 8001842:      	trap
 8001844:      	movs	r0, #0x0
;             DMAENW::DISABLED => false,
 8001846:      	strb.w	r0, [sp, #0x3]
;         match *self {
 800184a:      	b	#-0x2 <stm32f30x::rcc::ahbenr::DMAENW::_bits::h5f6603e607c64917+0x20>
;     }
 800184c:      	ldrb.w	r0, [sp, #0x3]
 8001850:      	add	sp, #0x8
 8001852:      	bx	lr

08001854 stm32f30x::rcc::ahbenr::_IOPEENW::bit::hcd8fe3d5286c7d16:
;     pub fn bit(self, value: bool) -> &'a mut W {
 8001854:      	sub	sp, #0x10
 8001856:      	mov	r2, r1
 8001858:      	str	r0, [sp, #0x8]
 800185a:      	strb.w	r1, [sp, #0xf]
;         self.w.bits &= !((MASK as u32) << OFFSET);
 800185e:      	ldr	r3, [r0]
 8001860:      	bic	r3, r3, #0x200000
 8001864:      	str	r3, [r0]
;         self.w.bits |= ((value & MASK) as u32) << OFFSET;
 8001866:      	lsls	r1, r1, #0x15
 8001868:      	str	r0, [sp, #0x4]
 800186a:      	str	r1, [sp]
 800186c:      	b	#-0x2 <stm32f30x::rcc::ahbenr::_IOPEENW::bit::hcd8fe3d5286c7d16+0x1a>
 800186e:      	ldr	r0, [sp, #0x4]
 8001870:      	ldr	r1, [r0]
 8001872:      	ldr	r2, [sp]
 8001874:      	orrs	r1, r2
 8001876:      	str	r1, [r0]
;     }
 8001878:      	add	sp, #0x10
 800187a:      	bx	lr

0800187c stm32f30x::rcc::ahbenr::_IOPEENW::enabled::h86758c9e06edc904:
;     pub fn enabled(self) -> &'a mut W {
 800187c:      	push	{r7, lr}
 800187e:      	mov	r7, sp
 8001880:      	sub	sp, #0x10
 8001882:      	str	r0, [sp, #0xc]
 8001884:      	movs	r1, #0x1
;         self.variant(DMAENW::ENABLED)
 8001886:      	strb	r1, [r7, #-5]
 800188a:      	ldrb	r1, [r7, #-5]
 800188e:      	bl	#0xa
 8001892:      	str	r0, [sp, #0x4]
 8001894:      	b	#-0x2 <stm32f30x::rcc::ahbenr::_IOPEENW::enabled::h86758c9e06edc904+0x1a>
;     }
 8001896:      	ldr	r0, [sp, #0x4]
 8001898:      	add	sp, #0x10
 800189a:      	pop	{r7, pc}

0800189c stm32f30x::rcc::ahbenr::_IOPEENW::variant::hf336e3afd3553cd2:
;     pub fn variant(self, variant: IOPEENW) -> &'a mut W {
 800189c:      	push	{r7, lr}
 800189e:      	mov	r7, sp
 80018a0:      	sub	sp, #0x18
 80018a2:      	mov	r2, r1
 80018a4:      	strb	r1, [r7, #-5]
 80018a8:      	str	r0, [sp, #0x14]
 80018aa:      	subs	r1, r7, #0x5
;             self.bit(variant._bits())
 80018ac:      	str	r0, [sp, #0xc]
 80018ae:      	mov	r0, r1
 80018b0:      	str	r2, [sp, #0x8]
 80018b2:      	bl	#-0x8a
 80018b6:      	str	r0, [sp, #0x4]
 80018b8:      	b	#-0x2 <stm32f30x::rcc::ahbenr::_IOPEENW::variant::hf336e3afd3553cd2+0x1e>
 80018ba:      	ldr	r0, [sp, #0x4]
 80018bc:      	and	r1, r0, #0x1
 80018c0:      	ldr	r0, [sp, #0xc]
 80018c2:      	bl	#-0x72
 80018c6:      	str	r0, [sp]
 80018c8:      	b	#-0x2 <stm32f30x::rcc::ahbenr::_IOPEENW::variant::hf336e3afd3553cd2+0x2e>
;     }
 80018ca:      	ldr	r0, [sp]
 80018cc:      	add	sp, #0x18
 80018ce:      	pop	{r7, pc}

080018d0 stm32f30x::rcc::ahbrstr::W::ioperst::h4dde42822937ecce:
;     pub fn ioperst(&mut self) -> _IOPERSTW {
 80018d0:      	sub	sp, #0x8
 80018d2:      	str	r0, [sp, #0x4]
;         _IOPERSTW { w: self }
 80018d4:      	str	r0, [sp]
;     }
 80018d6:      	ldr	r0, [sp]
 80018d8:      	add	sp, #0x8
 80018da:      	bx	lr

080018dc stm32f30x::GPIOE::ptr::hb2888b000fedaf01:
;     pub fn ptr() -> *const gpioc::RegisterBlock {
 80018dc:      	movw	r0, #0x1000
 80018e0:      	movt	r0, #0x4800
;     }
 80018e4:      	bx	lr

080018e6 stm32f30x::RCC::ptr::h6dde69e007c2f5f9:
;     pub fn ptr() -> *const rcc::RegisterBlock {
 80018e6:      	movw	r0, #0x1000
 80018ea:      	movt	r0, #0x4002
;     }
 80018ee:      	bx	lr

080018f0 stm32f30x::Peripherals::steal::hd981b6f7e204c5a4:
;     pub unsafe fn steal() -> Self {
 80018f0:      	push	{r7, lr}
 80018f2:      	mov	r7, sp
 80018f4:      	sub	sp, #0x8
;         debug_assert!(!DEVICE_PERIPHERALS);
 80018f6:      	movw	r0, #0x0
 80018fa:      	movt	r0, #0x2000
 80018fe:      	ldrb	r0, [r0]
 8001900:      	lsls	r0, r0, #0x1f
 8001902:      	cmp	r0, #0x0
 8001904:      	bne	#0x10 <stm32f30x::Peripherals::steal::hd981b6f7e204c5a4+0x28>
 8001906:      	b	#-0x2 <stm32f30x::Peripherals::steal::hd981b6f7e204c5a4+0x18>
;         DEVICE_PERIPHERALS = true;
 8001908:      	movw	r0, #0x0
 800190c:      	movt	r0, #0x2000
 8001910:      	movs	r1, #0x1
 8001912:      	strb	r1, [r0]
;     }
 8001914:      	add	sp, #0x8
 8001916:      	pop	{r7, pc}
;         debug_assert!(!DEVICE_PERIPHERALS);
 8001918:      	movw	r0, #0x3b74
 800191c:      	movt	r0, #0x800
 8001920:      	movw	r2, #0x3bf4
 8001924:      	movt	r2, #0x800
 8001928:      	movs	r1, #0x25
 800192a:      	bl	#0x5b2
 800192e:      	trap

08001930 stm32f30x::rcc::ahbrstr::_IOPERSTW::set_bit::hafbc3c353b394e32:
;     pub fn set_bit(self) -> &'a mut W {
 8001930:      	push	{r7, lr}
 8001932:      	mov	r7, sp
 8001934:      	sub	sp, #0x8
 8001936:      	str	r0, [sp, #0x4]
 8001938:      	movs	r1, #0x1
;         self.bit(true)
 800193a:      	bl	#0x22
 800193e:      	str	r0, [sp]
 8001940:      	b	#-0x2 <stm32f30x::rcc::ahbrstr::_IOPERSTW::set_bit::hafbc3c353b394e32+0x12>
;     }
 8001942:      	ldr	r0, [sp]
 8001944:      	add	sp, #0x8
 8001946:      	pop	{r7, pc}

08001948 stm32f30x::rcc::ahbrstr::_IOPERSTW::clear_bit::he41cb633064a702f:
;     pub fn clear_bit(self) -> &'a mut W {
 8001948:      	push	{r7, lr}
 800194a:      	mov	r7, sp
 800194c:      	sub	sp, #0x8
 800194e:      	str	r0, [sp, #0x4]
 8001950:      	movs	r1, #0x0
;         self.bit(false)
 8001952:      	bl	#0xa
 8001956:      	str	r0, [sp]
 8001958:      	b	#-0x2 <stm32f30x::rcc::ahbrstr::_IOPERSTW::clear_bit::he41cb633064a702f+0x12>
;     }
 800195a:      	ldr	r0, [sp]
 800195c:      	add	sp, #0x8
 800195e:      	pop	{r7, pc}

08001960 stm32f30x::rcc::ahbrstr::_IOPERSTW::bit::h309e803cfb3dfe3f:
;     pub fn bit(self, value: bool) -> &'a mut W {
 8001960:      	sub	sp, #0x10
 8001962:      	mov	r2, r1
 8001964:      	str	r0, [sp, #0x8]
 8001966:      	strb.w	r1, [sp, #0xf]
;         self.w.bits &= !((MASK as u32) << OFFSET);
 800196a:      	ldr	r3, [r0]
 800196c:      	bic	r3, r3, #0x200000
 8001970:      	str	r3, [r0]
;         self.w.bits |= ((value & MASK) as u32) << OFFSET;
 8001972:      	lsls	r1, r1, #0x15
 8001974:      	str	r0, [sp, #0x4]
 8001976:      	str	r1, [sp]
 8001978:      	b	#-0x2 <stm32f30x::rcc::ahbrstr::_IOPERSTW::bit::h309e803cfb3dfe3f+0x1a>
 800197a:      	ldr	r0, [sp, #0x4]
 800197c:      	ldr	r1, [r0]
 800197e:      	ldr	r2, [sp]
 8001980:      	orrs	r1, r2
 8001982:      	str	r1, [r0]
;     }
 8001984:      	add	sp, #0x10
 8001986:      	bx	lr

08001988 core::ptr::write_volatile::h99898373d79c18e6:
 8001988:      	sub	sp, #0x8
 800198a:      	str	r0, [sp]
 800198c:      	str	r1, [sp, #0x4]
 800198e:      	str	r1, [r0]
 8001990:      	b	#-0x2 <core::ptr::write_volatile::h99898373d79c18e6+0xa>
 8001992:      	add	sp, #0x8
 8001994:      	bx	lr

08001996 core::ptr::read::he4ac7f8ffdcf68dc:
 8001996:      	push	{r7, lr}
 8001998:      	mov	r7, sp
 800199a:      	sub	sp, #0x28
 800199c:      	str	r0, [sp, #0x10]
 800199e:      	ldr	r1, [sp, #0x14]
 80019a0:      	str	r1, [sp, #0xc]
 80019a2:      	str	r0, [sp, #0x8]
 80019a4:      	b	#-0x2 <core::ptr::read::he4ac7f8ffdcf68dc+0x10>
 80019a6:      	add	r0, sp, #0xc
 80019a8:      	str	r0, [sp, #0x20]
 80019aa:      	str	r0, [sp, #0x24]
 80019ac:      	b	#-0x2 <core::ptr::read::he4ac7f8ffdcf68dc+0x18>
 80019ae:      	add	r1, sp, #0xc
 80019b0:      	movs	r2, #0x1
 80019b2:      	ldr	r0, [sp, #0x8]
 80019b4:      	bl	#0x1e
 80019b8:      	b	#-0x2 <core::ptr::read::he4ac7f8ffdcf68dc+0x24>
 80019ba:      	ldr	r0, [sp, #0xc]
 80019bc:      	str	r0, [sp, #0x18]
 80019be:      	str	r0, [sp, #0x1c]
 80019c0:      	str	r0, [sp, #0x4]
 80019c2:      	b	#-0x2 <core::ptr::read::he4ac7f8ffdcf68dc+0x2e>
 80019c4:      	ldr	r0, [sp, #0x4]
 80019c6:      	add	sp, #0x28
 80019c8:      	pop	{r7, pc}

080019ca core::ptr::write::h9d66e25ff14c36a5:
 80019ca:      	sub	sp, #0x8
 80019cc:      	str	r0, [sp]
 80019ce:      	str	r1, [sp, #0x4]
 80019d0:      	str	r1, [r0]
 80019d2:      	add	sp, #0x8
 80019d4:      	bx	lr

080019d6 core::intrinsics::copy_nonoverlapping::h4e101ad808a402ff:
 80019d6:      	push	{r7, lr}
 80019d8:      	mov	r7, sp
 80019da:      	sub	sp, #0x10
 80019dc:      	str	r0, [sp, #0x4]
 80019de:      	str	r1, [sp, #0x8]
 80019e0:      	str	r2, [sp, #0xc]
 80019e2:      	lsls	r2, r2, #0x2
 80019e4:      	str	r0, [sp]
 80019e6:      	mov	r0, r1
 80019e8:      	ldr	r1, [sp]
 80019ea:      	bl	#0x1de8
 80019ee:      	b	#-0x2 <core::intrinsics::copy_nonoverlapping::h4e101ad808a402ff+0x1a>
 80019f0:      	add	sp, #0x10
 80019f2:      	pop	{r7, pc}

080019f4 __cpsid:
 80019f4:      	cpsid i
 80019f6:      	bx	lr

080019f8 __cpsie:
 80019f8:      	cpsie i
 80019fa:      	bx	lr

080019fc __primask:
 80019fc:      	mrs	r0, primask
 8001a00:      	bx	lr

08001a02 core::ptr::read_volatile::h00c06416d43a2452:
 8001a02:      	sub	sp, #0xc
 8001a04:      	str	r0, [sp, #0x4]
 8001a06:      	ldr	r0, [r0]
 8001a08:      	str	r0, [sp, #0x8]
 8001a0a:      	ldr	r0, [sp, #0x8]
 8001a0c:      	str	r0, [sp]
 8001a0e:      	b	#-0x2 <core::ptr::read_volatile::h00c06416d43a2452+0xe>
 8001a10:      	ldr	r0, [sp]
 8001a12:      	add	sp, #0xc
 8001a14:      	bx	lr

08001a16 core::ptr::write_volatile::h7b99f4e7ec306161:
 8001a16:      	sub	sp, #0x8
 8001a18:      	str	r0, [sp]
 8001a1a:      	str	r1, [sp, #0x4]
 8001a1c:      	str	r1, [r0]
 8001a1e:      	b	#-0x2 <core::ptr::write_volatile::h7b99f4e7ec306161+0xa>
 8001a20:      	add	sp, #0x8
 8001a22:      	bx	lr

08001a24 core::ptr::write_volatile::hc931e20cb774291c:
 8001a24:      	sub	sp, #0x8
 8001a26:      	mov	r2, r1
 8001a28:      	str	r0, [sp]
 8001a2a:      	strb.w	r1, [sp, #0x7]
 8001a2e:      	strb	r1, [r0]
 8001a30:      	b	#-0x2 <core::ptr::write_volatile::hc931e20cb774291c+0xe>
 8001a32:      	add	sp, #0x8
 8001a34:      	bx	lr

08001a36 core::ptr::write_volatile::hf345bbcb03a4c30b:
 8001a36:      	sub	sp, #0x8
 8001a38:      	mov	r2, r1
 8001a3a:      	str	r0, [sp]
 8001a3c:      	strh.w	r1, [sp, #0x6]
 8001a40:      	strh	r1, [r0]
 8001a42:      	b	#-0x2 <core::ptr::write_volatile::hf345bbcb03a4c30b+0xe>
 8001a44:      	add	sp, #0x8
 8001a46:      	bx	lr

08001a48 core::ptr::swap_nonoverlapping::h722f4caa2285f15c:
 8001a48:      	push	{r7, lr}
 8001a4a:      	mov	r7, sp
 8001a4c:      	sub	sp, #0x30
 8001a4e:      	str	r0, [sp, #0x14]
 8001a50:      	str	r1, [sp, #0x18]
 8001a52:      	str	r2, [sp, #0x1c]
 8001a54:      	mov	r3, r0
 8001a56:      	str	r0, [sp, #0x20]
 8001a58:      	mov	r0, r1
 8001a5a:      	str	r1, [sp, #0x24]
 8001a5c:      	movs	r1, #0x4
 8001a5e:      	str	r1, [sp, #0x2c]
 8001a60:      	ldr	r1, [sp, #0x2c]
 8001a62:      	str	r2, [sp, #0x10]
 8001a64:      	str	r3, [sp, #0xc]
 8001a66:      	str	r0, [sp, #0x8]
 8001a68:      	str	r1, [sp, #0x4]
 8001a6a:      	b	#-0x2 <core::ptr::swap_nonoverlapping::h722f4caa2285f15c+0x24>
 8001a6c:      	ldr	r0, [sp, #0x4]
 8001a6e:      	ldr	r1, [sp, #0x10]
 8001a70:      	mul	r2, r0, r1
 8001a74:      	str	r2, [sp, #0x28]
 8001a76:      	ldr	r0, [sp, #0xc]
 8001a78:      	ldr	r1, [sp, #0x8]
 8001a7a:      	bl	#0x92
 8001a7e:      	b	#-0x2 <core::ptr::swap_nonoverlapping::h722f4caa2285f15c+0x38>
 8001a80:      	add	sp, #0x30
 8001a82:      	pop	{r7, pc}

08001a84 core::ptr::slice_from_raw_parts::h205f51298607e594:
 8001a84:      	sub	sp, #0x18
 8001a86:      	str	r0, [sp, #0x10]
 8001a88:      	str	r1, [sp, #0x14]
 8001a8a:      	str	r0, [sp, #0x8]
 8001a8c:      	str	r1, [sp, #0xc]
 8001a8e:      	ldr	r0, [sp, #0x8]
 8001a90:      	ldr	r1, [sp, #0xc]
 8001a92:      	str	r0, [sp]
 8001a94:      	str	r1, [sp, #0x4]
 8001a96:      	ldr	r0, [sp]
 8001a98:      	ldr	r1, [sp, #0x4]
 8001a9a:      	add	sp, #0x18
 8001a9c:      	bx	lr

08001a9e core::ptr::slice_from_raw_parts::hd0c39399c7308a23:
 8001a9e:      	sub	sp, #0x18
 8001aa0:      	str	r0, [sp, #0x10]
 8001aa2:      	str	r1, [sp, #0x14]
 8001aa4:      	str	r0, [sp, #0x8]
 8001aa6:      	str	r1, [sp, #0xc]
 8001aa8:      	ldr	r0, [sp, #0x8]
 8001aaa:      	ldr	r1, [sp, #0xc]
 8001aac:      	str	r0, [sp]
 8001aae:      	str	r1, [sp, #0x4]
 8001ab0:      	ldr	r0, [sp]
 8001ab2:      	ldr	r1, [sp, #0x4]
 8001ab4:      	add	sp, #0x18
 8001ab6:      	bx	lr

08001ab8 core::ptr::swap_nonoverlapping_one::h36afb0b05fb4c027:
 8001ab8:      	push	{r7, lr}
 8001aba:      	mov	r7, sp
 8001abc:      	sub	sp, #0x20
 8001abe:      	str	r0, [sp, #0x10]
 8001ac0:      	str	r1, [sp, #0x14]
 8001ac2:      	movs	r2, #0x4
 8001ac4:      	str	r2, [sp, #0x1c]
 8001ac6:      	ldr	r2, [sp, #0x1c]
 8001ac8:      	str	r1, [sp, #0xc]
 8001aca:      	str	r0, [sp, #0x8]
 8001acc:      	str	r2, [sp, #0x4]
 8001ace:      	b	#-0x2 <core::ptr::swap_nonoverlapping_one::h36afb0b05fb4c027+0x18>
 8001ad0:      	ldr	r0, [sp, #0x4]
 8001ad2:      	cmp	r0, #0x20
 8001ad4:      	blo	#0xc <core::ptr::swap_nonoverlapping_one::h36afb0b05fb4c027+0x2c>
 8001ad6:      	b	#-0x2 <core::ptr::swap_nonoverlapping_one::h36afb0b05fb4c027+0x20>
 8001ad8:      	movs	r2, #0x1
 8001ada:      	ldr	r0, [sp, #0x8]
 8001adc:      	ldr	r1, [sp, #0xc]
 8001ade:      	bl	#-0x9a
 8001ae2:      	b	#0x24 <core::ptr::swap_nonoverlapping_one::h36afb0b05fb4c027+0x52>
 8001ae4:      	ldr	r0, [sp, #0x8]
 8001ae6:      	bl	#0x1ba
 8001aea:      	mov	r1, r0
 8001aec:      	str	r0, [sp, #0x18]
 8001aee:      	str	r1, [sp]
 8001af0:      	b	#-0x2 <core::ptr::swap_nonoverlapping_one::h36afb0b05fb4c027+0x3a>
 8001af2:      	movs	r2, #0x1
 8001af4:      	ldr	r0, [sp, #0xc]
 8001af6:      	ldr	r1, [sp, #0x8]
 8001af8:      	bl	#0x1e8
 8001afc:      	b	#-0x2 <core::ptr::swap_nonoverlapping_one::h36afb0b05fb4c027+0x46>
 8001afe:      	ldr	r0, [sp, #0xc]
 8001b00:      	ldr	r1, [sp]
 8001b02:      	bl	#0x1d2
 8001b06:      	b	#-0x2 <core::ptr::swap_nonoverlapping_one::h36afb0b05fb4c027+0x50>
 8001b08:      	b	#0x0 <core::ptr::swap_nonoverlapping_one::h36afb0b05fb4c027+0x54>
 8001b0a:      	b	#-0x2 <core::ptr::swap_nonoverlapping_one::h36afb0b05fb4c027+0x54>
 8001b0c:      	add	sp, #0x20
 8001b0e:      	pop	{r7, pc}

08001b10 core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45:
 8001b10:      	push	{r4, r6, r7, lr}
 8001b12:      	add	r7, sp, #0x8
 8001b14:      	sub	sp, #0xd0
 8001b16:      	mov	r4, sp
 8001b18:      	bfc	r4, #0, #5
 8001b1c:      	mov	sp, r4
 8001b1e:      	str	r0, [sp, #0x90]
 8001b20:      	str	r1, [sp, #0x94]
 8001b22:      	str	r2, [sp, #0x98]
 8001b24:      	movs	r3, #0x20
 8001b26:      	str	r3, [sp, #0xbc]
 8001b28:      	ldr	r3, [sp, #0xbc]
 8001b2a:      	str	r3, [sp, #0x9c]
 8001b2c:      	str	r2, [sp, #0x38]
 8001b2e:      	str	r1, [sp, #0x34]
 8001b30:      	str	r0, [sp, #0x30]
 8001b32:      	str	r3, [sp, #0x2c]
 8001b34:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x26>
 8001b36:      	movs	r0, #0x0
 8001b38:      	str	r0, [sp, #0x3c]
 8001b3a:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x2c>
 8001b3c:      	ldr	r0, [sp, #0x3c]
 8001b3e:      	ldr	r1, [sp, #0x2c]
 8001b40:      	add	r0, r1
 8001b42:      	ldr	r2, [sp, #0x38]
 8001b44:      	cmp	r0, r2
 8001b46:      	bls	#0xa <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x44>
 8001b48:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x3a>
 8001b4a:      	ldr	r0, [sp, #0x3c]
 8001b4c:      	ldr	r1, [sp, #0x38]
 8001b4e:      	cmp	r0, r1
 8001b50:      	blo	#0x68 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0xac>
 8001b52:      	b	#0xce <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x114>
 8001b54:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x46>
 8001b56:      	add	r0, sp, #0x40
 8001b58:      	str	r0, [sp, #0xc8]
 8001b5a:      	str	r0, [sp, #0xcc]
 8001b5c:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x4e>
 8001b5e:      	add	r0, sp, #0x40
 8001b60:      	mov	r1, r0
 8001b62:      	str	r0, [sp, #0xa0]
 8001b64:      	ldr	r0, [sp, #0x3c]
 8001b66:      	ldr	r2, [sp, #0x30]
 8001b68:      	str	r0, [sp, #0x28]
 8001b6a:      	mov	r0, r2
 8001b6c:      	ldr	r3, [sp, #0x28]
 8001b6e:      	str	r1, [sp, #0x24]
 8001b70:      	mov	r1, r3
 8001b72:      	bl	#0x1e4
 8001b76:      	mov	r1, r0
 8001b78:      	str	r0, [sp, #0xa4]
 8001b7a:      	str	r1, [sp, #0x20]
 8001b7c:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x6e>
 8001b7e:      	ldr	r1, [sp, #0x3c]
 8001b80:      	ldr	r0, [sp, #0x34]
 8001b82:      	bl	#0x1d4
 8001b86:      	mov	r1, r0
 8001b88:      	str	r0, [sp, #0xa8]
 8001b8a:      	str	r1, [sp, #0x1c]
 8001b8c:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x7e>
 8001b8e:      	ldr	r0, [sp, #0x20]
 8001b90:      	ldr	r1, [sp, #0x24]
 8001b92:      	ldr	r2, [sp, #0x2c]
 8001b94:      	bl	#0x1a6
 8001b98:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x8a>
 8001b9a:      	ldr	r0, [sp, #0x1c]
 8001b9c:      	ldr	r1, [sp, #0x20]
 8001b9e:      	ldr	r2, [sp, #0x2c]
 8001ba0:      	bl	#0x19a
 8001ba4:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x96>
 8001ba6:      	ldr	r0, [sp, #0x24]
 8001ba8:      	ldr	r1, [sp, #0x1c]
 8001baa:      	ldr	r2, [sp, #0x2c]
 8001bac:      	bl	#0x18e
 8001bb0:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0xa2>
 8001bb2:      	ldr	r0, [sp, #0x3c]
 8001bb4:      	ldr	r1, [sp, #0x2c]
 8001bb6:      	add	r0, r1
 8001bb8:      	str	r0, [sp, #0x3c]
 8001bba:      	b	#-0x82 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x2c>
 8001bbc:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0xae>
 8001bbe:      	ldr	r0, [sp, #0x3c]
 8001bc0:      	ldr	r1, [sp, #0x38]
 8001bc2:      	subs	r0, r1, r0
 8001bc4:      	mov	r2, r0
 8001bc6:      	str	r0, [sp, #0xac]
 8001bc8:      	add	r0, sp, #0x70
 8001bca:      	str	r0, [sp, #0xc0]
 8001bcc:      	str	r0, [sp, #0xc4]
 8001bce:      	str	r2, [sp, #0x18]
 8001bd0:      	str	r0, [sp, #0x14]
 8001bd2:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0xc4>
 8001bd4:      	ldr	r0, [sp, #0x14]
 8001bd6:      	ldr	r1, [sp, #0x14]
 8001bd8:      	str	r1, [sp, #0xb0]
 8001bda:      	ldr	r1, [sp, #0x3c]
 8001bdc:      	ldr	r2, [sp, #0x30]
 8001bde:      	str	r0, [sp, #0x10]
 8001be0:      	mov	r0, r2
 8001be2:      	bl	#0x174
 8001be6:      	mov	r1, r0
 8001be8:      	str	r0, [sp, #0xb4]
 8001bea:      	str	r1, [sp, #0xc]
 8001bec:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0xde>
 8001bee:      	ldr	r1, [sp, #0x3c]
 8001bf0:      	ldr	r0, [sp, #0x34]
 8001bf2:      	bl	#0x164
 8001bf6:      	mov	r1, r0
 8001bf8:      	str	r0, [sp, #0xb8]
 8001bfa:      	str	r1, [sp, #0x8]
 8001bfc:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0xee>
 8001bfe:      	ldr	r0, [sp, #0xc]
 8001c00:      	ldr	r1, [sp, #0x10]
 8001c02:      	ldr	r2, [sp, #0x18]
 8001c04:      	bl	#0x136
 8001c08:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0xfa>
 8001c0a:      	ldr	r0, [sp, #0x8]
 8001c0c:      	ldr	r1, [sp, #0xc]
 8001c0e:      	ldr	r2, [sp, #0x18]
 8001c10:      	bl	#0x12a
 8001c14:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x106>
 8001c16:      	ldr	r0, [sp, #0x10]
 8001c18:      	ldr	r1, [sp, #0x8]
 8001c1a:      	ldr	r2, [sp, #0x18]
 8001c1c:      	bl	#0x11e
 8001c20:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x112>
 8001c22:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::hb9028dba8b841d45+0x114>
 8001c24:      	sub.w	r4, r7, #0x8
 8001c28:      	mov	sp, r4
 8001c2a:      	pop	{r4, r6, r7, pc}

08001c2c core::ptr::read::h139884dc806de1bd:
 8001c2c:      	push	{r7, lr}
 8001c2e:      	mov	r7, sp
 8001c30:      	sub	sp, #0x20
 8001c32:      	str	r0, [sp, #0xc]
 8001c34:      	ldrh	r1, [r7, #-14]
 8001c38:      	strh	r1, [r7, #-22]
 8001c3c:      	str	r0, [sp, #0x4]
 8001c3e:      	b	#-0x2 <core::ptr::read::h139884dc806de1bd+0x14>
 8001c40:      	sub.w	r0, r7, #0x16
 8001c44:      	str	r0, [sp, #0x18]
 8001c46:      	str	r0, [sp, #0x1c]
 8001c48:      	b	#-0x2 <core::ptr::read::h139884dc806de1bd+0x1e>
 8001c4a:      	sub.w	r1, r7, #0x16
 8001c4e:      	movs	r2, #0x1
 8001c50:      	ldr	r0, [sp, #0x4]
 8001c52:      	bl	#0xac
 8001c56:      	b	#-0x2 <core::ptr::read::h139884dc806de1bd+0x2c>
 8001c58:      	ldrh	r0, [r7, #-22]
 8001c5c:      	mov	r1, r0
 8001c5e:      	strh.w	r0, [sp, #0x14]
 8001c62:      	strh	r0, [r7, #-10]
 8001c66:      	str	r1, [sp]
 8001c68:      	b	#-0x2 <core::ptr::read::h139884dc806de1bd+0x3e>
 8001c6a:      	ldr	r0, [sp]
 8001c6c:      	add	sp, #0x20
 8001c6e:      	pop	{r7, pc}

08001c70 core::ptr::read::h32a85f2365cad9d0:
 8001c70:      	push	{r7, lr}
 8001c72:      	mov	r7, sp
 8001c74:      	sub	sp, #0x28
 8001c76:      	str	r0, [sp, #0x10]
 8001c78:      	ldr	r1, [sp, #0x14]
 8001c7a:      	str	r1, [sp, #0xc]
 8001c7c:      	str	r0, [sp, #0x8]
 8001c7e:      	b	#-0x2 <core::ptr::read::h32a85f2365cad9d0+0x10>
 8001c80:      	add	r0, sp, #0xc
 8001c82:      	str	r0, [sp, #0x20]
 8001c84:      	str	r0, [sp, #0x24]
 8001c86:      	b	#-0x2 <core::ptr::read::h32a85f2365cad9d0+0x18>
 8001c88:      	add	r1, sp, #0xc
 8001c8a:      	movs	r2, #0x1
 8001c8c:      	ldr	r0, [sp, #0x8]
 8001c8e:      	bl	#0x8e
 8001c92:      	b	#-0x2 <core::ptr::read::h32a85f2365cad9d0+0x24>
 8001c94:      	ldr	r0, [sp, #0xc]
 8001c96:      	str	r0, [sp, #0x18]
 8001c98:      	str	r0, [sp, #0x1c]
 8001c9a:      	str	r0, [sp, #0x4]
 8001c9c:      	b	#-0x2 <core::ptr::read::h32a85f2365cad9d0+0x2e>
 8001c9e:      	ldr	r0, [sp, #0x4]
 8001ca0:      	add	sp, #0x28
 8001ca2:      	pop	{r7, pc}

08001ca4 core::ptr::read::hb7d39268e99b5ac0:
 8001ca4:      	push	{r7, lr}
 8001ca6:      	mov	r7, sp
 8001ca8:      	sub	sp, #0x28
 8001caa:      	str	r0, [sp, #0x10]
 8001cac:      	ldr	r1, [sp, #0x14]
 8001cae:      	str	r1, [sp, #0xc]
 8001cb0:      	str	r0, [sp, #0x8]
 8001cb2:      	b	#-0x2 <core::ptr::read::hb7d39268e99b5ac0+0x10>
 8001cb4:      	add	r0, sp, #0xc
 8001cb6:      	str	r0, [sp, #0x20]
 8001cb8:      	str	r0, [sp, #0x24]
 8001cba:      	b	#-0x2 <core::ptr::read::hb7d39268e99b5ac0+0x18>
 8001cbc:      	add	r1, sp, #0xc
 8001cbe:      	movs	r2, #0x1
 8001cc0:      	ldr	r0, [sp, #0x8]
 8001cc2:      	bl	#0x1e
 8001cc6:      	b	#-0x2 <core::ptr::read::hb7d39268e99b5ac0+0x24>
 8001cc8:      	ldr	r0, [sp, #0xc]
 8001cca:      	str	r0, [sp, #0x18]
 8001ccc:      	str	r0, [sp, #0x1c]
 8001cce:      	str	r0, [sp, #0x4]
 8001cd0:      	b	#-0x2 <core::ptr::read::hb7d39268e99b5ac0+0x2e>
 8001cd2:      	ldr	r0, [sp, #0x4]
 8001cd4:      	add	sp, #0x28
 8001cd6:      	pop	{r7, pc}

08001cd8 core::ptr::write::h0f280a2f4e1698f0:
 8001cd8:      	sub	sp, #0x8
 8001cda:      	str	r0, [sp]
 8001cdc:      	str	r1, [sp, #0x4]
 8001cde:      	str	r1, [r0]
 8001ce0:      	add	sp, #0x8
 8001ce2:      	bx	lr

08001ce4 core::intrinsics::copy_nonoverlapping::h34c11120e83f5c5d:
 8001ce4:      	push	{r7, lr}
 8001ce6:      	mov	r7, sp
 8001ce8:      	sub	sp, #0x10
 8001cea:      	str	r0, [sp, #0x4]
 8001cec:      	str	r1, [sp, #0x8]
 8001cee:      	str	r2, [sp, #0xc]
 8001cf0:      	lsls	r2, r2, #0x2
 8001cf2:      	str	r0, [sp]
 8001cf4:      	mov	r0, r1
 8001cf6:      	ldr	r1, [sp]
 8001cf8:      	bl	#0x1ada
 8001cfc:      	b	#-0x2 <core::intrinsics::copy_nonoverlapping::h34c11120e83f5c5d+0x1a>
 8001cfe:      	add	sp, #0x10
 8001d00:      	pop	{r7, pc}

08001d02 core::intrinsics::copy_nonoverlapping::h487cf69346e0607c:
 8001d02:      	push	{r7, lr}
 8001d04:      	mov	r7, sp
 8001d06:      	sub	sp, #0x10
 8001d08:      	str	r0, [sp, #0x4]
 8001d0a:      	str	r1, [sp, #0x8]
 8001d0c:      	str	r2, [sp, #0xc]
 8001d0e:      	lsls	r2, r2, #0x1
 8001d10:      	str	r0, [sp]
 8001d12:      	mov	r0, r1
 8001d14:      	ldr	r1, [sp]
 8001d16:      	bl	#0x1a42
 8001d1a:      	b	#-0x2 <core::intrinsics::copy_nonoverlapping::h487cf69346e0607c+0x1a>
 8001d1c:      	add	sp, #0x10
 8001d1e:      	pop	{r7, pc}

08001d20 core::intrinsics::copy_nonoverlapping::h5025fd870fd15596:
 8001d20:      	push	{r7, lr}
 8001d22:      	mov	r7, sp
 8001d24:      	sub	sp, #0x10
 8001d26:      	str	r0, [sp, #0x4]
 8001d28:      	str	r1, [sp, #0x8]
 8001d2a:      	str	r2, [sp, #0xc]
 8001d2c:      	lsls	r2, r2, #0x2
 8001d2e:      	str	r0, [sp]
 8001d30:      	mov	r0, r1
 8001d32:      	ldr	r1, [sp]
 8001d34:      	bl	#0x1a9e
 8001d38:      	b	#-0x2 <core::intrinsics::copy_nonoverlapping::h5025fd870fd15596+0x1a>
 8001d3a:      	add	sp, #0x10
 8001d3c:      	pop	{r7, pc}

08001d3e core::intrinsics::copy_nonoverlapping::haef3a6bf4628cebc:
 8001d3e:      	push	{r7, lr}
 8001d40:      	mov	r7, sp
 8001d42:      	sub	sp, #0x10
 8001d44:      	str	r0, [sp, #0x4]
 8001d46:      	str	r1, [sp, #0x8]
 8001d48:      	str	r2, [sp, #0xc]
 8001d4a:      	str	r0, [sp]
 8001d4c:      	mov	r0, r1
 8001d4e:      	ldr	r1, [sp]
 8001d50:      	bl	#0x1a08
 8001d54:      	b	#-0x2 <core::intrinsics::copy_nonoverlapping::haef3a6bf4628cebc+0x18>
 8001d56:      	add	sp, #0x10
 8001d58:      	pop	{r7, pc}

08001d5a core::ptr::mut_ptr::<impl *mut T>::add::h6757331eb0f4f5ae:
 8001d5a:      	push	{r7, lr}
 8001d5c:      	mov	r7, sp
 8001d5e:      	sub	sp, #0x10
 8001d60:      	str	r0, [sp, #0x8]
 8001d62:      	str	r1, [sp, #0xc]
 8001d64:      	bl	#0xa
 8001d68:      	str	r0, [sp, #0x4]
 8001d6a:      	b	#-0x2 <core::ptr::mut_ptr::<impl *mut T>::add::h6757331eb0f4f5ae+0x12>
 8001d6c:      	ldr	r0, [sp, #0x4]
 8001d6e:      	add	sp, #0x10
 8001d70:      	pop	{r7, pc}

08001d72 core::ptr::mut_ptr::<impl *mut T>::offset::h2bb4514543dcd9fe:
 8001d72:      	sub	sp, #0x10
 8001d74:      	str	r0, [sp, #0x4]
 8001d76:      	str	r1, [sp, #0x8]
 8001d78:      	add	r0, r1
 8001d7a:      	str	r0, [sp, #0xc]
 8001d7c:      	ldr	r0, [sp, #0xc]
 8001d7e:      	str	r0, [sp]
 8001d80:      	b	#-0x2 <core::ptr::mut_ptr::<impl *mut T>::offset::h2bb4514543dcd9fe+0x10>
 8001d82:      	ldr	r0, [sp]
 8001d84:      	add	sp, #0x10
 8001d86:      	bx	lr

08001d88 core::cell::UnsafeCell<T>::get::he53769f796f3eda1:
 8001d88:      	sub	sp, #0x4
 8001d8a:      	str	r0, [sp]
 8001d8c:      	add	sp, #0x4
 8001d8e:      	bx	lr

08001d90 <T as core::convert::From<T>>::from::hdb4e1936ba9af7fe:
 8001d90:      	sub	sp, #0x4
 8001d92:      	str	r0, [sp]
 8001d94:      	add	sp, #0x4
 8001d96:      	bx	lr

08001d98 <T as core::convert::Into<U>>::into::h27773c87cbf52e74:
 8001d98:      	push	{r7, lr}
 8001d9a:      	mov	r7, sp
 8001d9c:      	sub	sp, #0x8
 8001d9e:      	str	r0, [sp, #0x4]
 8001da0:      	bl	#-0x14
 8001da4:      	str	r0, [sp]
 8001da6:      	b	#-0x2 <<T as core::convert::Into<U>>::into::h27773c87cbf52e74+0x10>
 8001da8:      	ldr	r0, [sp]
 8001daa:      	add	sp, #0x8
 8001dac:      	pop	{r7, pc}

08001dae <T as core::convert::TryFrom<U>>::try_from::hf876e61d0bdd01d1:
 8001dae:      	push	{r7, lr}
 8001db0:      	mov	r7, sp
 8001db2:      	sub	sp, #0x10
 8001db4:      	str	r0, [sp, #0xc]
 8001db6:      	bl	#-0x22
 8001dba:      	str	r0, [sp, #0x4]
 8001dbc:      	b	#-0x2 <<T as core::convert::TryFrom<U>>::try_from::hf876e61d0bdd01d1+0x10>
 8001dbe:      	ldr	r0, [sp, #0x4]
 8001dc0:      	str	r0, [sp, #0x8]
 8001dc2:      	ldr	r0, [sp, #0x8]
 8001dc4:      	add	sp, #0x10
 8001dc6:      	pop	{r7, pc}

08001dc8 <aligned::Aligned<A,T> as core::ops::deref::Deref>::deref::hd51eb7be9c7701c6:
;     fn deref(&self) -> &T {
 8001dc8:      	sub	sp, #0x8
 8001dca:      	str	r0, [sp]
 8001dcc:      	str	r1, [sp, #0x4]
;     }
 8001dce:      	add	sp, #0x8
 8001dd0:      	bx	lr

08001dd2 bare_metal::CriticalSection::new::h7d7c0a7c7b7b5463:
;     pub unsafe fn new() -> Self {
 8001dd2:      	sub	sp, #0x4
;     }
 8001dd4:      	add	sp, #0x4
 8001dd6:      	bx	lr

08001dd8 core::ops::function::FnOnce::call_once::h685b61703156091a:
 8001dd8:      	ldr	r0, [r0]
 8001dda:      	b	#-0x4 <core::ops::function::FnOnce::call_once::h685b61703156091a+0x2>

08001ddc core::ptr::drop_in_place::h017545a319ae3adb:
 8001ddc:      	bx	lr

08001dde <T as core::any::Any>::type_id::h00f430427f766f07:
 8001dde:      	movw	r0, #0x2cc8
 8001de2:      	movw	r1, #0x5e87
 8001de6:      	movt	r0, #0xb779
 8001dea:      	movt	r1, #0xbfb8
 8001dee:      	bx	lr

08001df0 <core::panic::PanicInfo as core::fmt::Display>::fmt::h1f347a6b07fcd8b3:
 8001df0:      	push	{r4, r5, r6, r7, lr}
 8001df2:      	add	r7, sp, #0xc
 8001df4:      	str	r11, [sp, #-4]!
 8001df8:      	sub	sp, #0x38
 8001dfa:      	mov	r4, r1
 8001dfc:      	mov	r5, r0
 8001dfe:      	ldrd	r0, r1, [r1, #24]
 8001e02:      	movs	r2, #0xc
 8001e04:      	ldr	r3, [r1, #0xc]
 8001e06:      	movw	r1, #0x3c34
 8001e0a:      	movt	r1, #0x800
 8001e0e:      	blx	r3
 8001e10:      	cbz	r0, #0xa
 8001e12:      	movs	r6, #0x1
 8001e14:      	mov	r0, r6
 8001e16:      	add	sp, #0x38
 8001e18:      	ldr	r11, [sp], #4
 8001e1c:      	pop	{r4, r5, r6, r7, pc}
 8001e1e:      	ldr	r0, [r5, #0x8]
 8001e20:      	cbz	r0, #0xa
 8001e22:      	str	r0, [sp, #0x4]
 8001e24:      	movw	r0, #0x29b7
 8001e28:      	movt	r0, #0x800
 8001e2c:      	b	#0x2a <<core::panic::PanicInfo as core::fmt::Display>::fmt::h1f347a6b07fcd8b3+0x6a>
 8001e2e:      	ldrd	r6, r0, [r5]
 8001e32:      	ldr	r1, [r0, #0xc]
 8001e34:      	mov	r0, r6
 8001e36:      	blx	r1
 8001e38:      	movw	r2, #0x94d9
 8001e3c:      	movt	r2, #0x1110
 8001e40:      	eors	r1, r2
 8001e42:      	movw	r2, #0x9764
 8001e46:      	movt	r2, #0x70b0
 8001e4a:      	eors	r0, r2
 8001e4c:      	orrs	r0, r1
 8001e4e:      	bne	#0x36 <<core::panic::PanicInfo as core::fmt::Display>::fmt::h1f347a6b07fcd8b3+0x98>
 8001e50:      	movw	r0, #0x29ef
 8001e54:      	str	r6, [sp, #0x4]
 8001e56:      	movt	r0, #0x800
 8001e5a:      	str	r0, [sp, #0xc]
 8001e5c:      	add	r0, sp, #0x4
 8001e5e:      	str	r0, [sp, #0x8]
 8001e60:      	movs	r6, #0x1
 8001e62:      	add	r2, sp, #0x8
 8001e64:      	ldr	r0, [r4, #0x18]
 8001e66:      	ldr	r1, [r4, #0x1c]
 8001e68:      	str	r6, [sp, #0x34]
 8001e6a:      	str	r2, [sp, #0x30]
 8001e6c:      	movs	r2, #0x0
 8001e6e:      	str	r2, [sp, #0x2c]
 8001e70:      	str	r2, [sp, #0x28]
 8001e72:      	movs	r2, #0x2
 8001e74:      	str	r2, [sp, #0x24]
 8001e76:      	movw	r2, #0x3c44
 8001e7a:      	movt	r2, #0x800
 8001e7e:      	str	r2, [sp, #0x20]
 8001e80:      	add	r2, sp, #0x20
 8001e82:      	bl	#0xf4
 8001e86:      	cbnz	r0, #0x4a
 8001e88:      	ldr	r0, [r5, #0xc]
 8001e8a:      	movw	r1, #0x28c5
 8001e8e:      	movt	r1, #0x800
 8001e92:      	add	r3, sp, #0x8
 8001e94:      	add.w	r2, r0, #0xc
 8001e98:      	str	r1, [sp, #0x1c]
 8001e9a:      	strd	r1, r2, [sp, #20]
 8001e9e:      	add.w	r1, r0, #0x8
 8001ea2:      	str	r1, [sp, #0x10]
 8001ea4:      	movw	r1, #0x29e3
 8001ea8:      	movt	r1, #0x800
 8001eac:      	movs	r2, #0x3
 8001eae:      	strd	r0, r1, [sp, #8]
 8001eb2:      	ldrd	r0, r1, [r4, #24]
 8001eb6:      	str	r2, [sp, #0x34]
 8001eb8:      	str	r3, [sp, #0x30]
 8001eba:      	movs	r3, #0x0
 8001ebc:      	str	r3, [sp, #0x2c]
 8001ebe:      	strd	r2, r3, [sp, #36]
 8001ec2:      	movw	r2, #0x3c58
 8001ec6:      	movt	r2, #0x800
 8001eca:      	str	r2, [sp, #0x20]
 8001ecc:      	add	r2, sp, #0x20
 8001ece:      	bl	#0xa8
 8001ed2:      	mov	r6, r0
 8001ed4:      	mov	r0, r6
 8001ed6:      	add	sp, #0x38
 8001ed8:      	ldr	r11, [sp], #4
 8001edc:      	pop	{r4, r5, r6, r7, pc}

08001ede core::panic::Location::caller::h3a8af7c9882fafcf:
 8001ede:      	bx	lr

08001ee0 core::panicking::panic::h305931087480127e:
 8001ee0:      	push	{r7, lr}
 8001ee2:      	mov	r7, sp
 8001ee4:      	sub	sp, #0x20
 8001ee6:      	mov	r12, r2
 8001ee8:      	movw	r2, #0x3c04
 8001eec:      	movs	r3, #0x0
 8001eee:      	movt	r2, #0x800
 8001ef2:      	strd	r0, r1, [sp, #24]
 8001ef6:      	mov	r0, sp
 8001ef8:      	str	r3, [sp, #0x14]
 8001efa:      	mov	r1, r12
 8001efc:      	str	r2, [sp, #0x10]
 8001efe:      	movs	r2, #0x1
 8001f00:      	strd	r3, r3, [sp, #8]
 8001f04:      	str	r2, [sp, #0x4]
 8001f06:      	add	r2, sp, #0x18
 8001f08:      	str	r2, [sp]
 8001f0a:      	bl	#0x46
 8001f0e:      	trap

08001f10 core::panicking::panic_bounds_check::ha0ed99429d61834f:
 8001f10:      	push	{r7, lr}
 8001f12:      	mov	r7, sp
 8001f14:      	sub	sp, #0x30
 8001f16:      	mov	r3, r0
 8001f18:      	strd	r1, r2, [sp]
 8001f1c:      	movs	r0, #0x2
 8001f1e:      	add	r1, sp, #0x20
 8001f20:      	str	r0, [sp, #0x1c]
 8001f22:      	str	r1, [sp, #0x18]
 8001f24:      	movs	r1, #0x0
 8001f26:      	str	r1, [sp, #0x14]
 8001f28:      	strd	r0, r1, [sp, #12]
 8001f2c:      	movw	r0, #0x3c84
 8001f30:      	movt	r0, #0x800
 8001f34:      	mov	r1, sp
 8001f36:      	str	r0, [sp, #0x8]
 8001f38:      	movw	r0, #0x28c5
 8001f3c:      	movt	r0, #0x800
 8001f40:      	str	r0, [sp, #0x2c]
 8001f42:      	strd	r0, r1, [sp, #36]
 8001f46:      	add	r0, sp, #0x4
 8001f48:      	str	r0, [sp, #0x20]
 8001f4a:      	add	r0, sp, #0x8
 8001f4c:      	mov	r1, r3
 8001f4e:      	bl	#0x2
 8001f52:      	trap

08001f54 core::panicking::panic_fmt::h6632518812a783cb:
 8001f54:      	push	{r7, lr}
 8001f56:      	mov	r7, sp
 8001f58:      	sub	sp, #0x10
 8001f5a:      	strd	r0, r1, [sp, #8]
 8001f5e:      	movw	r0, #0x3c24
 8001f62:      	movt	r0, #0x800
 8001f66:      	str	r0, [sp, #0x4]
 8001f68:      	movw	r0, #0x3c04
 8001f6c:      	movt	r0, #0x800
 8001f70:      	str	r0, [sp]
 8001f72:      	mov	r0, sp
 8001f74:      	bl	#0xa84
 8001f78:      	trap

08001f7a core::fmt::write::h3a840e7e06d576c8:
 8001f7a:      	push	{r4, r5, r6, r7, lr}
 8001f7c:      	add	r7, sp, #0xc
 8001f7e:      	push.w	{r8, r9, r10, r11}
 8001f82:      	sub	sp, #0x34
 8001f84:      	movs	r3, #0x3
 8001f86:      	ldr	r4, [r2, #0x8]
 8001f88:      	strb.w	r3, [sp, #0x30]
 8001f8c:      	movs	r3, #0x20
 8001f8e:      	str	r3, [sp, #0x14]
 8001f90:      	movs	r3, #0x0
 8001f92:      	cmp	r4, #0x0
 8001f94:      	str	r3, [sp, #0x10]
 8001f96:      	strd	r0, r1, [sp, #40]
 8001f9a:      	str	r3, [sp, #0x20]
 8001f9c:      	str	r3, [sp, #0x18]
 8001f9e:      	beq	#0xfc <core::fmt::write::h3a840e7e06d576c8+0x124>
 8001fa0:      	ldr	r6, [r2, #0xc]
 8001fa2:      	ldrd	r5, r10, [r2]
 8001fa6:      	cmp	r6, r10
 8001fa8:      	it	hi
 8001faa:      	movhi	r6, r10
 8001fac:      	cmp	r6, #0x0
 8001fae:      	beq.w	#0x140 <core::fmt::write::h3a840e7e06d576c8+0x178>
 8001fb2:      	ldrd	r8, r2, [r2, #16]
 8001fb6:      	ldr	r3, [r5]
 8001fb8:      	str	r2, [sp, #0xc]
 8001fba:      	str	r5, [sp, #0x8]
 8001fbc:      	ldr	r2, [r5, #0x4]
 8001fbe:      	ldr	r5, [r1, #0xc]
 8001fc0:      	mov	r1, r3
 8001fc2:      	blx	r5
 8001fc4:      	cmp	r0, #0x0
 8001fc6:      	bne.w	#0x144 <core::fmt::write::h3a840e7e06d576c8+0x194>
 8001fca:      	ldr	r5, [sp, #0x8]
 8001fcc:      	mov.w	r11, #0x1
 8001fd0:      	str.w	r10, [sp, #0x4]
 8001fd4:      	mov.w	r9, #0x0
 8001fd8:      	mov.w	r10, #0x10
 8001fdc:      	add.w	r0, r4, r9, lsl #2
 8001fe0:      	ldr	r1, [r0, #0x4]
 8001fe2:      	str	r1, [sp, #0x14]
 8001fe4:      	ldrb	r1, [r0, #0x1c]
 8001fe6:      	strb.w	r1, [sp, #0x30]
 8001fea:      	ldr	r1, [r0, #0x8]
 8001fec:      	str	r1, [sp, #0x10]
 8001fee:      	ldrd	r2, r1, [r0, #20]
 8001ff2:      	cbz	r2, #0x22
 8001ff4:      	cmp	r2, #0x2
 8001ff6:      	beq	#0x22 <core::fmt::write::h3a840e7e06d576c8+0xa2>
 8001ff8:      	ldr	r2, [sp, #0xc]
 8001ffa:      	cmp	r1, r2
 8001ffc:      	bhs.w	#0x142 <core::fmt::write::h3a840e7e06d576c8+0x1c8>
 8002000:      	add.w	r2, r8, r1, lsl #3
 8002004:      	movw	r3, #0x1dd9
 8002008:      	movt	r3, #0x800
 800200c:      	ldr	r2, [r2, #0x4]
 800200e:      	cmp	r2, r3
 8002010:      	bne	#0x8 <core::fmt::write::h3a840e7e06d576c8+0xa2>
 8002012:      	ldr.w	r1, [r8, r1, lsl #3]
 8002016:      	ldr	r1, [r1]
 8002018:      	movs	r2, #0x1
 800201a:      	b	#0x0 <core::fmt::write::h3a840e7e06d576c8+0xa4>
 800201c:      	movs	r2, #0x0
 800201e:      	strd	r2, r1, [sp, #24]
 8002022:      	ldr.w	r1, [r4, r10]
 8002026:      	ldr	r0, [r0, #0xc]
 8002028:      	cbz	r0, #0x22
 800202a:      	cmp	r0, #0x2
 800202c:      	beq	#0x22 <core::fmt::write::h3a840e7e06d576c8+0xd8>
 800202e:      	ldr	r0, [sp, #0xc]
 8002030:      	cmp	r1, r0
 8002032:      	bhs.w	#0x10c <core::fmt::write::h3a840e7e06d576c8+0x1c8>
 8002036:      	add.w	r0, r8, r1, lsl #3
 800203a:      	movw	r2, #0x1dd9
 800203e:      	movt	r2, #0x800
 8002042:      	ldr	r0, [r0, #0x4]
 8002044:      	cmp	r0, r2
 8002046:      	bne	#0x8 <core::fmt::write::h3a840e7e06d576c8+0xd8>
 8002048:      	ldr.w	r0, [r8, r1, lsl #3]
 800204c:      	ldr	r1, [r0]
 800204e:      	movs	r0, #0x1
 8002050:      	b	#0x0 <core::fmt::write::h3a840e7e06d576c8+0xda>
 8002052:      	movs	r0, #0x0
 8002054:      	add.w	r2, r4, r10
 8002058:      	strd	r0, r1, [sp, #32]
 800205c:      	ldr	r0, [sp, #0xc]
 800205e:      	ldr	r1, [r2, #-16]
 8002062:      	cmp	r1, r0
 8002064:      	bhs	#0xca <core::fmt::write::h3a840e7e06d576c8+0x1b8>
 8002066:      	ldr.w	r0, [r8, r1, lsl #3]
 800206a:      	add.w	r1, r8, r1, lsl #3
 800206e:      	ldr	r2, [r1, #0x4]
 8002070:      	add	r1, sp, #0x10
 8002072:      	blx	r2
 8002074:      	cmp	r0, #0x0
 8002076:      	bne	#0x94 <core::fmt::write::h3a840e7e06d576c8+0x194>
 8002078:      	cmp	r11, r6
 800207a:      	bhs	#0x9a <core::fmt::write::h3a840e7e06d576c8+0x19e>
 800207c:      	ldrd	r0, r3, [sp, #40]
 8002080:      	add.w	r2, r5, r9
 8002084:      	ldrd	r1, r2, [r2, #8]
 8002088:      	ldr	r3, [r3, #0xc]
 800208a:      	blx	r3
 800208c:      	add.w	r10, r10, #0x20
 8002090:      	add.w	r9, r9, #0x8
 8002094:      	add.w	r11, r11, #0x1
 8002098:      	cmp	r0, #0x0
 800209a:      	beq	#-0xc2 <core::fmt::write::h3a840e7e06d576c8+0x62>
 800209c:      	b	#0x6e <core::fmt::write::h3a840e7e06d576c8+0x194>
 800209e:      	ldr	r6, [r2, #0x14]
 80020a0:      	ldrd	r5, r10, [r2]
 80020a4:      	cmp	r6, r10
 80020a6:      	it	hi
 80020a8:      	movhi	r6, r10
 80020aa:      	cbz	r6, #0x44
 80020ac:      	ldr	r3, [r5]
 80020ae:      	mov	r9, r5
 80020b0:      	ldr	r4, [r2, #0x10]
 80020b2:      	ldr	r2, [r5, #0x4]
 80020b4:      	ldr	r5, [r1, #0xc]
 80020b6:      	mov	r1, r3
 80020b8:      	blx	r5
 80020ba:      	cbnz	r0, #0x50
 80020bc:      	add.w	r8, sp, #0x10
 80020c0:      	movs	r5, #0x0
 80020c2:      	add.w	r1, r4, r5, lsl #3
 80020c6:      	ldr.w	r0, [r4, r5, lsl #3]
 80020ca:      	ldr	r2, [r1, #0x4]
 80020cc:      	mov	r1, r8
 80020ce:      	blx	r2
 80020d0:      	cbnz	r0, #0x3a
 80020d2:      	add.w	r11, r5, #0x1
 80020d6:      	cmp	r11, r6
 80020d8:      	bhs	#0x4e <core::fmt::write::h3a840e7e06d576c8+0x1b0>
 80020da:      	ldrd	r0, r3, [sp, #40]
 80020de:      	add.w	r2, r9, r5, lsl #3
 80020e2:      	ldrd	r1, r2, [r2, #8]
 80020e6:      	ldr	r3, [r3, #0xc]
 80020e8:      	blx	r3
 80020ea:      	cmp	r0, #0x0
 80020ec:      	mov	r5, r11
 80020ee:      	beq	#-0x30 <core::fmt::write::h3a840e7e06d576c8+0x148>
 80020f0:      	b	#0x1a <core::fmt::write::h3a840e7e06d576c8+0x194>
 80020f2:      	mov.w	r11, #0x0
 80020f6:      	cmp	r10, r11
 80020f8:      	bls	#0x24 <core::fmt::write::h3a840e7e06d576c8+0x1a6>
 80020fa:      	add.w	r2, r5, r11, lsl #3
 80020fe:      	ldrd	r0, r3, [sp, #40]
 8002102:      	ldr.w	r1, [r5, r11, lsl #3]
 8002106:      	ldr	r2, [r2, #0x4]
 8002108:      	ldr	r3, [r3, #0xc]
 800210a:      	blx	r3
 800210c:      	cbz	r0, #0x10
 800210e:      	movs	r0, #0x1
 8002110:      	add	sp, #0x34
 8002112:      	pop.w	{r8, r9, r10, r11}
 8002116:      	pop	{r4, r5, r6, r7, pc}
 8002118:      	ldr.w	r10, [sp, #0x4]
 800211c:      	cmp	r10, r11
 800211e:      	bhi	#-0x28 <core::fmt::write::h3a840e7e06d576c8+0x180>
 8002120:      	movs	r0, #0x0
 8002122:      	add	sp, #0x34
 8002124:      	pop.w	{r8, r9, r10, r11}
 8002128:      	pop	{r4, r5, r6, r7, pc}
 800212a:      	mov	r5, r9
 800212c:      	cmp	r10, r11
 800212e:      	bls	#-0x12 <core::fmt::write::h3a840e7e06d576c8+0x1a6>
 8002130:      	b	#-0x3a <core::fmt::write::h3a840e7e06d576c8+0x180>
 8002132:      	movw	r0, #0x3d74
 8002136:      	movt	r0, #0x800
 800213a:      	ldr	r2, [sp, #0xc]
 800213c:      	bl	#-0x230
 8002140:      	trap
 8002142:      	movw	r0, #0x3d84
 8002146:      	movt	r0, #0x800
 800214a:      	ldr	r2, [sp, #0xc]
 800214c:      	bl	#-0x240
 8002150:      	trap
 8002152:      	bmi	#-0x58 <core::fmt::write::h3a840e7e06d576c8+0x184>

08002154 core::fmt::Formatter::pad_integral::h57a79649264eb811:
 8002154:      	push	{r4, r5, r6, r7, lr}
 8002156:      	add	r7, sp, #0xc
 8002158:      	push.w	{r8, r9, r10, r11}
 800215c:      	sub	sp, #0xc
 800215e:      	ldrd	r6, r4, [r7, #8]
 8002162:      	mov	r10, r3
 8002164:      	mov	r11, r0
 8002166:      	cbz	r1, #0x38
 8002168:      	ldr.w	lr, [r11]
 800216c:      	movs	r1, #0x2b
 800216e:      	ands	r0, lr, #0x1
 8002172:      	it	eq
 8002174:      	moveq.w	r1, #0x110000
 8002178:      	add.w	r8, r0, r4
 800217c:      	lsls.w	r0, lr, #0x1d
 8002180:      	bpl	#0x2e <core::fmt::Formatter::pad_integral::h57a79649264eb811+0x5e>
 8002182:      	cmp.w	r10, #0x0
 8002186:      	beq	#0x6c <$t.220+0x8>
 8002188:      	sub.w	r0, r10, #0x1
 800218c:      	and	r12, r10, #0x3
 8002190:      	cmp	r0, #0x3
 8002192:      	bhs	#0x66 <$t.220+0xe>
 8002194:      	mov.w	r9, #0x0
 8002198:      	mov	r3, r2
 800219a:      	cmp.w	r12, #0x0
 800219e:      	bne	#0xb8 <$t.220+0x6c>
 80021a0:      	b	#0xec <$t.220+0xa2>
 80021a2:      	ldr.w	lr, [r11]
 80021a6:      	add.w	r8, r4, #0x1
 80021aa:      	movs	r1, #0x2d
 80021ac:      	lsls.w	r0, lr, #0x1d
 80021b0:      	bmi	#-0x32 <core::fmt::Formatter::pad_integral::h57a79649264eb811+0x2e>
 80021b2:      	mov.w	r10, #0x0
 80021b6:      	movs	r2, #0x0
 80021b8:      	ldr.w	r0, [r11, #0x8]
 80021bc:      	cmp	r0, #0x1
 80021be:      	bne	#0xe0 <$t.220+0xb4>
 80021c0:      	ldr.w	r9, [r11, #0xc]
 80021c4:      	cmp	r9, r8
 80021c6:      	bls	#0xd8 <$t.220+0xb4>
 80021c8:      	lsls.w	r0, lr, #0x1c
 80021cc:      	bmi.w	#0x102 <$t.220+0xe4>
 80021d0:      	str	r2, [sp, #0x4]
 80021d2:      	sub.w	r0, r9, r8
 80021d6:      	ldrb.w	r2, [r11, #0x20]
 80021da:      	movs	r5, #0x0
 80021dc:      	mov	r9, r0
 80021de:      	cmp	r2, #0x3
 80021e0:      	it	eq
 80021e2:      	moveq	r2, #0x1
 80021e4:      	str	r1, [sp, #0x8]
 80021e6:      	tbb	[pc, r2]

080021ea $d.219:
 80021ea:	9b 02 97 02	.word	0x0297029b

080021ee $t.220:
 80021ee:      	mov.w	r9, #0x0
 80021f2:      	mov	r5, r0
 80021f4:      	b	#0x128 <$t.222+0xe>
 80021f6:      	mov.w	r9, #0x0
 80021fa:      	b	#0x92 <$t.220+0xa2>
 80021fc:      	sub.w	r5, r12, r10
 8002200:      	str	r1, [sp, #0x8]
 8002202:      	mov.w	r9, #0x0
 8002206:      	mov	r1, r2
 8002208:      	mov	r3, r2
 800220a:      	strd	r4, r6, [sp]
 800220e:      	ldrb	r2, [r3]
 8002210:      	ldrb	r0, [r3, #0x1]
 8002212:      	and	r2, r2, #0xc0
 8002216:      	ldrb	r6, [r3, #0x2]
 8002218:      	ldrb	r4, [r3, #0x3]
 800221a:      	cmp	r2, #0x80
 800221c:      	and	r0, r0, #0xc0
 8002220:      	it	eq
 8002222:      	addeq.w	r9, r9, #0x1
 8002226:      	cmp	r0, #0x80
 8002228:      	and	r0, r6, #0xc0
 800222c:      	it	eq
 800222e:      	addeq.w	r9, r9, #0x1
 8002232:      	cmp	r0, #0x80
 8002234:      	and	r0, r4, #0xc0
 8002238:      	it	eq
 800223a:      	addeq.w	r9, r9, #0x1
 800223e:      	cmp	r0, #0x80
 8002240:      	it	eq
 8002242:      	addeq.w	r9, r9, #0x1
 8002246:      	adds	r3, #0x4
 8002248:      	adds	r5, #0x4
 800224a:      	bne	#-0x40 <$t.220+0x20>
 800224c:      	mov	r2, r1
 800224e:      	ldrd	r4, r6, [sp]
 8002252:      	ldr	r1, [sp, #0x8]
 8002254:      	cmp.w	r12, #0x0
 8002258:      	beq	#0x34 <$t.220+0xa2>
 800225a:      	ldrb	r0, [r3]
 800225c:      	and	r0, r0, #0xc0
 8002260:      	cmp	r0, #0x80
 8002262:      	it	eq
 8002264:      	addeq.w	r9, r9, #0x1
 8002268:      	cmp.w	r12, #0x1
 800226c:      	beq	#0x20 <$t.220+0xa2>
 800226e:      	ldrb	r0, [r3, #0x1]
 8002270:      	and	r0, r0, #0xc0
 8002274:      	cmp	r0, #0x80
 8002276:      	it	eq
 8002278:      	addeq.w	r9, r9, #0x1
 800227c:      	cmp.w	r12, #0x2
 8002280:      	beq	#0xc <$t.220+0xa2>
 8002282:      	ldrb	r0, [r3, #0x2]
 8002284:      	and	r0, r0, #0xc0
 8002288:      	cmp	r0, #0x80
 800228a:      	it	eq
 800228c:      	addeq.w	r9, r9, #0x1
 8002290:      	add.w	r0, r8, r10
 8002294:      	sub.w	r8, r0, r9
 8002298:      	ldr.w	r0, [r11, #0x8]
 800229c:      	cmp	r0, #0x1
 800229e:      	beq.w	#-0xe2 <core::fmt::Formatter::pad_integral::h57a79649264eb811+0x6c>
 80022a2:      	mov	r0, r11
 80022a4:      	mov	r3, r10
 80022a6:      	bl	#0x142
 80022aa:      	cbz	r0, #0xa
 80022ac:      	movs	r5, #0x1
 80022ae:      	mov	r0, r5
 80022b0:      	add	sp, #0xc
 80022b2:      	pop.w	{r8, r9, r10, r11}
 80022b6:      	pop	{r4, r5, r6, r7, pc}
 80022b8:      	ldr.w	r1, [r11, #0x1c]
 80022bc:      	mov	r2, r4
 80022be:      	ldr.w	r0, [r11, #0x18]
 80022c2:      	ldr	r3, [r1, #0xc]
 80022c4:      	mov	r1, r6
 80022c6:      	add	sp, #0xc
 80022c8:      	pop.w	{r8, r9, r10, r11}
 80022cc:      	pop.w	{r4, r5, r6, r7, lr}
 80022d0:      	bx	r3
 80022d2:      	ldr.w	r0, [r11, #0x4]
 80022d6:      	movs	r5, #0x1
 80022d8:      	str	r0, [sp, #0x8]
 80022da:      	movs	r0, #0x30
 80022dc:      	ldrb.w	r3, [r11, #0x20]
 80022e0:      	str.w	r0, [r11, #0x4]
 80022e4:      	mov	r0, r11
 80022e6:      	str	r3, [sp, #0x4]
 80022e8:      	mov	r3, r10
 80022ea:      	strb.w	r5, [r11, #0x20]
 80022ee:      	bl	#0xfa
 80022f2:      	cmp	r0, #0x0
 80022f4:      	bne	#-0x4a <$t.220+0xc0>
 80022f6:      	ldrb.w	r2, [r11, #0x20]
 80022fa:      	sub.w	r1, r9, r8
 80022fe:      	movs	r0, #0x0
 8002300:      	mov	r9, r6
 8002302:      	cmp	r2, #0x3
 8002304:      	it	eq
 8002306:      	moveq	r2, #0x1
 8002308:      	mov	r5, r1
 800230a:      	tbb	[pc, r2]

0800230e $d.221:
 800230e:	38 02 35 02	.word	0x02350238

08002312 $t.222:
 8002312:      	movs	r5, #0x0
 8002314:      	mov	r0, r1
 8002316:      	b	#0x64 <$t.222+0x6c>
 8002318:      	adds	r1, r0, #0x1
 800231a:      	lsrs	r5, r0, #0x1
 800231c:      	lsr.w	r9, r1, #0x1
 8002320:      	adds	r5, #0x1
 8002322:      	subs	r5, #0x1
 8002324:      	beq	#0x10 <$t.222+0x26>
 8002326:      	ldrd	r0, r2, [r11, #24]
 800232a:      	ldr.w	r1, [r11, #0x4]
 800232e:      	ldr	r2, [r2, #0x10]
 8002330:      	blx	r2
 8002332:      	cmp	r0, #0x0
 8002334:      	beq	#-0x16 <$t.222+0x10>
 8002336:      	b	#-0x8e <$t.220+0xbe>
 8002338:      	ldrd	r2, r1, [sp, #4]
 800233c:      	mov	r0, r11
 800233e:      	mov	r3, r10
 8002340:      	ldr.w	r8, [r11, #0x4]
 8002344:      	bl	#0xa4
 8002348:      	cmp	r0, #0x0
 800234a:      	bne	#-0xa2 <$t.220+0xbe>
 800234c:      	ldrd	r0, r1, [r11, #24]
 8002350:      	mov	r2, r4
 8002352:      	ldr	r3, [r1, #0xc]
 8002354:      	mov	r1, r6
 8002356:      	blx	r3
 8002358:      	cmp	r0, #0x0
 800235a:      	bne	#-0xb2 <$t.220+0xbe>
 800235c:      	ldrd	r10, r4, [r11, #24]
 8002360:      	add.w	r6, r9, #0x1
 8002364:      	movs	r5, #0x1
 8002366:      	subs	r6, #0x1
 8002368:      	beq	#0x5c <$t.222+0xb6>
 800236a:      	ldr	r2, [r4, #0x10]
 800236c:      	mov	r0, r10
 800236e:      	mov	r1, r8
 8002370:      	blx	r2
 8002372:      	cmp	r0, #0x0
 8002374:      	beq	#-0x12 <$t.222+0x54>
 8002376:      	b	#-0xcc <$t.220+0xc0>
 8002378:      	lsrs	r0, r1, #0x1
 800237a:      	adds	r1, #0x1
 800237c:      	lsrs	r5, r1, #0x1
 800237e:      	adds	r6, r0, #0x1
 8002380:      	subs	r6, #0x1
 8002382:      	beq	#0x10 <$t.222+0x84>
 8002384:      	ldrd	r0, r2, [r11, #24]
 8002388:      	ldr.w	r1, [r11, #0x4]
 800238c:      	ldr	r2, [r2, #0x10]
 800238e:      	blx	r2
 8002390:      	cmp	r0, #0x0
 8002392:      	beq	#-0x16 <$t.222+0x6e>
 8002394:      	b	#-0xec <$t.220+0xbe>
 8002396:      	ldrd	r0, r1, [r11, #24]
 800239a:      	mov	r2, r4
 800239c:      	ldr	r3, [r1, #0xc]
 800239e:      	mov	r1, r9
 80023a0:      	ldr.w	r8, [r11, #0x4]
 80023a4:      	blx	r3
 80023a6:      	cmp	r0, #0x0
 80023a8:      	bne.w	#-0x100 <$t.220+0xbe>
 80023ac:      	ldrd	r9, r10, [r11, #24]
 80023b0:      	adds	r6, r5, #0x1
 80023b2:      	movs	r5, #0x1
 80023b4:      	subs	r6, #0x1
 80023b6:      	beq	#0x1a <$t.222+0xc2>
 80023b8:      	ldr.w	r2, [r10, #0x10]
 80023bc:      	mov	r0, r9
 80023be:      	mov	r1, r8
 80023c0:      	blx	r2
 80023c2:      	cmp	r0, #0x0
 80023c4:      	beq	#-0x14 <$t.222+0xa2>
 80023c6:      	b	#-0x11c <$t.220+0xc0>
 80023c8:      	movs	r5, #0x0
 80023ca:      	mov	r0, r5
 80023cc:      	add	sp, #0xc
 80023ce:      	pop.w	{r8, r9, r10, r11}
 80023d2:      	pop	{r4, r5, r6, r7, pc}
 80023d4:      	ldr	r0, [sp, #0x4]
 80023d6:      	movs	r5, #0x0
 80023d8:      	strb.w	r0, [r11, #0x20]
 80023dc:      	ldr	r0, [sp, #0x8]
 80023de:      	str.w	r0, [r11, #0x4]
 80023e2:      	mov	r0, r5
 80023e4:      	add	sp, #0xc
 80023e6:      	pop.w	{r8, r9, r10, r11}
 80023ea:      	pop	{r4, r5, r6, r7, pc}

080023ec core::fmt::Formatter::pad_integral::write_prefix::h960f0aa67e8fac5f:
 80023ec:      	push	{r4, r5, r6, r7, lr}
 80023ee:      	add	r7, sp, #0xc
 80023f0:      	str	r11, [sp, #-4]!
 80023f4:      	mov	r4, r3
 80023f6:      	mov	r5, r2
 80023f8:      	mov	r6, r0
 80023fa:      	cmp.w	r1, #0x110000
 80023fe:      	beq	#0x10 <core::fmt::Formatter::pad_integral::write_prefix::h960f0aa67e8fac5f+0x26>
 8002400:      	ldrd	r0, r2, [r6, #24]
 8002404:      	ldr	r2, [r2, #0x10]
 8002406:      	blx	r2
 8002408:      	cbz	r0, #0x6
 800240a:      	movs	r0, #0x1
 800240c:      	ldr	r11, [sp], #4
 8002410:      	pop	{r4, r5, r6, r7, pc}
 8002412:      	cbz	r5, #0x12
 8002414:      	ldrd	r0, r1, [r6, #24]
 8002418:      	mov	r2, r4
 800241a:      	ldr	r3, [r1, #0xc]
 800241c:      	mov	r1, r5
 800241e:      	ldr	r11, [sp], #4
 8002422:      	pop.w	{r4, r5, r6, r7, lr}
 8002426:      	bx	r3
 8002428:      	movs	r0, #0x0
 800242a:      	ldr	r11, [sp], #4
 800242e:      	pop	{r4, r5, r6, r7, pc}

08002430 core::fmt::Formatter::pad::haebcf52180637848:
 8002430:      	push	{r4, r5, r6, r7, lr}
 8002432:      	add	r7, sp, #0xc
 8002434:      	push.w	{r8, r9, r10, r11}
 8002438:      	sub	sp, #0xc
 800243a:      	mov	r5, r1
 800243c:      	ldr	r1, [r0, #0x8]
 800243e:      	mov	r10, r0
 8002440:      	ldr	r0, [r0, #0x10]
 8002442:      	mov	r9, r2
 8002444:      	cmp	r1, #0x1
 8002446:      	bne	#0x24 <core::fmt::Formatter::pad::haebcf52180637848+0x3e>
 8002448:      	cmp	r0, #0x1
 800244a:      	beq	#0x24 <core::fmt::Formatter::pad::haebcf52180637848+0x42>
 800244c:      	cmp.w	r9, #0x0
 8002450:      	beq	#0xf0 <core::fmt::Formatter::pad::haebcf52180637848+0x114>
 8002452:      	sub.w	r1, r9, #0x1
 8002456:      	and	r12, r9, #0x3
 800245a:      	cmp	r1, #0x3
 800245c:      	bhs.w	#0x10c <core::fmt::Formatter::pad::haebcf52180637848+0x13c>
 8002460:      	movs	r1, #0x0
 8002462:      	mov	r2, r5
 8002464:      	cmp.w	r12, #0x0
 8002468:      	bne.w	#0x148 <core::fmt::Formatter::pad::haebcf52180637848+0x184>
 800246c:      	b	#0x174 <core::fmt::Formatter::pad::haebcf52180637848+0x1b4>
 800246e:      	cmp	r0, #0x1
 8002470:      	bne	#0xde <core::fmt::Formatter::pad::haebcf52180637848+0x122>
 8002472:      	cmp.w	r9, #0x0
 8002476:      	beq	#0xba <core::fmt::Formatter::pad::haebcf52180637848+0x104>
 8002478:      	ldr.w	r0, [r10, #0x14]
 800247c:      	add.w	lr, r5, r9
 8002480:      	movs	r2, #0x0
 8002482:      	str	r1, [sp, #0x4]
 8002484:      	adds	r3, r0, #0x1
 8002486:      	mov	r0, r5
 8002488:      	str	r5, [sp, #0x8]
 800248a:      	mov	r4, r0
 800248c:      	ldrsb	r1, [r4], #1
 8002490:      	cmp.w	r1, #0xffffffff
 8002494:      	uxtb	r6, r1
 8002496:      	bgt	#0x5e <core::fmt::Formatter::pad::haebcf52180637848+0xc8>
 8002498:      	cmp	r4, lr
 800249a:      	beq	#0x34 <core::fmt::Formatter::pad::haebcf52180637848+0xa2>
 800249c:      	ldrb	r1, [r0, #0x1]
 800249e:      	adds	r4, r0, #0x2
 80024a0:      	and	r12, r1, #0x3f
 80024a4:      	mov	r0, r4
 80024a6:      	and	r11, r6, #0x1f
 80024aa:      	cmp	r6, #0xdf
 80024ac:      	bls	#0x30 <core::fmt::Formatter::pad::haebcf52180637848+0xb0>
 80024ae:      	cmp	r0, lr
 80024b0:      	beq	#0x32 <core::fmt::Formatter::pad::haebcf52180637848+0xb6>
 80024b2:      	ldrb	r1, [r0], #1
 80024b6:      	and	r8, r1, #0x3f
 80024ba:      	mov	r4, r0
 80024bc:      	orr.w	r12, r8, r12, lsl #6
 80024c0:      	cmp	r6, #0xf0
 80024c2:      	blo	#0x2e <core::fmt::Formatter::pad::haebcf52180637848+0xc4>
 80024c4:      	cmp	r0, lr
 80024c6:      	beq	#0x42 <core::fmt::Formatter::pad::haebcf52180637848+0xdc>
 80024c8:      	ldrb	r1, [r0], #1
 80024cc:      	and	r6, r1, #0x3f
 80024d0:      	b	#0x3c <core::fmt::Formatter::pad::haebcf52180637848+0xe0>
 80024d2:      	mov.w	r12, #0x0
 80024d6:      	mov	r0, lr
 80024d8:      	and	r11, r6, #0x1f
 80024dc:      	cmp	r6, #0xdf
 80024de:      	bhi	#-0x34 <core::fmt::Formatter::pad::haebcf52180637848+0x7e>
 80024e0:      	orr.w	r6, r12, r11, lsl #6
 80024e4:      	b	#0x10 <core::fmt::Formatter::pad::haebcf52180637848+0xc8>
 80024e6:      	mov.w	r8, #0x0
 80024ea:      	mov	r0, lr
 80024ec:      	orr.w	r12, r8, r12, lsl #6
 80024f0:      	cmp	r6, #0xf0
 80024f2:      	bhs	#-0x32 <core::fmt::Formatter::pad::haebcf52180637848+0x94>
 80024f4:      	orr.w	r6, r12, r11, lsl #12
 80024f8:      	mov	r0, r4
 80024fa:      	subs	r3, #0x1
 80024fc:      	beq.w	#0x10e <core::fmt::Formatter::pad::haebcf52180637848+0x1de>
 8002500:      	subs	r2, r2, r5
 8002502:      	cmp	lr, r0
 8002504:      	add	r2, r0
 8002506:      	mov	r5, r0
 8002508:      	bne	#-0x82 <core::fmt::Formatter::pad::haebcf52180637848+0x5a>
 800250a:      	b	#0x16 <core::fmt::Formatter::pad::haebcf52180637848+0xf4>
 800250c:      	movs	r6, #0x0
 800250e:      	mov	r0, r4
 8002510:      	mov.w	r1, #0x1c0000
 8002514:      	and.w	r1, r1, r11, lsl #18
 8002518:      	orr.w	r1, r1, r12, lsl #6
 800251c:      	add	r6, r1
 800251e:      	cmp.w	r6, #0x110000
 8002522:      	bne	#-0x2c <core::fmt::Formatter::pad::haebcf52180637848+0xca>
 8002524:      	mov	r2, r9
 8002526:      	ldrd	r1, r5, [sp, #4]
 800252a:      	cmp	r1, #0x1
 800252c:      	beq	#0xa <core::fmt::Formatter::pad::haebcf52180637848+0x10a>
 800252e:      	ldrd	r0, r1, [r10, #24]
 8002532:      	b	#0x26 <core::fmt::Formatter::pad::haebcf52180637848+0x12c>
 8002534:      	movs	r2, #0x0
 8002536:      	cmp	r1, #0x1
 8002538:      	bne	#-0xe <core::fmt::Formatter::pad::haebcf52180637848+0xfe>
 800253a:      	mov	r9, r2
 800253c:      	cmp.w	r9, #0x0
 8002540:      	bne.w	#-0xf2 <core::fmt::Formatter::pad::haebcf52180637848+0x22>
 8002544:      	movs	r1, #0x0
 8002546:      	ldr.w	lr, [r10, #0xc]
 800254a:      	sub.w	r1, r9, r1
 800254e:      	cmp	r1, lr
 8002550:      	blo	#0x9c <core::fmt::Formatter::pad::haebcf52180637848+0x1c0>
 8002552:      	ldr.w	r1, [r10, #0x1c]
 8002556:      	mov	r2, r9
 8002558:      	ldr.w	r0, [r10, #0x18]
 800255c:      	ldr	r3, [r1, #0xc]
 800255e:      	mov	r1, r5
 8002560:      	add	sp, #0xc
 8002562:      	pop.w	{r8, r9, r10, r11}
 8002566:      	pop.w	{r4, r5, r6, r7, lr}
 800256a:      	bx	r3
 800256c:      	sub.w	r3, r12, r9
 8002570:      	movs	r1, #0x0
 8002572:      	mov	lr, r5
 8002574:      	mov	r2, r5
 8002576:      	ldrb	r6, [r2]
 8002578:      	ldrb	r5, [r2, #0x1]
 800257a:      	and	r6, r6, #0xc0
 800257e:      	ldrb	r4, [r2, #0x2]
 8002580:      	ldrb	r0, [r2, #0x3]
 8002582:      	cmp	r6, #0x80
 8002584:      	and	r6, r5, #0xc0
 8002588:      	it	eq
 800258a:      	addeq	r1, #0x1
 800258c:      	cmp	r6, #0x80
 800258e:      	and	r6, r4, #0xc0
 8002592:      	it	eq
 8002594:      	addeq	r1, #0x1
 8002596:      	cmp	r6, #0x80
 8002598:      	and	r0, r0, #0xc0
 800259c:      	it	eq
 800259e:      	addeq	r1, #0x1
 80025a0:      	cmp	r0, #0x80
 80025a2:      	it	eq
 80025a4:      	addeq	r1, #0x1
 80025a6:      	adds	r2, #0x4
 80025a8:      	adds	r3, #0x4
 80025aa:      	bne	#-0x38 <core::fmt::Formatter::pad::haebcf52180637848+0x146>
 80025ac:      	mov	r5, lr
 80025ae:      	cmp.w	r12, #0x0
 80025b2:      	beq	#0x2e <core::fmt::Formatter::pad::haebcf52180637848+0x1b4>
 80025b4:      	ldrb	r0, [r2]
 80025b6:      	and	r0, r0, #0xc0
 80025ba:      	cmp	r0, #0x80
 80025bc:      	it	eq
 80025be:      	addeq	r1, #0x1
 80025c0:      	cmp.w	r12, #0x1
 80025c4:      	beq	#0x1c <core::fmt::Formatter::pad::haebcf52180637848+0x1b4>
 80025c6:      	ldrb	r0, [r2, #0x1]
 80025c8:      	and	r0, r0, #0xc0
 80025cc:      	cmp	r0, #0x80
 80025ce:      	it	eq
 80025d0:      	addeq	r1, #0x1
 80025d2:      	cmp.w	r12, #0x2
 80025d6:      	beq	#0xa <core::fmt::Formatter::pad::haebcf52180637848+0x1b4>
 80025d8:      	ldrb	r0, [r2, #0x2]
 80025da:      	and	r0, r0, #0xc0
 80025de:      	cmp	r0, #0x80
 80025e0:      	it	eq
 80025e2:      	addeq	r1, #0x1
 80025e4:      	ldr.w	lr, [r10, #0xc]
 80025e8:      	sub.w	r1, r9, r1
 80025ec:      	cmp	r1, lr
 80025ee:      	bhs	#-0xa0 <core::fmt::Formatter::pad::haebcf52180637848+0x122>
 80025f0:      	cmp.w	r9, #0x0
 80025f4:      	beq	#0x2a <core::fmt::Formatter::pad::haebcf52180637848+0x1f2>
 80025f6:      	sub.w	r1, r9, #0x1
 80025fa:      	and	r12, r9, #0x3
 80025fe:      	cmp	r1, #0x3
 8002600:      	bhs	#0x22 <core::fmt::Formatter::pad::haebcf52180637848+0x1f6>
 8002602:      	movs	r1, #0x0
 8002604:      	mov	r3, r5
 8002606:      	cmp.w	r12, #0x0
 800260a:      	bne	#0x60 <core::fmt::Formatter::pad::haebcf52180637848+0x23e>
 800260c:      	b	#0x8e <core::fmt::Formatter::pad::haebcf52180637848+0x26e>
 800260e:      	ldrd	r1, r5, [sp, #4]
 8002612:      	cmp.w	r6, #0x110000
 8002616:      	bne	#0xaa <$t.226+0x8>
 8002618:      	mov	r2, r9
 800261a:      	cmp	r1, #0x1
 800261c:      	bne.w	#-0xf2 <core::fmt::Formatter::pad::haebcf52180637848+0xfe>
 8002620:      	b	#-0xea <core::fmt::Formatter::pad::haebcf52180637848+0x10a>
 8002622:      	movs	r1, #0x0
 8002624:      	b	#0x76 <core::fmt::Formatter::pad::haebcf52180637848+0x26e>
 8002626:      	sub.w	r6, r12, r9
 800262a:      	movs	r1, #0x0
 800262c:      	mov	r8, r5
 800262e:      	mov	r3, r5
 8002630:      	ldrb	r5, [r3]
 8002632:      	ldrb	r4, [r3, #0x1]
 8002634:      	ldrb	r2, [r3, #0x2]
 8002636:      	and	r5, r5, #0xc0
 800263a:      	ldrb	r0, [r3, #0x3]
 800263c:      	cmp	r5, #0x80
 800263e:      	and	r4, r4, #0xc0
 8002642:      	it	eq
 8002644:      	addeq	r1, #0x1
 8002646:      	cmp	r4, #0x80
 8002648:      	and	r2, r2, #0xc0
 800264c:      	it	eq
 800264e:      	addeq	r1, #0x1
 8002650:      	cmp	r2, #0x80
 8002652:      	and	r0, r0, #0xc0
 8002656:      	it	eq
 8002658:      	addeq	r1, #0x1
 800265a:      	cmp	r0, #0x80
 800265c:      	it	eq
 800265e:      	addeq	r1, #0x1
 8002660:      	adds	r3, #0x4
 8002662:      	adds	r6, #0x4
 8002664:      	bne	#-0x38 <core::fmt::Formatter::pad::haebcf52180637848+0x200>
 8002666:      	mov	r5, r8
 8002668:      	cmp.w	r12, #0x0
 800266c:      	beq	#0x2e <core::fmt::Formatter::pad::haebcf52180637848+0x26e>
 800266e:      	ldrb	r0, [r3]
 8002670:      	and	r0, r0, #0xc0
 8002674:      	cmp	r0, #0x80
 8002676:      	it	eq
 8002678:      	addeq	r1, #0x1
 800267a:      	cmp.w	r12, #0x1
 800267e:      	beq	#0x1c <core::fmt::Formatter::pad::haebcf52180637848+0x26e>
 8002680:      	ldrb	r0, [r3, #0x1]
 8002682:      	and	r0, r0, #0xc0
 8002686:      	cmp	r0, #0x80
 8002688:      	it	eq
 800268a:      	addeq	r1, #0x1
 800268c:      	cmp.w	r12, #0x2
 8002690:      	beq	#0xa <core::fmt::Formatter::pad::haebcf52180637848+0x26e>
 8002692:      	ldrb	r0, [r3, #0x2]
 8002694:      	and	r0, r0, #0xc0
 8002698:      	cmp	r0, #0x80
 800269a:      	it	eq
 800269c:      	addeq	r1, #0x1
 800269e:      	ldrb.w	r0, [r10, #0x20]
 80026a2:      	subs	r2, r0, #0x3
 80026a4:      	it	ne
 80026a6:      	movne	r2, r0
 80026a8:      	sub.w	r0, r1, r9
 80026ac:      	add.w	r1, r0, lr
 80026b0:      	movs	r0, #0x0
 80026b2:      	mov	r8, r1
 80026b4:      	tbb	[pc, r2]

080026b8 $d.225:
 80026b8:	17 02 13 02	.word	0x02130217

080026bc $t.226:
 80026bc:      	mov.w	r8, #0x0
 80026c0:      	mov	r0, r1
 80026c2:      	b	#0x20 <$t.226+0x2a>
 80026c4:      	cmp	r2, #0x0
 80026c6:      	it	ne
 80026c8:      	cmpne	r2, r9
 80026ca:      	bne	#0x6e <$t.226+0x80>
 80026cc:      	mov	r0, r5
 80026ce:      	cmp	r0, #0x0
 80026d0:      	ite	eq
 80026d2:      	moveq	r2, r9
 80026d4:      	movne	r5, r0
 80026d6:      	cmp	r1, #0x1
 80026d8:      	bne.w	#-0x1ae <core::fmt::Formatter::pad::haebcf52180637848+0xfe>
 80026dc:      	b	#-0x1a6 <core::fmt::Formatter::pad::haebcf52180637848+0x10a>
 80026de:      	lsrs	r0, r1, #0x1
 80026e0:      	adds	r1, #0x1
 80026e2:      	lsr.w	r8, r1, #0x1
 80026e6:      	adds	r4, r0, #0x1
 80026e8:      	subs	r4, #0x1
 80026ea:      	beq	#0x10 <$t.226+0x42>
 80026ec:      	ldrd	r0, r2, [r10, #24]
 80026f0:      	ldr.w	r1, [r10, #0x4]
 80026f4:      	ldr	r2, [r2, #0x10]
 80026f6:      	blx	r2
 80026f8:      	cmp	r0, #0x0
 80026fa:      	beq	#-0x16 <$t.226+0x2c>
 80026fc:      	b	#0x28 <$t.226+0x6c>
 80026fe:      	ldrd	r0, r1, [r10, #24]
 8002702:      	mov	r2, r9
 8002704:      	ldr	r3, [r1, #0xc]
 8002706:      	mov	r1, r5
 8002708:      	ldr.w	r11, [r10, #0x4]
 800270c:      	blx	r3
 800270e:      	cbnz	r0, #0x16
 8002710:      	ldrd	r6, r5, [r10, #24]
 8002714:      	add.w	r4, r8, #0x1
 8002718:      	subs	r4, #0x1
 800271a:      	beq	#0x14 <$t.226+0x76>
 800271c:      	ldr	r2, [r5, #0x10]
 800271e:      	mov	r0, r6
 8002720:      	mov	r1, r11
 8002722:      	blx	r2
 8002724:      	cmp	r0, #0x0
 8002726:      	beq	#-0x12 <$t.226+0x5c>
 8002728:      	movs	r0, #0x1
 800272a:      	add	sp, #0xc
 800272c:      	pop.w	{r8, r9, r10, r11}
 8002730:      	pop	{r4, r5, r6, r7, pc}
 8002732:      	movs	r0, #0x0
 8002734:      	add	sp, #0xc
 8002736:      	pop.w	{r8, r9, r10, r11}
 800273a:      	pop	{r4, r5, r6, r7, pc}
 800273c:      	cmp	r2, r9
 800273e:      	bhs	#0x6 <$t.226+0x8c>
 8002740:      	ldrsb	r0, [r5, r2]
 8002742:      	cmn.w	r0, #0x40
 8002746:      	bge	#-0x7e <$t.226+0x10>
 8002748:      	movs	r0, #0x0
 800274a:      	movs	r2, #0x0
 800274c:      	cmp	r0, #0x0
 800274e:      	ite	eq
 8002750:      	moveq	r2, r9
 8002752:      	movne	r5, r0
 8002754:      	cmp	r1, #0x1
 8002756:      	bne.w	#-0x22c <core::fmt::Formatter::pad::haebcf52180637848+0xfe>
 800275a:      	b	#-0x224 <core::fmt::Formatter::pad::haebcf52180637848+0x10a>

0800275c core::slice::slice_index_len_fail::h9846d6c67dda1615:
 800275c:      	push	{r7, lr}
 800275e:      	mov	r7, sp
 8002760:      	sub	sp, #0x30
 8002762:      	strd	r0, r1, [sp]
 8002766:      	movs	r0, #0x2
 8002768:      	add	r1, sp, #0x20
 800276a:      	str	r0, [sp, #0x1c]
 800276c:      	str	r1, [sp, #0x18]
 800276e:      	movs	r1, #0x0
 8002770:      	str	r1, [sp, #0x14]
 8002772:      	strd	r0, r1, [sp, #12]
 8002776:      	movw	r0, #0x3dd4
 800277a:      	movt	r0, #0x800
 800277e:      	add	r1, sp, #0x4
 8002780:      	str	r0, [sp, #0x8]
 8002782:      	movw	r0, #0x28c5
 8002786:      	movt	r0, #0x800
 800278a:      	str	r0, [sp, #0x2c]
 800278c:      	strd	r0, r1, [sp, #36]
 8002790:      	mov	r0, sp
 8002792:      	movw	r1, #0x3de4
 8002796:      	str	r0, [sp, #0x20]
 8002798:      	add	r0, sp, #0x8
 800279a:      	movt	r1, #0x800
 800279e:      	bl	#-0x84e
 80027a2:      	trap

080027a4 core::slice::slice_index_order_fail::h6b844d6c9bdd80e5:
 80027a4:      	push	{r7, lr}
 80027a6:      	mov	r7, sp
 80027a8:      	sub	sp, #0x30
 80027aa:      	strd	r0, r1, [sp]
 80027ae:      	movs	r0, #0x2
 80027b0:      	add	r1, sp, #0x20
 80027b2:      	str	r0, [sp, #0x1c]
 80027b4:      	str	r1, [sp, #0x18]
 80027b6:      	movs	r1, #0x0
 80027b8:      	str	r1, [sp, #0x14]
 80027ba:      	strd	r0, r1, [sp, #12]
 80027be:      	movw	r0, #0x3e18
 80027c2:      	movt	r0, #0x800
 80027c6:      	add	r1, sp, #0x4
 80027c8:      	str	r0, [sp, #0x8]
 80027ca:      	movw	r0, #0x28c5
 80027ce:      	movt	r0, #0x800
 80027d2:      	str	r0, [sp, #0x2c]
 80027d4:      	strd	r0, r1, [sp, #36]
 80027d8:      	mov	r0, sp
 80027da:      	movw	r1, #0x3e28
 80027de:      	str	r0, [sp, #0x20]
 80027e0:      	add	r0, sp, #0x8
 80027e2:      	movt	r1, #0x800
 80027e6:      	bl	#-0x896
 80027ea:      	trap

080027ec core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h934629606b562e92:
 80027ec:      	push	{r4, r5, r7, lr}
 80027ee:      	add	r7, sp, #0x8
 80027f0:      	sub	sp, #0x88
 80027f2:      	ldr	r0, [r0]
 80027f4:      	add.w	lr, sp, #0x8
 80027f8:      	mov	r12, r1
 80027fa:      	movs	r3, #0x81
 80027fc:      	movs	r1, #0x0
 80027fe:      	and	r2, r0, #0xf
 8002802:      	add.w	r4, r2, #0x37
 8002806:      	cmp	r2, #0xa
 8002808:      	it	lo
 800280a:      	addlo.w	r4, r2, #0x30
 800280e:      	add.w	r2, lr, r3
 8002812:      	cmp.w	r1, r0, lsr #4
 8002816:      	strb	r4, [r2, #-2]
 800281a:      	beq	#0x60 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h934629606b562e92+0x92>
 800281c:      	lsrs	r4, r0, #0x4
 800281e:      	and	r4, r4, #0xf
 8002822:      	add.w	r5, r4, #0x37
 8002826:      	cmp	r4, #0xa
 8002828:      	it	lo
 800282a:      	addlo.w	r5, r4, #0x30
 800282e:      	cmp.w	r1, r0, lsr #8
 8002832:      	strb	r5, [r2, #-3]
 8002836:      	beq	#0x50 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h934629606b562e92+0x9e>
 8002838:      	lsrs	r4, r0, #0x8
 800283a:      	and	r4, r4, #0xf
 800283e:      	add.w	r5, r4, #0x37
 8002842:      	cmp	r4, #0xa
 8002844:      	it	lo
 8002846:      	addlo.w	r5, r4, #0x30
 800284a:      	cmp.w	r1, r0, lsr #12
 800284e:      	strb	r5, [r2, #-4]
 8002852:      	beq	#0x3e <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h934629606b562e92+0xa8>
 8002854:      	lsrs	r4, r0, #0xc
 8002856:      	subs	r3, #0x4
 8002858:      	and	r4, r4, #0xf
 800285c:      	add.w	r5, r4, #0x37
 8002860:      	cmp	r4, #0xa
 8002862:      	it	lo
 8002864:      	addlo.w	r5, r4, #0x30
 8002868:      	strb	r5, [r2, #-5]
 800286c:      	lsrs	r2, r0, #0x10
 800286e:      	cmp.w	r1, r0, lsr #16
 8002872:      	mov	r0, r2
 8002874:      	bne	#-0x7a <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h934629606b562e92+0x12>
 8002876:      	subs	r0, r3, #0x1
 8002878:      	cmp	r0, #0x81
 800287a:      	blo	#0x1e <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h934629606b562e92+0xb0>
 800287c:      	b	#0x3c <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h934629606b562e92+0xd0>
 800287e:      	subs	r1, r3, #0x1
 8002880:      	subs	r0, r3, #0x2
 8002882:      	mov	r3, r1
 8002884:      	cmp	r0, #0x81
 8002886:      	blo	#0x12 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h934629606b562e92+0xb0>
 8002888:      	b	#0x30 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h934629606b562e92+0xd0>
 800288a:      	subs	r0, r3, #0x3
 800288c:      	subs	r3, #0x2
 800288e:      	cmp	r0, #0x81
 8002890:      	blo	#0x8 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h934629606b562e92+0xb0>
 8002892:      	b	#0x26 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h934629606b562e92+0xd0>
 8002894:      	subs	r0, r3, #0x4
 8002896:      	subs	r3, #0x3
 8002898:      	cmp	r0, #0x81
 800289a:      	bhs	#0x1e <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h934629606b562e92+0xd0>
 800289c:      	rsb.w	r1, r3, #0x81
 80028a0:      	movw	r2, #0x3c94
 80028a4:      	add	r0, lr
 80028a6:      	movt	r2, #0x800
 80028aa:      	strd	r0, r1, [sp]
 80028ae:      	mov	r0, r12
 80028b0:      	movs	r1, #0x1
 80028b2:      	movs	r3, #0x2
 80028b4:      	bl	#-0x764
 80028b8:      	add	sp, #0x88
 80028ba:      	pop	{r4, r5, r7, pc}
 80028bc:      	movs	r1, #0x80
 80028be:      	bl	#-0x11e
 80028c2:      	trap

080028c4 core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::he54efa7d67fbd41d:
 80028c4:      	push	{r4, r5, r6, r7, lr}
 80028c6:      	add	r7, sp, #0xc
 80028c8:      	push.w	{r8, r9, r10, r11}
 80028cc:      	sub	sp, #0x34
 80028ce:      	ldr	r4, [r0]
 80028d0:      	movw	r0, #0x851f
 80028d4:      	movw	r8, #0x3c96
 80028d8:      	mov	r5, r1
 80028da:      	movw	r1, #0x2710
 80028de:      	cmp	r4, r1
 80028e0:      	movt	r0, #0x51eb
 80028e4:      	movt	r8, #0x800
 80028e8:      	blo	#0x76 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::he54efa7d67fbd41d+0x9e>
 80028ea:      	movw	r9, #0x1759
 80028ee:      	movw	lr, #0xe0ff
 80028f2:      	add.w	r11, sp, #0xc
 80028f6:      	movs	r3, #0x0
 80028f8:      	movt	r9, #0xd1b7
 80028fc:      	mov.w	r10, #0x64
 8002900:      	movt	lr, #0x5f5
 8002904:      	str	r5, [sp, #0x8]
 8002906:      	umull	r2, r5, r4, r9
 800290a:      	cmp	r4, lr
 800290c:      	lsr.w	r2, r5, #0xd
 8002910:      	mls	r5, r2, r1, r4
 8002914:      	add.w	r1, r11, r3
 8002918:      	sub.w	r3, r3, #0x4
 800291c:      	mov	r4, r2
 800291e:      	uxth	r6, r5
 8002920:      	umull	r6, r12, r6, r0
 8002924:      	lsr.w	r6, r12, #0x5
 8002928:      	mls	r5, r6, r10, r5
 800292c:      	ldrh.w	r6, [r8, r6, lsl #1]
 8002930:      	strh.w	r6, [r1, #0x23]
 8002934:      	uxth	r5, r5
 8002936:      	ldrh.w	r5, [r8, r5, lsl #1]
 800293a:      	strh.w	r5, [r1, #0x25]
 800293e:      	movw	r1, #0x2710
 8002942:      	bhi	#-0x40 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::he54efa7d67fbd41d+0x42>
 8002944:      	ldr	r5, [sp, #0x8]
 8002946:      	add.w	r1, r3, #0x27
 800294a:      	mov	r4, r2
 800294c:      	cmp	r4, #0x63
 800294e:      	bgt	#0x16 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::he54efa7d67fbd41d+0xa4>
 8002950:      	mov	r3, r4
 8002952:      	cmp	r3, #0xa
 8002954:      	blt	#0x2e <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::he54efa7d67fbd41d+0xc2>
 8002956:      	subs	r1, #0x2
 8002958:      	ldrh.w	r0, [r8, r3, lsl #1]
 800295c:      	add	r2, sp, #0xc
 800295e:      	strh	r0, [r2, r1]
 8002960:      	b	#0x2c <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::he54efa7d67fbd41d+0xcc>
 8002962:      	movs	r1, #0x27
 8002964:      	cmp	r4, #0x63
 8002966:      	ble	#-0x1a <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::he54efa7d67fbd41d+0x8c>
 8002968:      	uxth	r2, r4
 800296a:      	subs	r1, #0x2
 800296c:      	umull	r2, r3, r2, r0
 8002970:      	add	r6, sp, #0xc
 8002972:      	movs	r2, #0x64
 8002974:      	lsrs	r3, r3, #0x5
 8002976:      	mls	r2, r3, r2, r4
 800297a:      	uxth	r2, r2
 800297c:      	ldrh.w	r2, [r8, r2, lsl #1]
 8002980:      	strh	r2, [r6, r1]
 8002982:      	cmp	r3, #0xa
 8002984:      	bge	#-0x32 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::he54efa7d67fbd41d+0x92>
 8002986:      	subs	r1, #0x1
 8002988:      	add	r2, sp, #0xc
 800298a:      	add.w	r0, r3, #0x30
 800298e:      	strb	r0, [r2, r1]
 8002990:      	rsb.w	r0, r1, #0x27
 8002994:      	add	r2, sp, #0xc
 8002996:      	add	r1, r2
 8002998:      	movw	r2, #0x3c04
 800299c:      	strd	r1, r0, [sp]
 80029a0:      	movt	r2, #0x800
 80029a4:      	mov	r0, r5
 80029a6:      	movs	r1, #0x1
 80029a8:      	movs	r3, #0x0
 80029aa:      	bl	#-0x85a
 80029ae:      	add	sp, #0x34
 80029b0:      	pop.w	{r8, r9, r10, r11}
 80029b4:      	pop	{r4, r5, r6, r7, pc}

080029b6 <&T as core::fmt::Display>::fmt::h059982840caabfce:
 80029b6:      	push	{r4, r5, r6, r7, lr}
 80029b8:      	add	r7, sp, #0xc
 80029ba:      	push.w	{r8, r9, r11}
 80029be:      	sub	sp, #0x18
 80029c0:      	ldr.w	lr, [r0]
 80029c4:      	mov	r2, sp
 80029c6:      	ldrd	r12, r1, [r1, #24]
 80029ca:      	mov	r3, r2
 80029cc:      	ldm.w	lr, {r0, r4, r5, r6, r8, r9}
 80029d0:      	stm.w	r3, {r0, r4, r5, r6, r8, r9}
 80029d4:      	mov	r0, r12
 80029d6:      	bl	#-0xa60
 80029da:      	add	sp, #0x18
 80029dc:      	pop.w	{r8, r9, r11}
 80029e0:      	pop	{r4, r5, r6, r7, pc}

080029e2 <&T as core::fmt::Display>::fmt::h78a4d557f308bff4:
 80029e2:      	mov	r3, r1
 80029e4:      	ldrd	r1, r2, [r0]
 80029e8:      	mov	r0, r3
 80029ea:      	b.w	#-0x5be <core::fmt::Formatter::pad::haebcf52180637848>

080029ee <&T as core::fmt::Display>::fmt::h8877feedfe639a2c:
 80029ee:      	ldr	r0, [r0]
 80029f0:      	mov	r3, r1
 80029f2:      	ldrd	r1, r2, [r0]
 80029f6:      	mov	r0, r3
 80029f8:      	b.w	#-0x5cc <core::fmt::Formatter::pad::haebcf52180637848>

080029fc rust_begin_unwind:
; fn panic(info: &PanicInfo) -> ! {
 80029fc:      	push	{r7, lr}
 80029fe:      	mov	r7, sp
 8002a00:      	sub	sp, #0x50
 8002a02:      	str	r0, [sp, #0x18]
;     interrupt::disable();
 8002a04:      	bl	#0xd48
 8002a08:      	b	#-0x2 <rust_begin_unwind+0xe>
;     let itm = unsafe { &mut *ITM::ptr() };
 8002a0a:      	b	#-0x2 <rust_begin_unwind+0x10>
 8002a0c:      	mov.w	r0, #0xe0000000
 8002a10:      	str	r0, [sp, #0x44]
;     let stim = &mut itm.stim[0];
 8002a12:      	mov	r1, r0
 8002a14:      	str	r0, [sp, #0x48]
;     iprintln!(stim, "{}", info);
 8002a16:      	movw	r0, #0x3e4c
 8002a1a:      	movt	r0, #0x800
 8002a1e:      	ldr	r0, [r0]
 8002a20:      	add	r2, sp, #0x18
 8002a22:      	str	r2, [sp, #0x3c]
 8002a24:      	ldr	r2, [sp, #0x3c]
 8002a26:      	str	r2, [sp, #0x4c]
 8002a28:      	movw	r3, #0x2a7d
 8002a2c:      	movt	r3, #0x800
 8002a30:      	str	r0, [sp, #0x14]
 8002a32:      	mov	r0, r2
 8002a34:      	str	r1, [sp, #0x10]
 8002a36:      	mov	r1, r3
 8002a38:      	bl	#0x88
 8002a3c:      	str	r0, [sp, #0xc]
 8002a3e:      	str	r1, [sp, #0x8]
 8002a40:      	b	#-0x2 <rust_begin_unwind+0x46>
 8002a42:      	ldr	r0, [sp, #0xc]
 8002a44:      	str	r0, [sp, #0x34]
 8002a46:      	ldr	r1, [sp, #0x8]
 8002a48:      	str	r1, [sp, #0x38]
 8002a4a:      	mov	r2, sp
 8002a4c:      	movs	r3, #0x1
 8002a4e:      	str	r3, [r2]
 8002a50:      	add	r0, sp, #0x1c
 8002a52:      	movs	r2, #0x2
 8002a54:      	add	r3, sp, #0x34
 8002a56:      	ldr	r1, [sp, #0x14]
 8002a58:      	bl	#0x92
 8002a5c:      	b	#-0x2 <rust_begin_unwind+0x62>
 8002a5e:      	add	r1, sp, #0x1c
 8002a60:      	ldr	r0, [sp, #0x10]
 8002a62:      	bl	#0x224
 8002a66:      	b	#-0x2 <rust_begin_unwind+0x6c>
;     loop {
 8002a68:      	b	#-0x2 <rust_begin_unwind+0x6e>
 8002a6a:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst)
 8002a6c:      	strb	r0, [r7, #-13]
 8002a70:      	ldrb	r0, [r7, #-13]
 8002a74:      	bl	#0xb0
 8002a78:      	b	#-0x2 <rust_begin_unwind+0x7e>
;     loop {
 8002a7a:      	b	#-0x14 <rust_begin_unwind+0x6e>

08002a7c <&T as core::fmt::Display>::fmt::hb249213539f6282a:
 8002a7c:      	push	{r7, lr}
 8002a7e:      	mov	r7, sp
 8002a80:      	sub	sp, #0x10
 8002a82:      	str	r0, [sp, #0x8]
 8002a84:      	str	r1, [sp, #0xc]
 8002a86:      	ldr	r0, [r0]
 8002a88:      	bl	#-0xc9c
 8002a8c:      	str	r0, [sp, #0x4]
 8002a8e:      	b	#-0x2 <<&T as core::fmt::Display>::fmt::hb249213539f6282a+0x14>
 8002a90:      	ldr	r0, [sp, #0x4]
 8002a92:      	and	r0, r0, #0x1
 8002a96:      	add	sp, #0x10
 8002a98:      	pop	{r7, pc}

08002a9a core::fmt::ArgumentV1::new::h057f4ac2be40a424:
 8002a9a:      	sub	sp, #0x24
 8002a9c:      	str	r0, [sp, #0x14]
 8002a9e:      	str	r1, [sp, #0x18]
 8002aa0:      	str	r1, [sp, #0x1c]
 8002aa2:      	ldr	r1, [sp, #0x1c]
 8002aa4:      	str	r0, [sp, #0x8]
 8002aa6:      	str	r1, [sp, #0x4]
 8002aa8:      	b	#-0x2 <core::fmt::ArgumentV1::new::h057f4ac2be40a424+0x10>
 8002aaa:      	ldr	r0, [sp, #0x8]
 8002aac:      	str	r0, [sp, #0x20]
 8002aae:      	ldr	r1, [sp, #0x20]
 8002ab0:      	str	r1, [sp]
 8002ab2:      	b	#-0x2 <core::fmt::ArgumentV1::new::h057f4ac2be40a424+0x1a>
 8002ab4:      	ldr	r0, [sp]
 8002ab6:      	str	r0, [sp, #0xc]
 8002ab8:      	ldr	r1, [sp, #0x4]
 8002aba:      	str	r1, [sp, #0x10]
 8002abc:      	ldr	r0, [sp, #0xc]
 8002abe:      	ldr	r1, [sp, #0x10]
 8002ac0:      	add	sp, #0x24
 8002ac2:      	bx	lr

08002ac4 core::fmt::ArgumentV1::new::h4652c4aa8746e856:
 8002ac4:      	sub	sp, #0x24
 8002ac6:      	str	r0, [sp, #0x14]
 8002ac8:      	str	r1, [sp, #0x18]
 8002aca:      	str	r1, [sp, #0x1c]
 8002acc:      	ldr	r1, [sp, #0x1c]
 8002ace:      	str	r0, [sp, #0x8]
 8002ad0:      	str	r1, [sp, #0x4]
 8002ad2:      	b	#-0x2 <core::fmt::ArgumentV1::new::h4652c4aa8746e856+0x10>
 8002ad4:      	ldr	r0, [sp, #0x8]
 8002ad6:      	str	r0, [sp, #0x20]
 8002ad8:      	ldr	r1, [sp, #0x20]
 8002ada:      	str	r1, [sp]
 8002adc:      	b	#-0x2 <core::fmt::ArgumentV1::new::h4652c4aa8746e856+0x1a>
 8002ade:      	ldr	r0, [sp]
 8002ae0:      	str	r0, [sp, #0xc]
 8002ae2:      	ldr	r1, [sp, #0x4]
 8002ae4:      	str	r1, [sp, #0x10]
 8002ae6:      	ldr	r0, [sp, #0xc]
 8002ae8:      	ldr	r1, [sp, #0x10]
 8002aea:      	add	sp, #0x24
 8002aec:      	bx	lr

08002aee core::fmt::Arguments::new_v1::h980ca0d502fbd2cd:
 8002aee:      	push	{r7, lr}
 8002af0:      	mov	r7, sp
 8002af2:      	sub	sp, #0x18
 8002af4:      	ldr.w	r12, [r7, #0x8]
 8002af8:      	str	r1, [sp, #0x8]
 8002afa:      	str	r2, [sp, #0xc]
 8002afc:      	str	r3, [sp, #0x10]
 8002afe:      	str.w	r12, [sp, #0x14]
 8002b02:      	mov.w	lr, #0x0
 8002b06:      	str.w	lr, [sp, #0x4]
 8002b0a:      	str.w	lr, [sp]
 8002b0e:      	str.w	lr, [sp]
 8002b12:      	str	r1, [r0]
 8002b14:      	str	r2, [r0, #0x4]
 8002b16:      	ldr	r1, [sp]
 8002b18:      	ldr	r2, [sp, #0x4]
 8002b1a:      	str	r1, [r0, #0x8]
 8002b1c:      	str	r2, [r0, #0xc]
 8002b1e:      	str	r3, [r0, #0x10]
 8002b20:      	str.w	r12, [r0, #0x14]
 8002b24:      	add	sp, #0x18
 8002b26:      	pop	{r7, pc}

08002b28 core::sync::atomic::compiler_fence::h6d48863cf42153c4:
 8002b28:      	push	{r7, lr}
 8002b2a:      	mov	r7, sp
 8002b2c:      	sub	sp, #0x10
 8002b2e:      	mov	r1, r0
 8002b30:      	strb	r0, [r7, #-5]
 8002b34:      	ldrb	r0, [r7, #-5]
 8002b38:      	str	r0, [sp, #0x4]
 8002b3a:      	ldr	r1, [sp, #0x4]
 8002b3c:      	tbb	[pc, r1]

08002b40 $d.1:
 8002b40:	03 11 10 12	.word	0x12101103
 8002b44:	13 00		.short	0x0013

08002b46 $t.2:
 8002b46:      	movw	r0, #0x3e50
 8002b4a:      	movt	r0, #0x800
 8002b4e:      	movw	r2, #0x3ecc
 8002b52:      	movt	r2, #0x800
 8002b56:      	movs	r1, #0x32
 8002b58:      	bl	#-0xc7c
 8002b5c:      	trap
 8002b5e:      	trap
 8002b60:      	b	#0x4 <$t.2+0x22>
 8002b62:      	b	#0x2 <$t.2+0x22>
 8002b64:      	b	#0x0 <$t.2+0x22>
 8002b66:      	b	#-0x2 <$t.2+0x22>
 8002b68:      	add	sp, #0x10
 8002b6a:      	pop	{r7, pc}

08002b6c core::fmt::Write::write_char::h3cce72fd467f003b:
 8002b6c:      	push	{r7, lr}
 8002b6e:      	mov	r7, sp
 8002b70:      	sub	sp, #0x20
 8002b72:      	str	r0, [sp, #0x18]
 8002b74:      	str	r1, [sp, #0x1c]
 8002b76:      	movs	r2, #0x0
 8002b78:      	str	r2, [sp, #0x14]
 8002b7a:      	add	r2, sp, #0x14
 8002b7c:      	movs	r3, #0x4
 8002b7e:      	str	r0, [sp, #0x10]
 8002b80:      	mov	r0, r1
 8002b82:      	mov	r1, r2
 8002b84:      	mov	r2, r3
 8002b86:      	bl	#0x146
 8002b8a:      	str	r0, [sp, #0xc]
 8002b8c:      	str	r1, [sp, #0x8]
 8002b8e:      	b	#-0x2 <core::fmt::Write::write_char::h3cce72fd467f003b+0x24>
 8002b90:      	ldr	r0, [sp, #0x10]
 8002b92:      	ldr	r1, [sp, #0xc]
 8002b94:      	ldr	r2, [sp, #0x8]
 8002b96:      	bl	#0xbc
 8002b9a:      	str	r0, [sp, #0x4]
 8002b9c:      	b	#-0x2 <core::fmt::Write::write_char::h3cce72fd467f003b+0x32>
 8002b9e:      	ldr	r0, [sp, #0x4]
 8002ba0:      	and	r0, r0, #0x1
 8002ba4:      	add	sp, #0x20
 8002ba6:      	pop	{r7, pc}

08002ba8 core::fmt::Write::write_fmt::hc04f660f191a081b:
 8002ba8:      	push	{r4, r5, r6, r7, lr}
 8002baa:      	add	r7, sp, #0xc
 8002bac:      	str	r11, [sp, #-4]!
 8002bb0:      	sub	sp, #0x28
 8002bb2:      	str	r0, [sp, #0xc]
 8002bb4:      	add	r0, sp, #0x10
 8002bb6:      	mov	r2, r0
 8002bb8:      	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 8002bbc:      	stm.w	r2, {r3, r4, r5, r6, r12, lr}
 8002bc0:      	movw	r1, #0x3edc
 8002bc4:      	movt	r1, #0x800
 8002bc8:      	add	r2, sp, #0xc
 8002bca:      	str	r0, [sp, #0x8]
 8002bcc:      	mov	r0, r2
 8002bce:      	ldr	r2, [sp, #0x8]
 8002bd0:      	bl	#-0xc5a
 8002bd4:      	str	r0, [sp, #0x4]
 8002bd6:      	b	#-0x2 <core::fmt::Write::write_fmt::hc04f660f191a081b+0x30>
 8002bd8:      	ldr	r0, [sp, #0x4]
 8002bda:      	and	r0, r0, #0x1
 8002bde:      	add	sp, #0x28
 8002be0:      	ldr	r11, [sp], #4
 8002be4:      	pop	{r4, r5, r6, r7, pc}

08002be6 <&mut W as core::fmt::Write>::write_char::hde72af8f92c205c0:
 8002be6:      	push	{r7, lr}
 8002be8:      	mov	r7, sp
 8002bea:      	sub	sp, #0x10
 8002bec:      	str	r0, [sp, #0x8]
 8002bee:      	str	r1, [sp, #0xc]
 8002bf0:      	ldr	r0, [r0]
 8002bf2:      	bl	#-0x8a
 8002bf6:      	str	r0, [sp, #0x4]
 8002bf8:      	b	#-0x2 <<&mut W as core::fmt::Write>::write_char::hde72af8f92c205c0+0x14>
 8002bfa:      	ldr	r0, [sp, #0x4]
 8002bfc:      	and	r0, r0, #0x1
 8002c00:      	add	sp, #0x10
 8002c02:      	pop	{r7, pc}

08002c04 <&mut W as core::fmt::Write>::write_fmt::h65d19572902c008a:
 8002c04:      	push	{r4, r5, r6, r7, lr}
 8002c06:      	add	r7, sp, #0xc
 8002c08:      	str	r8, [sp, #-4]!
 8002c0c:      	sub	sp, #0x20
 8002c0e:      	str	r0, [sp, #0x1c]
 8002c10:      	ldr	r0, [r0]
 8002c12:      	add	r2, sp, #0x4
 8002c14:      	mov	r3, r2
 8002c16:      	ldm.w	r1, {r4, r5, r6, r8, r12, lr}
 8002c1a:      	stm.w	r3, {r4, r5, r6, r8, r12, lr}
 8002c1e:      	mov	r1, r2
 8002c20:      	bl	#-0x7c
 8002c24:      	str	r0, [sp]
 8002c26:      	b	#-0x2 <<&mut W as core::fmt::Write>::write_fmt::h65d19572902c008a+0x24>
 8002c28:      	ldr	r0, [sp]
 8002c2a:      	and	r0, r0, #0x1
 8002c2e:      	add	sp, #0x20
 8002c30:      	ldr	r8, [sp], #4
 8002c34:      	pop	{r4, r5, r6, r7, pc}

08002c36 <&mut W as core::fmt::Write>::write_str::h493ad6a0bc3573f3:
 8002c36:      	push	{r7, lr}
 8002c38:      	mov	r7, sp
 8002c3a:      	sub	sp, #0x10
 8002c3c:      	str	r0, [sp, #0x4]
 8002c3e:      	str	r1, [sp, #0x8]
 8002c40:      	str	r2, [sp, #0xc]
 8002c42:      	ldr	r0, [r0]
 8002c44:      	bl	#0xe
 8002c48:      	str	r0, [sp]
 8002c4a:      	b	#-0x2 <<&mut W as core::fmt::Write>::write_str::h493ad6a0bc3573f3+0x16>
 8002c4c:      	ldr	r0, [sp]
 8002c4e:      	and	r0, r0, #0x1
 8002c52:      	add	sp, #0x10
 8002c54:      	pop	{r7, pc}

08002c56 <cortex_m::itm::Port as core::fmt::Write>::write_str::h920c1429684ca00f:
;     fn write_str(&mut self, s: &str) -> fmt::Result {
 8002c56:      	push	{r7, lr}
 8002c58:      	mov	r7, sp
 8002c5a:      	sub	sp, #0x28
 8002c5c:      	str	r0, [sp, #0xc]
 8002c5e:      	str	r1, [sp, #0x10]
 8002c60:      	str	r2, [sp, #0x14]
;         write_all(self.0, s.as_bytes());
 8002c62:      	ldr	r0, [r0]
 8002c64:      	str	r1, [sp, #0x20]
 8002c66:      	str	r2, [sp, #0x24]
 8002c68:      	str	r1, [sp, #0x18]
 8002c6a:      	str	r2, [sp, #0x1c]
 8002c6c:      	ldr	r1, [sp, #0x18]
 8002c6e:      	ldr	r2, [sp, #0x1c]
 8002c70:      	str	r0, [sp, #0x8]
 8002c72:      	str	r1, [sp, #0x4]
 8002c74:      	str	r2, [sp]
 8002c76:      	b	#-0x2 <<cortex_m::itm::Port as core::fmt::Write>::write_str::h920c1429684ca00f+0x22>
 8002c78:      	ldr	r0, [sp, #0x8]
 8002c7a:      	ldr	r1, [sp, #0x4]
 8002c7c:      	ldr	r2, [sp]
 8002c7e:      	bl	#0x59e
 8002c82:      	b	#-0x2 <<cortex_m::itm::Port as core::fmt::Write>::write_str::h920c1429684ca00f+0x2e>
 8002c84:      	movs	r0, #0x0
;     }
 8002c86:      	add	sp, #0x28
 8002c88:      	pop	{r7, pc}

08002c8a cortex_m::itm::write_fmt::h018887d3246df424:
; pub fn write_fmt(port: &mut Stim, args: fmt::Arguments) {
 8002c8a:      	push	{r4, r5, r6, r7, lr}
 8002c8c:      	add	r7, sp, #0xc
 8002c8e:      	str	r11, [sp, #-4]!
 8002c92:      	sub	sp, #0x28
 8002c94:      	str	r0, [sp, #0x24]
;     Port(port).write_fmt(args).ok();
 8002c96:      	str	r0, [sp, #0x8]
 8002c98:      	add	r0, sp, #0xc
 8002c9a:      	mov	r2, r0
 8002c9c:      	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 8002ca0:      	stm.w	r2, {r3, r4, r5, r6, r12, lr}
 8002ca4:      	add	r1, sp, #0x8
 8002ca6:      	str	r0, [sp, #0x4]
 8002ca8:      	mov	r0, r1
 8002caa:      	ldr	r1, [sp, #0x4]
 8002cac:      	bl	#-0x108
 8002cb0:      	str	r0, [sp]
 8002cb2:      	b	#-0x2 <cortex_m::itm::write_fmt::h018887d3246df424+0x2a>
 8002cb4:      	ldr	r0, [sp]
 8002cb6:      	and	r0, r0, #0x1
 8002cba:      	bl	#0x47c
 8002cbe:      	b	#-0x2 <cortex_m::itm::write_fmt::h018887d3246df424+0x36>
; }
 8002cc0:      	add	sp, #0x28
 8002cc2:      	ldr	r11, [sp], #4
 8002cc6:      	pop	{r4, r5, r6, r7, pc}

08002cc8 core::ptr::drop_in_place::h6de29ee739483b41:
 8002cc8:      	sub	sp, #0x4
 8002cca:      	str	r0, [sp]
 8002ccc:      	add	sp, #0x4
 8002cce:      	bx	lr

08002cd0 core::char::methods::<impl char>::encode_utf8::hc64c2a795ff96670:
 8002cd0:      	push	{r4, r5, r7, lr}
 8002cd2:      	add	r7, sp, #0x8
 8002cd4:      	sub	sp, #0xf0
 8002cd6:      	str	r0, [sp, #0xb0]
 8002cd8:      	str	r1, [sp, #0xb4]
 8002cda:      	str	r2, [sp, #0xb8]
 8002cdc:      	str	r0, [sp, #0x58]
 8002cde:      	str	r2, [sp, #0x54]
 8002ce0:      	str	r1, [sp, #0x50]
 8002ce2:      	bl	#0x1fc
 8002ce6:      	str	r0, [sp, #0x5c]
 8002ce8:      	b	#-0x2 <core::char::methods::<impl char>::encode_utf8::hc64c2a795ff96670+0x1a>
 8002cea:      	ldr	r0, [sp, #0x5c]
 8002cec:      	ldr	r1, [sp, #0x50]
 8002cee:      	str	r0, [sp, #0x4c]
 8002cf0:      	mov	r0, r1
 8002cf2:      	ldr	r1, [sp, #0x54]
 8002cf4:      	bl	#0x31e
 8002cf8:      	str	r0, [sp, #0x48]
 8002cfa:      	str	r1, [sp, #0x44]
 8002cfc:      	b	#-0x2 <core::char::methods::<impl char>::encode_utf8::hc64c2a795ff96670+0x2e>
 8002cfe:      	ldr	r0, [sp, #0x4c]
 8002d00:      	str	r0, [sp, #0x60]
 8002d02:      	ldr	r1, [sp, #0x48]
 8002d04:      	str	r1, [sp, #0x64]
 8002d06:      	ldr	r2, [sp, #0x44]
 8002d08:      	str	r2, [sp, #0x68]
 8002d0a:      	ldr	r3, [sp, #0x60]
 8002d0c:      	subs	r3, #0x1
 8002d0e:      	mov	r12, r3
 8002d10:      	cmp	r3, #0x3
 8002d12:      	str.w	r12, [sp, #0x40]
 8002d16:      	bhi	#0x10 <$t.2+0x8>
 8002d18:      	ldr	r1, [sp, #0x40]
 8002d1a:      	tbb	[pc, r1]

08002d1e $d.1:
 8002d1e:	02 13 17 1b	.word	0x1b171302

08002d22 $t.2:
 8002d22:      	ldr	r0, [sp, #0x68]
 8002d24:      	cmp	r0, #0x0
 8002d26:      	bne	#0x32 <$t.2+0x3a>
 8002d28:      	b	#-0x2 <$t.2+0x8>
 8002d2a:      	movw	r0, #0x3f48
 8002d2e:      	movt	r0, #0x800
 8002d32:      	ldr	r1, [r0]
 8002d34:      	ldr	r0, [sp, #0x50]
 8002d36:      	ldr	r2, [sp, #0x54]
 8002d38:      	str	r1, [sp, #0x3c]
 8002d3a:      	mov	r1, r2
 8002d3c:      	bl	#0x262
 8002d40:      	str	r0, [sp, #0xa8]
 8002d42:      	b	#0xcc <$t.2+0xf0>
 8002d44:      	ldr	r0, [sp, #0x68]
 8002d46:      	cmp	r0, #0x1
 8002d48:      	bhi	#0x1a <$t.2+0x44>
 8002d4a:      	b	#-0x24 <$t.2+0x8>
 8002d4c:      	ldr	r0, [sp, #0x68]
 8002d4e:      	cmp	r0, #0x2
 8002d50:      	bhi	#0x36 <$t.2+0x68>
 8002d52:      	b	#-0x2c <$t.2+0x8>
 8002d54:      	ldr	r0, [sp, #0x68]
 8002d56:      	cmp	r0, #0x3
 8002d58:      	bhi	#0x64 <$t.2+0x9e>
 8002d5a:      	b	#-0x34 <$t.2+0x8>
 8002d5c:      	ldr	r0, [sp, #0x64]
 8002d5e:      	str	r0, [sp, #0xe0]
 8002d60:      	ldr	r1, [sp, #0x58]
 8002d62:      	strb	r1, [r0]
 8002d64:      	b	#0x150 <$t.2+0x196>
 8002d66:      	ldr	r0, [sp, #0x64]
 8002d68:      	str	r0, [sp, #0xd8]
 8002d6a:      	ldr	r1, [sp, #0x64]
 8002d6c:      	adds	r2, r1, #0x1
 8002d6e:      	str	r2, [sp, #0xdc]
 8002d70:      	ldr	r2, [sp, #0x58]
 8002d72:      	lsrs	r2, r2, #0x6
 8002d74:      	movs	r3, #0x6
 8002d76:      	bfi	r2, r3, #5, #27
 8002d7a:      	strb	r2, [r0]
 8002d7c:      	ldrb.w	r0, [sp, #0x58]
 8002d80:      	movs	r2, #0x2
 8002d82:      	bfi	r0, r2, #6, #26
 8002d86:      	strb	r0, [r1, #0x1]
 8002d88:      	b	#0x12c <$t.2+0x196>
 8002d8a:      	ldr	r0, [sp, #0x64]
 8002d8c:      	str	r0, [sp, #0xcc]
 8002d8e:      	ldr	r1, [sp, #0x64]
 8002d90:      	adds	r2, r1, #0x1
 8002d92:      	str	r2, [sp, #0xd0]
 8002d94:      	ldr	r2, [sp, #0x64]
 8002d96:      	adds	r3, r2, #0x2
 8002d98:      	str	r3, [sp, #0xd4]
 8002d9a:      	ldr	r3, [sp, #0x58]
 8002d9c:      	lsrs	r3, r3, #0xc
 8002d9e:      	mov.w	r12, #0xe
 8002da2:      	bfi	r3, r12, #4, #28
 8002da6:      	strb	r3, [r0]
 8002da8:      	ldr	r0, [sp, #0x58]
 8002daa:      	lsrs	r0, r0, #0x6
 8002dac:      	movs	r3, #0x2
 8002dae:      	bfi	r0, r3, #6, #26
 8002db2:      	strb	r0, [r1, #0x1]
 8002db4:      	ldrb.w	r0, [sp, #0x58]
 8002db8:      	bfi	r0, r3, #6, #26
 8002dbc:      	strb	r0, [r2, #0x2]
 8002dbe:      	b	#0xf6 <$t.2+0x196>
 8002dc0:      	ldr	r0, [sp, #0x64]
 8002dc2:      	str	r0, [sp, #0xbc]
 8002dc4:      	ldr	r1, [sp, #0x64]
 8002dc6:      	adds	r2, r1, #0x1
 8002dc8:      	str	r2, [sp, #0xc0]
 8002dca:      	ldr	r2, [sp, #0x64]
 8002dcc:      	adds	r3, r2, #0x2
 8002dce:      	str	r3, [sp, #0xc4]
 8002dd0:      	ldr	r3, [sp, #0x64]
 8002dd2:      	add.w	r12, r3, #0x3
 8002dd6:      	str.w	r12, [sp, #0xc8]
 8002dda:      	ldr.w	r12, [sp, #0x58]
 8002dde:      	lsr.w	r12, r12, #0x12
 8002de2:      	mov.w	lr, #0x1e
 8002de6:      	bfi	r12, lr, #3, #29
 8002dea:      	strb.w	r12, [r0]
 8002dee:      	ldr	r0, [sp, #0x58]
 8002df0:      	lsrs	r0, r0, #0xc
 8002df2:      	mov.w	r12, #0x2
 8002df6:      	bfi	r0, r12, #6, #26
 8002dfa:      	strb	r0, [r1, #0x1]
 8002dfc:      	ldr	r0, [sp, #0x58]
 8002dfe:      	lsrs	r0, r0, #0x6
 8002e00:      	bfi	r0, r12, #6, #26
 8002e04:      	strb	r0, [r2, #0x2]
 8002e06:      	ldrb.w	r0, [sp, #0x58]
 8002e0a:      	bfi	r0, r12, #6, #26
 8002e0e:      	strb	r0, [r3, #0x3]
 8002e10:      	b	#0xa4 <$t.2+0x196>
 8002e12:      	add	r0, sp, #0x5c
 8002e14:      	str	r0, [sp, #0x9c]
 8002e16:      	add	r0, sp, #0x58
 8002e18:      	str	r0, [sp, #0xa0]
 8002e1a:      	add	r0, sp, #0xa8
 8002e1c:      	str	r0, [sp, #0xa4]
 8002e1e:      	ldr	r0, [sp, #0x9c]
 8002e20:      	str	r0, [sp, #0xe4]
 8002e22:      	ldr	r1, [sp, #0xa0]
 8002e24:      	str	r1, [sp, #0xe8]
 8002e26:      	ldr	r2, [sp, #0xa4]
 8002e28:      	str	r2, [sp, #0xec]
 8002e2a:      	movw	r3, #0x28c5
 8002e2e:      	movt	r3, #0x800
 8002e32:      	str	r1, [sp, #0x38]
 8002e34:      	mov	r1, r3
 8002e36:      	str	r2, [sp, #0x34]
 8002e38:      	bl	#0xea
 8002e3c:      	str	r0, [sp, #0x30]
 8002e3e:      	str	r1, [sp, #0x2c]
 8002e40:      	b	#-0x2 <$t.2+0x120>
 8002e42:      	movw	r1, #0x27ed
 8002e46:      	movt	r1, #0x800
 8002e4a:      	ldr	r0, [sp, #0x38]
 8002e4c:      	bl	#-0x3b6
 8002e50:      	str	r0, [sp, #0x28]
 8002e52:      	str	r1, [sp, #0x24]
 8002e54:      	b	#-0x2 <$t.2+0x134>
 8002e56:      	movw	r1, #0x28c5
 8002e5a:      	movt	r1, #0x800
 8002e5e:      	ldr	r0, [sp, #0x34]
 8002e60:      	bl	#0xc2
 8002e64:      	str	r0, [sp, #0x20]
 8002e66:      	str	r1, [sp, #0x1c]
 8002e68:      	b	#-0x2 <$t.2+0x148>
 8002e6a:      	ldr	r0, [sp, #0x30]
 8002e6c:      	str	r0, [sp, #0x84]
 8002e6e:      	ldr	r1, [sp, #0x2c]
 8002e70:      	str	r1, [sp, #0x88]
 8002e72:      	ldr	r2, [sp, #0x28]
 8002e74:      	str	r2, [sp, #0x8c]
 8002e76:      	ldr	r3, [sp, #0x24]
 8002e78:      	str	r3, [sp, #0x90]
 8002e7a:      	ldr.w	r12, [sp, #0x20]
 8002e7e:      	str.w	r12, [sp, #0x94]
 8002e82:      	ldr.w	lr, [sp, #0x1c]
 8002e86:      	str.w	lr, [sp, #0x98]
 8002e8a:      	mov	r4, sp
 8002e8c:      	movs	r5, #0x3
 8002e8e:      	str	r5, [r4]
 8002e90:      	add	r0, sp, #0x6c
 8002e92:      	add	r3, sp, #0x84
 8002e94:      	ldr	r1, [sp, #0x3c]
 8002e96:      	mov	r2, r5
 8002e98:      	bl	#-0x3ae
 8002e9c:      	b	#-0x2 <$t.2+0x17c>
 8002e9e:      	movw	r0, #0x3f98
 8002ea2:      	movt	r0, #0x800
 8002ea6:      	bl	#-0xfcc
 8002eaa:      	str	r0, [sp, #0x18]
 8002eac:      	b	#-0x2 <$t.2+0x18c>
 8002eae:      	add	r0, sp, #0x6c
 8002eb0:      	ldr	r1, [sp, #0x18]
 8002eb2:      	bl	#-0xf62
 8002eb6:      	trap
 8002eb8:      	ldr	r0, [sp, #0x5c]
 8002eba:      	str	r0, [sp, #0xac]
 8002ebc:      	ldr	r2, [sp, #0xac]
 8002ebe:      	ldr	r0, [sp, #0x50]
 8002ec0:      	ldr	r1, [sp, #0x54]
 8002ec2:      	bl	#0x126
 8002ec6:      	str	r0, [sp, #0x14]
 8002ec8:      	str	r1, [sp, #0x10]
 8002eca:      	b	#-0x2 <$t.2+0x1aa>
 8002ecc:      	ldr	r0, [sp, #0x14]
 8002ece:      	ldr	r1, [sp, #0x10]
 8002ed0:      	bl	#0x7c
 8002ed4:      	str	r0, [sp, #0xc]
 8002ed6:      	str	r1, [sp, #0x8]
 8002ed8:      	b	#-0x2 <$t.2+0x1b8>
 8002eda:      	ldr	r0, [sp, #0xc]
 8002edc:      	ldr	r1, [sp, #0x8]
 8002ede:      	add	sp, #0xf0
 8002ee0:      	pop	{r4, r5, r7, pc}

08002ee2 core::char::methods::<impl char>::len_utf8::h440731586c6c8566:
 8002ee2:      	sub	sp, #0x10
 8002ee4:      	str	r0, [sp, #0x8]
 8002ee6:      	str	r0, [sp, #0xc]
 8002ee8:      	cmp	r0, #0x80
 8002eea:      	str	r0, [sp]
 8002eec:      	blo	#0xa <core::char::methods::<impl char>::len_utf8::h440731586c6c8566+0x18>
 8002eee:      	b	#-0x2 <core::char::methods::<impl char>::len_utf8::h440731586c6c8566+0xe>
 8002ef0:      	ldr	r0, [sp]
 8002ef2:      	cmp.w	r0, #0x800
 8002ef6:      	blo	#0x10 <core::char::methods::<impl char>::len_utf8::h440731586c6c8566+0x28>
 8002ef8:      	b	#0x4 <core::char::methods::<impl char>::len_utf8::h440731586c6c8566+0x1e>
 8002efa:      	movs	r0, #0x1
 8002efc:      	str	r0, [sp, #0x4]
 8002efe:      	b	#0x1e <core::char::methods::<impl char>::len_utf8::h440731586c6c8566+0x3e>
 8002f00:      	ldr	r0, [sp]
 8002f02:      	cmp.w	r0, #0x10000
 8002f06:      	blo	#0xc <core::char::methods::<impl char>::len_utf8::h440731586c6c8566+0x34>
 8002f08:      	b	#0x4 <core::char::methods::<impl char>::len_utf8::h440731586c6c8566+0x2e>
 8002f0a:      	movs	r0, #0x2
 8002f0c:      	str	r0, [sp, #0x4]
 8002f0e:      	b	#0xc <core::char::methods::<impl char>::len_utf8::h440731586c6c8566+0x3c>
 8002f10:      	movs	r0, #0x4
 8002f12:      	str	r0, [sp, #0x4]
 8002f14:      	b	#0x4 <core::char::methods::<impl char>::len_utf8::h440731586c6c8566+0x3a>
 8002f16:      	movs	r0, #0x3
 8002f18:      	str	r0, [sp, #0x4]
 8002f1a:      	b	#-0x2 <core::char::methods::<impl char>::len_utf8::h440731586c6c8566+0x3a>
 8002f1c:      	b	#-0x2 <core::char::methods::<impl char>::len_utf8::h440731586c6c8566+0x3c>
 8002f1e:      	b	#-0x2 <core::char::methods::<impl char>::len_utf8::h440731586c6c8566+0x3e>
 8002f20:      	ldr	r0, [sp, #0x4]
 8002f22:      	add	sp, #0x10
 8002f24:      	bx	lr

08002f26 core::fmt::ArgumentV1::new::h5a1b43d6c0c3b86a:
 8002f26:      	sub	sp, #0x24
 8002f28:      	str	r0, [sp, #0x14]
 8002f2a:      	str	r1, [sp, #0x18]
 8002f2c:      	str	r1, [sp, #0x1c]
 8002f2e:      	ldr	r1, [sp, #0x1c]
 8002f30:      	str	r0, [sp, #0x8]
 8002f32:      	str	r1, [sp, #0x4]
 8002f34:      	b	#-0x2 <core::fmt::ArgumentV1::new::h5a1b43d6c0c3b86a+0x10>
 8002f36:      	ldr	r0, [sp, #0x8]
 8002f38:      	str	r0, [sp, #0x20]
 8002f3a:      	ldr	r1, [sp, #0x20]
 8002f3c:      	str	r1, [sp]
 8002f3e:      	b	#-0x2 <core::fmt::ArgumentV1::new::h5a1b43d6c0c3b86a+0x1a>
 8002f40:      	ldr	r0, [sp]
 8002f42:      	str	r0, [sp, #0xc]
 8002f44:      	ldr	r1, [sp, #0x4]
 8002f46:      	str	r1, [sp, #0x10]
 8002f48:      	ldr	r0, [sp, #0xc]
 8002f4a:      	ldr	r1, [sp, #0x10]
 8002f4c:      	add	sp, #0x24
 8002f4e:      	bx	lr

08002f50 core::str::from_utf8_unchecked_mut::h2e4547a582404b14:
 8002f50:      	sub	sp, #0x8
 8002f52:      	str	r0, [sp]
 8002f54:      	str	r1, [sp, #0x4]
 8002f56:      	add	sp, #0x8
 8002f58:      	bx	lr

08002f5a core::slice::from_raw_parts::h1956dc3bfab05ef0:
 8002f5a:      	push	{r7, lr}
 8002f5c:      	mov	r7, sp
 8002f5e:      	sub	sp, #0x10
 8002f60:      	str	r0, [sp, #0x8]
 8002f62:      	str	r1, [sp, #0xc]
 8002f64:      	bl	#-0x14ca
 8002f68:      	str	r0, [sp, #0x4]
 8002f6a:      	str	r1, [sp]
 8002f6c:      	b	#-0x2 <core::slice::from_raw_parts::h1956dc3bfab05ef0+0x14>
 8002f6e:      	ldr	r0, [sp, #0x4]
 8002f70:      	ldr	r1, [sp]
 8002f72:      	add	sp, #0x10
 8002f74:      	pop	{r7, pc}

08002f76 core::slice::from_raw_parts::h6918566b863cd2a7:
 8002f76:      	push	{r7, lr}
 8002f78:      	mov	r7, sp
 8002f7a:      	sub	sp, #0x10
 8002f7c:      	str	r0, [sp, #0x8]
 8002f7e:      	str	r1, [sp, #0xc]
 8002f80:      	bl	#-0x1500
 8002f84:      	str	r0, [sp, #0x4]
 8002f86:      	str	r1, [sp]
 8002f88:      	b	#-0x2 <core::slice::from_raw_parts::h6918566b863cd2a7+0x14>
 8002f8a:      	ldr	r0, [sp, #0x4]
 8002f8c:      	ldr	r1, [sp]
 8002f8e:      	add	sp, #0x10
 8002f90:      	pop	{r7, pc}

08002f92 core::slice::<impl [T]>::len::h1a0133ca0e7a4965:
 8002f92:      	sub	sp, #0x10
 8002f94:      	str	r0, [sp, #0x8]
 8002f96:      	str	r1, [sp, #0xc]
 8002f98:      	str	r0, [sp]
 8002f9a:      	str	r1, [sp, #0x4]
 8002f9c:      	ldr	r0, [sp, #0x4]
 8002f9e:      	add	sp, #0x10
 8002fa0:      	bx	lr

08002fa2 core::slice::<impl [T]>::len::h391b6eb5e31918dc:
 8002fa2:      	sub	sp, #0x10
 8002fa4:      	str	r0, [sp, #0x8]
 8002fa6:      	str	r1, [sp, #0xc]
 8002fa8:      	str	r0, [sp]
 8002faa:      	str	r1, [sp, #0x4]
 8002fac:      	ldr	r0, [sp, #0x4]
 8002fae:      	add	sp, #0x10
 8002fb0:      	bx	lr

08002fb2 core::slice::<impl [T]>::as_ptr::h0555345c2e2277af:
 8002fb2:      	sub	sp, #0x8
 8002fb4:      	str	r0, [sp]
 8002fb6:      	str	r1, [sp, #0x4]
 8002fb8:      	add	sp, #0x8
 8002fba:      	bx	lr

08002fbc core::slice::<impl [T]>::as_ptr::h21772c0bb4053ec2:
 8002fbc:      	sub	sp, #0x8
 8002fbe:      	str	r0, [sp]
 8002fc0:      	str	r1, [sp, #0x4]
 8002fc2:      	add	sp, #0x8
 8002fc4:      	bx	lr

08002fc6 core::slice::from_raw_parts_mut::h49eb6efde8ce5c08:
 8002fc6:      	push	{r7, lr}
 8002fc8:      	mov	r7, sp
 8002fca:      	sub	sp, #0x10
 8002fcc:      	str	r0, [sp, #0x8]
 8002fce:      	str	r1, [sp, #0xc]
 8002fd0:      	bl	#0x14c
 8002fd4:      	str	r0, [sp, #0x4]
 8002fd6:      	str	r1, [sp]
 8002fd8:      	b	#-0x2 <core::slice::from_raw_parts_mut::h49eb6efde8ce5c08+0x14>
 8002fda:      	ldr	r0, [sp, #0x4]
 8002fdc:      	ldr	r1, [sp]
 8002fde:      	add	sp, #0x10
 8002fe0:      	pop	{r7, pc}

08002fe2 core::slice::<impl [T]>::as_mut_ptr::h1e2a4ac1bc2043fc:
 8002fe2:      	sub	sp, #0x8
 8002fe4:      	str	r0, [sp]
 8002fe6:      	str	r1, [sp, #0x4]
 8002fe8:      	add	sp, #0x8
 8002fea:      	bx	lr

08002fec core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::ha7b30634bacbdc5e:
 8002fec:      	push	{r7, lr}
 8002fee:      	mov	r7, sp
 8002ff0:      	sub	sp, #0x20
 8002ff2:      	str	r0, [sp, #0x14]
 8002ff4:      	str	r1, [sp, #0x18]
 8002ff6:      	str	r2, [sp, #0x1c]
 8002ff8:      	str	r0, [sp, #0x10]
 8002ffa:      	mov	r0, r2
 8002ffc:      	ldr	r2, [sp, #0x10]
 8002ffe:      	str	r1, [sp, #0xc]
 8003000:      	mov	r1, r2
 8003002:      	ldr	r2, [sp, #0xc]
 8003004:      	bl	#0x2a
 8003008:      	str	r0, [sp, #0x8]
 800300a:      	str	r1, [sp, #0x4]
 800300c:      	b	#-0x2 <core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::ha7b30634bacbdc5e+0x22>
 800300e:      	ldr	r0, [sp, #0x8]
 8003010:      	ldr	r1, [sp, #0x4]
 8003012:      	add	sp, #0x20
 8003014:      	pop	{r7, pc}

08003016 core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::haf98e9f8e1ffc66c:
 8003016:      	push	{r7, lr}
 8003018:      	mov	r7, sp
 800301a:      	sub	sp, #0x18
 800301c:      	str	r0, [sp, #0xc]
 800301e:      	str	r1, [sp, #0x10]
 8003020:      	bl	#0x42
 8003024:      	str	r0, [sp, #0x8]
 8003026:      	str	r1, [sp, #0x4]
 8003028:      	b	#-0x2 <core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::haf98e9f8e1ffc66c+0x14>
 800302a:      	ldr	r0, [sp, #0x8]
 800302c:      	ldr	r1, [sp, #0x4]
 800302e:      	add	sp, #0x18
 8003030:      	pop	{r7, pc}

08003032 <core::ops::range::RangeTo<usize> as core::slice::SliceIndex<[T]>>::index_mut::h20b621e6c19708a7:
 8003032:      	push	{r7, lr}
 8003034:      	mov	r7, sp
 8003036:      	sub	sp, #0x28
 8003038:      	str	r0, [sp, #0x1c]
 800303a:      	str	r1, [sp, #0x20]
 800303c:      	str	r2, [sp, #0x24]
 800303e:      	movs	r3, #0x0
 8003040:      	str	r3, [sp, #0x14]
 8003042:      	str	r0, [sp, #0x18]
 8003044:      	ldr	r0, [sp, #0x14]
 8003046:      	ldr	r3, [sp, #0x18]
 8003048:      	str	r1, [sp, #0x10]
 800304a:      	mov	r1, r3
 800304c:      	ldr	r3, [sp, #0x10]
 800304e:      	str	r2, [sp, #0xc]
 8003050:      	mov	r2, r3
 8003052:      	ldr	r3, [sp, #0xc]
 8003054:      	bl	#0x5c
 8003058:      	str	r0, [sp, #0x8]
 800305a:      	str	r1, [sp, #0x4]
 800305c:      	b	#-0x2 <<core::ops::range::RangeTo<usize> as core::slice::SliceIndex<[T]>>::index_mut::h20b621e6c19708a7+0x2c>
 800305e:      	ldr	r0, [sp, #0x8]
 8003060:      	ldr	r1, [sp, #0x4]
 8003062:      	add	sp, #0x28
 8003064:      	pop	{r7, pc}

08003066 <core::ops::range::RangeFull as core::slice::SliceIndex<[T]>>::index_mut::h9e78930804845262:
 8003066:      	sub	sp, #0xc
 8003068:      	str	r0, [sp, #0x4]
 800306a:      	str	r1, [sp, #0x8]
 800306c:      	add	sp, #0xc
 800306e:      	bx	lr

08003070 <core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::get_unchecked_mut::ha4049a1dda26863a:
 8003070:      	push	{r7, lr}
 8003072:      	mov	r7, sp
 8003074:      	sub	sp, #0x28
 8003076:      	str	r0, [sp, #0x18]
 8003078:      	str	r1, [sp, #0x1c]
 800307a:      	str	r2, [sp, #0x20]
 800307c:      	str	r3, [sp, #0x24]
 800307e:      	str	r0, [sp, #0x14]
 8003080:      	mov	r0, r2
 8003082:      	str	r1, [sp, #0x10]
 8003084:      	mov	r1, r3
 8003086:      	bl	#-0xa8
 800308a:      	str	r0, [sp, #0xc]
 800308c:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::get_unchecked_mut::ha4049a1dda26863a+0x1e>
 800308e:      	ldr	r0, [sp, #0xc]
 8003090:      	ldr	r1, [sp, #0x14]
 8003092:      	bl	#-0x133c
 8003096:      	str	r0, [sp, #0x8]
 8003098:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::get_unchecked_mut::ha4049a1dda26863a+0x2a>
 800309a:      	ldr	r0, [sp, #0x10]
 800309c:      	ldr	r1, [sp, #0x14]
 800309e:      	subs	r1, r0, r1
 80030a0:      	ldr	r0, [sp, #0x8]
 80030a2:      	bl	#-0xe0
 80030a6:      	str	r0, [sp, #0x4]
 80030a8:      	str	r1, [sp]
 80030aa:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::get_unchecked_mut::ha4049a1dda26863a+0x3c>
 80030ac:      	ldr	r0, [sp, #0x4]
 80030ae:      	ldr	r1, [sp]
 80030b0:      	add	sp, #0x28
 80030b2:      	pop	{r7, pc}

080030b4 <core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::index_mut::h24a4e249fab8457c:
 80030b4:      	push	{r7, lr}
 80030b6:      	mov	r7, sp
 80030b8:      	sub	sp, #0x30
 80030ba:      	str	r0, [sp, #0x20]
 80030bc:      	str	r1, [sp, #0x24]
 80030be:      	str	r2, [sp, #0x28]
 80030c0:      	str	r3, [sp, #0x2c]
 80030c2:      	cmp	r0, r1
 80030c4:      	str	r3, [sp, #0x1c]
 80030c6:      	str	r2, [sp, #0x18]
 80030c8:      	str	r1, [sp, #0x14]
 80030ca:      	str	r0, [sp, #0x10]
 80030cc:      	bhi	#0xc <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::index_mut::h24a4e249fab8457c+0x28>
 80030ce:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::index_mut::h24a4e249fab8457c+0x1c>
 80030d0:      	ldr	r0, [sp, #0x18]
 80030d2:      	ldr	r1, [sp, #0x1c]
 80030d4:      	bl	#-0x136
 80030d8:      	str	r0, [sp, #0xc]
 80030da:      	b	#0x8 <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::index_mut::h24a4e249fab8457c+0x32>
 80030dc:      	ldr	r0, [sp, #0x10]
 80030de:      	ldr	r1, [sp, #0x14]
 80030e0:      	bl	#-0x940
 80030e4:      	trap
 80030e6:      	ldr	r0, [sp, #0x14]
 80030e8:      	ldr	r1, [sp, #0xc]
 80030ea:      	cmp	r0, r1
 80030ec:      	bhi	#0x12 <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::index_mut::h24a4e249fab8457c+0x4e>
 80030ee:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::index_mut::h24a4e249fab8457c+0x3c>
 80030f0:      	ldr	r0, [sp, #0x10]
 80030f2:      	ldr	r1, [sp, #0x14]
 80030f4:      	ldr	r2, [sp, #0x18]
 80030f6:      	ldr	r3, [sp, #0x1c]
 80030f8:      	bl	#-0x8c
 80030fc:      	str	r0, [sp, #0x8]
 80030fe:      	str	r1, [sp, #0x4]
 8003100:      	b	#0x14 <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::index_mut::h24a4e249fab8457c+0x64>
 8003102:      	ldr	r0, [sp, #0x18]
 8003104:      	ldr	r1, [sp, #0x1c]
 8003106:      	bl	#-0x168
 800310a:      	str	r0, [sp]
 800310c:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::index_mut::h24a4e249fab8457c+0x5a>
 800310e:      	ldr	r0, [sp, #0x14]
 8003110:      	ldr	r1, [sp]
 8003112:      	bl	#-0x9ba
 8003116:      	trap
 8003118:      	ldr	r0, [sp, #0x8]
 800311a:      	ldr	r1, [sp, #0x4]
 800311c:      	add	sp, #0x30
 800311e:      	pop	{r7, pc}

08003120 core::ptr::slice_from_raw_parts_mut::h223e5a527cb94728:
 8003120:      	sub	sp, #0x18
 8003122:      	str	r0, [sp, #0x10]
 8003124:      	str	r1, [sp, #0x14]
 8003126:      	str	r0, [sp, #0x8]
 8003128:      	str	r1, [sp, #0xc]
 800312a:      	ldr	r0, [sp, #0x8]
 800312c:      	ldr	r1, [sp, #0xc]
 800312e:      	str	r0, [sp]
 8003130:      	str	r1, [sp, #0x4]
 8003132:      	ldr	r0, [sp]
 8003134:      	ldr	r1, [sp, #0x4]
 8003136:      	add	sp, #0x18
 8003138:      	bx	lr

0800313a _ZN4core6result19Result$LT$T$C$E$GT$2ok17hf8f5984a2fd0aefdE:
 800313a:      	sub	sp, #0x8
 800313c:      	mov	r1, r0
 800313e:      	strb.w	r0, [sp, #0x2]
 8003142:      	ldrb.w	r0, [sp, #0x2]
 8003146:      	lsls	r2, r0, #0x1f
 8003148:      	cmp	r2, #0x0
 800314a:      	beq	#0xa <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hf8f5984a2fd0aefdE+0x1e>
 800314c:      	b	#-0x2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hf8f5984a2fd0aefdE+0x14>
 800314e:      	movs	r0, #0x0
 8003150:      	strb.w	r0, [sp, #0x3]
 8003154:      	b	#0x12 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hf8f5984a2fd0aefdE+0x30>
 8003156:      	trap
 8003158:      	movs	r0, #0x1
 800315a:      	strb.w	r0, [sp, #0x3]
 800315e:      	b	#0x8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hf8f5984a2fd0aefdE+0x30>
 8003160:      	ldrb.w	r0, [sp, #0x3]
 8003164:      	add	sp, #0x8
 8003166:      	bx	lr
 8003168:      	b	#-0xc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hf8f5984a2fd0aefdE+0x26>
 800316a:      	ldrb.w	r0, [sp, #0x2]
 800316e:      	lsls	r0, r0, #0x1f
 8003170:      	cmp	r0, #0x0
 8003172:      	beq	#-0x16 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hf8f5984a2fd0aefdE+0x26>
 8003174:      	b	#-0x10 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hf8f5984a2fd0aefdE+0x2e>

08003176 cortex_m::itm::write_words::h829b9538a0f6f760:
; unsafe fn write_words(stim: &mut Stim, bytes: &[u32]) {
 8003176:      	push	{r7, lr}
 8003178:      	mov	r7, sp
 800317a:      	sub	sp, #0x58
 800317c:      	str	r0, [sp, #0x44]
 800317e:      	str	r1, [sp, #0x48]
 8003180:      	str	r2, [sp, #0x4c]
;     let mut p = bytes.as_ptr();
 8003182:      	str	r0, [sp, #0x24]
 8003184:      	mov	r0, r1
 8003186:      	str	r1, [sp, #0x20]
 8003188:      	mov	r1, r2
 800318a:      	str	r2, [sp, #0x1c]
 800318c:      	bl	#-0x1d4
 8003190:      	str	r0, [sp, #0x28]
 8003192:      	b	#-0x2 <cortex_m::itm::write_words::h829b9538a0f6f760+0x1e>
;     for _ in 0..bytes.len() {
 8003194:      	ldr	r0, [sp, #0x20]
 8003196:      	ldr	r1, [sp, #0x1c]
 8003198:      	bl	#-0x20a
 800319c:      	str	r0, [sp, #0x18]
 800319e:      	b	#-0x2 <cortex_m::itm::write_words::h829b9538a0f6f760+0x2a>
 80031a0:      	movs	r0, #0x0
 80031a2:      	str	r0, [sp, #0x2c]
 80031a4:      	ldr	r0, [sp, #0x18]
 80031a6:      	str	r0, [sp, #0x30]
 80031a8:      	ldr	r0, [sp, #0x2c]
 80031aa:      	ldr	r1, [sp, #0x30]
 80031ac:      	bl	#0x422
 80031b0:      	str	r0, [sp, #0x14]
 80031b2:      	str	r1, [sp, #0x10]
 80031b4:      	b	#-0x2 <cortex_m::itm::write_words::h829b9538a0f6f760+0x40>
 80031b6:      	ldr	r0, [sp, #0x14]
 80031b8:      	str	r0, [sp, #0x34]
 80031ba:      	ldr	r1, [sp, #0x10]
 80031bc:      	str	r1, [sp, #0x38]
 80031be:      	b	#-0x2 <cortex_m::itm::write_words::h829b9538a0f6f760+0x4a>
 80031c0:      	add	r0, sp, #0x34
 80031c2:      	bl	#0x372
 80031c6:      	str	r1, [sp, #0x40]
 80031c8:      	str	r0, [sp, #0x3c]
 80031ca:      	b	#-0x2 <cortex_m::itm::write_words::h829b9538a0f6f760+0x56>
 80031cc:      	ldr	r0, [sp, #0x3c]
 80031ce:      	cmp	r0, #0x0
 80031d0:      	beq	#0x2 <cortex_m::itm::write_words::h829b9538a0f6f760+0x60>
 80031d2:      	b	#-0x2 <cortex_m::itm::write_words::h829b9538a0f6f760+0x5e>
 80031d4:      	b	#0x4 <cortex_m::itm::write_words::h829b9538a0f6f760+0x66>
; }
 80031d6:      	add	sp, #0x58
 80031d8:      	pop	{r7, pc}
;     for _ in 0..bytes.len() {
 80031da:      	trap
 80031dc:      	ldr	r0, [sp, #0x40]
 80031de:      	str	r0, [sp, #0x50]
 80031e0:      	str	r0, [sp, #0x54]
;         while !stim.is_fifo_ready() {}
 80031e2:      	b	#-0x2 <cortex_m::itm::write_words::h829b9538a0f6f760+0x6e>
 80031e4:      	ldr	r0, [sp, #0x24]
 80031e6:      	bl	#0x542
 80031ea:      	str	r0, [sp, #0xc]
 80031ec:      	b	#-0x2 <cortex_m::itm::write_words::h829b9538a0f6f760+0x78>
 80031ee:      	ldr	r0, [sp, #0xc]
 80031f0:      	lsls	r1, r0, #0x1f
 80031f2:      	cmp	r1, #0x0
 80031f4:      	beq	#0xa <cortex_m::itm::write_words::h829b9538a0f6f760+0x8c>
 80031f6:      	b	#-0x2 <cortex_m::itm::write_words::h829b9538a0f6f760+0x82>
;         stim.write_u32(ptr::read(p));
 80031f8:      	ldr	r0, [sp, #0x28]
 80031fa:      	bl	#-0x158e
 80031fe:      	str	r0, [sp, #0x8]
 8003200:      	b	#0x0 <cortex_m::itm::write_words::h829b9538a0f6f760+0x8e>
;         while !stim.is_fifo_ready() {}
 8003202:      	b	#-0x22 <cortex_m::itm::write_words::h829b9538a0f6f760+0x6e>
;         stim.write_u32(ptr::read(p));
 8003204:      	ldr	r0, [sp, #0x24]
 8003206:      	ldr	r1, [sp, #0x8]
 8003208:      	bl	#0x4fe
 800320c:      	b	#-0x2 <cortex_m::itm::write_words::h829b9538a0f6f760+0x98>
;         p = p.offset(1);
 800320e:      	ldr	r0, [sp, #0x28]
 8003210:      	movs	r1, #0x1
 8003212:      	bl	#0x2f4
 8003216:      	str	r0, [sp, #0x4]
 8003218:      	b	#-0x2 <cortex_m::itm::write_words::h829b9538a0f6f760+0xa4>
 800321a:      	ldr	r0, [sp, #0x4]
 800321c:      	str	r0, [sp, #0x28]
;     for _ in 0..bytes.len() {
 800321e:      	b	#-0x62 <cortex_m::itm::write_words::h829b9538a0f6f760+0x4a>

08003220 cortex_m::itm::write_all::h06372f667cf6c9b8:
; pub fn write_all(port: &mut Stim, buffer: &[u8]) {
 8003220:      	push	{r7, lr}
 8003222:      	mov	r7, sp
 8003224:      	sub	sp, #0x58
 8003226:      	str	r0, [sp, #0x44]
 8003228:      	str	r1, [sp, #0x48]
 800322a:      	str	r2, [sp, #0x4c]
;         let mut len = buffer.len();
 800322c:      	str	r0, [sp, #0x38]
 800322e:      	mov	r0, r1
 8003230:      	str	r1, [sp, #0x34]
 8003232:      	mov	r1, r2
 8003234:      	str	r2, [sp, #0x30]
 8003236:      	bl	#-0x298
 800323a:      	str	r0, [sp, #0x3c]
 800323c:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x1e>
;         let mut ptr = buffer.as_ptr();
 800323e:      	ldr	r0, [sp, #0x34]
 8003240:      	ldr	r1, [sp, #0x30]
 8003242:      	bl	#-0x294
 8003246:      	str	r0, [sp, #0x40]
 8003248:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x2a>
;         if len == 0 {
 800324a:      	ldr	r0, [sp, #0x3c]
 800324c:      	cmp	r0, #0x0
 800324e:      	beq	#0xc <cortex_m::itm::write_all::h06372f667cf6c9b8+0x3e>
 8003250:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x32>
;         if ptr as usize % 2 == 1 {
 8003252:      	ldrb.w	r0, [sp, #0x40]
 8003256:      	lsls	r0, r0, #0x1f
 8003258:      	cmp	r0, #0x0
 800325a:      	bne	#0x8 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x46>
 800325c:      	b	#0x4c <cortex_m::itm::write_all::h06372f667cf6c9b8+0x8c>
;             return;
 800325e:      	b	#0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x44>
; }
 8003260:      	add	sp, #0x58
 8003262:      	pop	{r7, pc}
;             return;
 8003264:      	b	#-0x8 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x40>
;             while !port.is_fifo_ready() {}
 8003266:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x48>
 8003268:      	ldr	r0, [sp, #0x38]
 800326a:      	bl	#0x4be
 800326e:      	str	r0, [sp, #0x2c]
 8003270:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x52>
 8003272:      	ldr	r0, [sp, #0x2c]
 8003274:      	lsls	r1, r0, #0x1f
 8003276:      	cmp	r1, #0x0
 8003278:      	beq	#0xc <cortex_m::itm::write_all::h06372f667cf6c9b8+0x68>
 800327a:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x5c>
;             port.write_u8(*ptr);
 800327c:      	ldr	r0, [sp, #0x40]
 800327e:      	ldrb	r1, [r0]
 8003280:      	ldr	r0, [sp, #0x38]
 8003282:      	bl	#0x438
 8003286:      	b	#0x0 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x6a>
;             while !port.is_fifo_ready() {}
 8003288:      	b	#-0x24 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x48>
;             ptr = ptr.offset(1);
 800328a:      	ldr	r0, [sp, #0x40]
 800328c:      	movs	r1, #0x1
 800328e:      	bl	#0x290
 8003292:      	str	r0, [sp, #0x28]
 8003294:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x76>
 8003296:      	ldr	r0, [sp, #0x28]
 8003298:      	str	r0, [sp, #0x40]
;             len -= 1;
 800329a:      	ldr	r1, [sp, #0x3c]
 800329c:      	subs	r2, r1, #0x1
 800329e:      	cmp	r1, #0x1
 80032a0:      	str	r2, [sp, #0x24]
 80032a2:      	blo	#0xc6 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x14c>
 80032a4:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x86>
 80032a6:      	ldr	r0, [sp, #0x24]
 80032a8:      	str	r0, [sp, #0x3c]
;         if ptr as usize % 2 == 1 {
 80032aa:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x8c>
;         if ptr as usize % 4 == 2 {
 80032ac:      	ldr	r0, [sp, #0x40]
 80032ae:      	and	r0, r0, #0x3
 80032b2:      	cmp	r0, #0x2
 80032b4:      	bne	#0x86 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x11e>
 80032b6:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x98>
;             if len > 1 {
 80032b8:      	ldr	r0, [sp, #0x3c]
 80032ba:      	cmp	r0, #0x1
 80032bc:      	bhi	#0x8 <cortex_m::itm::write_all::h06372f667cf6c9b8+0xa8>
 80032be:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0xa0>
;                 if len == 1 {
 80032c0:      	ldr	r0, [sp, #0x3c]
 80032c2:      	cmp	r0, #0x1
 80032c4:      	beq	#0x4e <cortex_m::itm::write_all::h06372f667cf6c9b8+0xf6>
 80032c6:      	b	#0x72 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x11c>
;                 while !port.is_fifo_ready() {}
 80032c8:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0xaa>
 80032ca:      	ldr	r0, [sp, #0x38]
 80032cc:      	bl	#0x45c
 80032d0:      	str	r0, [sp, #0x20]
 80032d2:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0xb4>
 80032d4:      	ldr	r0, [sp, #0x20]
 80032d6:      	lsls	r1, r0, #0x1f
 80032d8:      	cmp	r1, #0x0
 80032da:      	beq	#0xa <cortex_m::itm::write_all::h06372f667cf6c9b8+0xc8>
 80032dc:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0xbe>
;                 port.write_u16(ptr::read(ptr as *const u16));
 80032de:      	ldr	r0, [sp, #0x40]
 80032e0:      	bl	#-0x16b8
 80032e4:      	str	r0, [sp, #0x1c]
 80032e6:      	b	#0x0 <cortex_m::itm::write_all::h06372f667cf6c9b8+0xca>
;                 while !port.is_fifo_ready() {}
 80032e8:      	b	#-0x22 <cortex_m::itm::write_all::h06372f667cf6c9b8+0xaa>
;                 port.write_u16(ptr::read(ptr as *const u16));
 80032ea:      	ldr	r0, [sp, #0x38]
 80032ec:      	ldr	r1, [sp, #0x1c]
 80032ee:      	bl	#0x3f2
 80032f2:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0xd4>
;                 ptr = ptr.offset(2);
 80032f4:      	ldr	r0, [sp, #0x40]
 80032f6:      	movs	r1, #0x2
 80032f8:      	bl	#0x226
 80032fc:      	str	r0, [sp, #0x18]
 80032fe:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0xe0>
 8003300:      	ldr	r0, [sp, #0x18]
 8003302:      	str	r0, [sp, #0x40]
;                 len -= 2;
 8003304:      	ldr	r1, [sp, #0x3c]
 8003306:      	subs	r2, r1, #0x2
 8003308:      	cmp	r1, #0x2
 800330a:      	str	r2, [sp, #0x14]
 800330c:      	blo	#0x74 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x164>
 800330e:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0xf0>
 8003310:      	ldr	r0, [sp, #0x14]
 8003312:      	str	r0, [sp, #0x3c]
;         if ptr as usize % 4 == 2 {
 8003314:      	b	#0x26 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x11e>
;                     while !port.is_fifo_ready() {}
 8003316:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0xf8>
 8003318:      	ldr	r0, [sp, #0x38]
 800331a:      	bl	#0x40e
 800331e:      	str	r0, [sp, #0x10]
 8003320:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x102>
 8003322:      	ldr	r0, [sp, #0x10]
 8003324:      	lsls	r1, r0, #0x1f
 8003326:      	cmp	r1, #0x0
 8003328:      	beq	#0xc <cortex_m::itm::write_all::h06372f667cf6c9b8+0x118>
 800332a:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x10c>
;                     port.write_u8(*ptr);
 800332c:      	ldr	r0, [sp, #0x40]
 800332e:      	ldrb	r1, [r0]
 8003330:      	ldr	r0, [sp, #0x38]
 8003332:      	bl	#0x388
 8003336:      	b	#0x0 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x11a>
;                     while !port.is_fifo_ready() {}
 8003338:      	b	#-0x24 <cortex_m::itm::write_all::h06372f667cf6c9b8+0xf8>
;                 if len == 1 {
 800333a:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x11c>
;                 return;
 800333c:      	b	#-0xdc <cortex_m::itm::write_all::h06372f667cf6c9b8+0x44>
;         write_aligned(port, mem::transmute(slice::from_raw_parts(ptr, len)));
 800333e:      	ldr	r0, [sp, #0x40]
 8003340:      	ldr	r1, [sp, #0x3c]
 8003342:      	bl	#-0x3d0
 8003346:      	str	r0, [sp, #0xc]
 8003348:      	str	r1, [sp, #0x8]
 800334a:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x12c>
 800334c:      	ldr	r0, [sp, #0xc]
 800334e:      	str	r0, [sp, #0x50]
 8003350:      	ldr	r1, [sp, #0x8]
 8003352:      	str	r1, [sp, #0x54]
 8003354:      	ldr	r1, [sp, #0x50]
 8003356:      	ldr	r2, [sp, #0x54]
 8003358:      	str	r1, [sp, #0x4]
 800335a:      	str	r2, [sp]
 800335c:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x13e>
 800335e:      	ldr	r0, [sp, #0x38]
 8003360:      	ldr	r1, [sp, #0x4]
 8003362:      	ldr	r2, [sp]
 8003364:      	bl	#0x34
 8003368:      	b	#-0x2 <cortex_m::itm::write_all::h06372f667cf6c9b8+0x14a>
; }
 800336a:      	b	#-0x10e <cortex_m::itm::write_all::h06372f667cf6c9b8+0x40>
;             len -= 1;
 800336c:      	movw	r0, #0x4010
 8003370:      	movt	r0, #0x800
 8003374:      	movw	r2, #0x4000
 8003378:      	movt	r2, #0x800
 800337c:      	movs	r1, #0x21
 800337e:      	bl	#-0x14a2
 8003382:      	trap
;                 len -= 2;
 8003384:      	movw	r0, #0x4010
 8003388:      	movt	r0, #0x800
 800338c:      	movw	r2, #0x4034
 8003390:      	movt	r2, #0x800
 8003394:      	movs	r1, #0x21
 8003396:      	bl	#-0x14ba
 800339a:      	trap

0800339c cortex_m::itm::write_aligned::had7e0831f24446a7:
; pub fn write_aligned(port: &mut Stim, buffer: &Aligned<A4, [u8]>) {
 800339c:      	push	{r7, lr}
 800339e:      	mov	r7, sp
 80033a0:      	sub	sp, #0x78
 80033a2:      	str	r0, [sp, #0x64]
 80033a4:      	str	r1, [sp, #0x68]
 80033a6:      	str	r2, [sp, #0x6c]
;         let len = buffer.len();
 80033a8:      	str	r0, [sp, #0x58]
 80033aa:      	mov	r0, r1
 80033ac:      	str	r1, [sp, #0x54]
 80033ae:      	mov	r1, r2
 80033b0:      	str	r2, [sp, #0x50]
 80033b2:      	bl	#-0x15ee
 80033b6:      	str	r0, [sp, #0x4c]
 80033b8:      	str	r1, [sp, #0x48]
 80033ba:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x20>
 80033bc:      	ldr	r0, [sp, #0x4c]
 80033be:      	ldr	r1, [sp, #0x48]
 80033c0:      	bl	#-0x422
 80033c4:      	mov	r1, r0
 80033c6:      	str	r0, [sp, #0x70]
 80033c8:      	str	r1, [sp, #0x44]
 80033ca:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x30>
;         if len == 0 {
 80033cc:      	ldr	r0, [sp, #0x44]
 80033ce:      	cmp	r0, #0x0
 80033d0:      	beq	#0x1a <cortex_m::itm::write_aligned::had7e0831f24446a7+0x52>
 80033d2:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x38>
;         let split = len & !0b11;
 80033d4:      	ldr	r0, [sp, #0x44]
 80033d6:      	bic	r1, r0, #0x3
 80033da:      	mov	r2, r1
 80033dc:      	str	r1, [sp, #0x74]
;             slice::from_raw_parts(buffer.as_ptr() as *const u32, split >> 2),
 80033de:      	ldr	r0, [sp, #0x54]
 80033e0:      	ldr	r1, [sp, #0x50]
 80033e2:      	str	r2, [sp, #0x40]
 80033e4:      	bl	#-0x1620
 80033e8:      	str	r0, [sp, #0x3c]
 80033ea:      	str	r1, [sp, #0x38]
 80033ec:      	b	#0x4 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x58>
;             return;
 80033ee:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x54>
; }
 80033f0:      	add	sp, #0x78
 80033f2:      	pop	{r7, pc}
;             slice::from_raw_parts(buffer.as_ptr() as *const u32, split >> 2),
 80033f4:      	ldr	r0, [sp, #0x3c]
 80033f6:      	ldr	r1, [sp, #0x38]
 80033f8:      	bl	#-0x44a
 80033fc:      	str	r0, [sp, #0x34]
 80033fe:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x64>
 8003400:      	ldr	r0, [sp, #0x34]
 8003402:      	ldr	r1, [sp, #0x40]
 8003404:      	lsrs	r2, r1, #0x2
 8003406:      	str	r0, [sp, #0x30]
 8003408:      	str	r2, [sp, #0x2c]
 800340a:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x70>
 800340c:      	ldr	r0, [sp, #0x30]
 800340e:      	ldr	r1, [sp, #0x2c]
 8003410:      	bl	#-0x4ba
 8003414:      	str	r0, [sp, #0x28]
 8003416:      	str	r1, [sp, #0x24]
 8003418:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x7e>
;         write_words(
 800341a:      	ldr	r0, [sp, #0x58]
 800341c:      	ldr	r1, [sp, #0x28]
 800341e:      	ldr	r2, [sp, #0x24]
 8003420:      	bl	#-0x2ae
 8003424:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x8a>
;         let mut left = len & 0b11;
 8003426:      	ldr	r0, [sp, #0x44]
 8003428:      	and	r1, r0, #0x3
 800342c:      	str	r1, [sp, #0x5c]
;         let mut ptr = buffer.as_ptr().add(split);
 800342e:      	ldr	r0, [sp, #0x54]
 8003430:      	ldr	r1, [sp, #0x50]
 8003432:      	bl	#-0x166e
 8003436:      	str	r0, [sp, #0x20]
 8003438:      	str	r1, [sp, #0x1c]
 800343a:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0xa0>
 800343c:      	ldr	r0, [sp, #0x20]
 800343e:      	ldr	r1, [sp, #0x1c]
 8003440:      	bl	#-0x492
 8003444:      	str	r0, [sp, #0x18]
 8003446:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0xac>
 8003448:      	ldr	r0, [sp, #0x18]
 800344a:      	ldr	r1, [sp, #0x40]
 800344c:      	bl	#0xa2
 8003450:      	str	r0, [sp, #0x60]
 8003452:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0xb8>
;         if left > 1 {
 8003454:      	ldr	r0, [sp, #0x5c]
 8003456:      	cmp	r0, #0x2
 8003458:      	blo	#0x4e <cortex_m::itm::write_aligned::had7e0831f24446a7+0x10e>
 800345a:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0xc0>
;             while !port.is_fifo_ready() {}
 800345c:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0xc2>
 800345e:      	ldr	r0, [sp, #0x58]
 8003460:      	bl	#0x2c8
 8003464:      	str	r0, [sp, #0x14]
 8003466:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0xcc>
 8003468:      	ldr	r0, [sp, #0x14]
 800346a:      	lsls	r1, r0, #0x1f
 800346c:      	cmp	r1, #0x0
 800346e:      	beq	#0xa <cortex_m::itm::write_aligned::had7e0831f24446a7+0xe0>
 8003470:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0xd6>
;             port.write_u16(ptr::read(ptr as *const u16));
 8003472:      	ldr	r0, [sp, #0x60]
 8003474:      	bl	#-0x184c
 8003478:      	str	r0, [sp, #0x10]
 800347a:      	b	#0x0 <cortex_m::itm::write_aligned::had7e0831f24446a7+0xe2>
;             while !port.is_fifo_ready() {}
 800347c:      	b	#-0x22 <cortex_m::itm::write_aligned::had7e0831f24446a7+0xc2>
;             port.write_u16(ptr::read(ptr as *const u16));
 800347e:      	ldr	r0, [sp, #0x58]
 8003480:      	ldr	r1, [sp, #0x10]
 8003482:      	bl	#0x25e
 8003486:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0xec>
;             ptr = ptr.offset(2);
 8003488:      	ldr	r0, [sp, #0x60]
 800348a:      	movs	r1, #0x2
 800348c:      	bl	#0x92
 8003490:      	str	r0, [sp, #0xc]
 8003492:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0xf8>
 8003494:      	ldr	r0, [sp, #0xc]
 8003496:      	str	r0, [sp, #0x60]
;             left -= 2;
 8003498:      	ldr	r1, [sp, #0x5c]
 800349a:      	subs	r2, r1, #0x2
 800349c:      	cmp	r1, #0x2
 800349e:      	str	r2, [sp, #0x8]
 80034a0:      	blo	#0x36 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x13e>
 80034a2:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x108>
 80034a4:      	ldr	r0, [sp, #0x8]
 80034a6:      	str	r0, [sp, #0x5c]
;         if left > 1 {
 80034a8:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x10e>
;         if left == 1 {
 80034aa:      	ldr	r0, [sp, #0x5c]
 80034ac:      	cmp	r0, #0x1
 80034ae:      	bne	#0x26 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x13c>
 80034b0:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x116>
;             while !port.is_fifo_ready() {}
 80034b2:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x118>
 80034b4:      	ldr	r0, [sp, #0x58]
 80034b6:      	bl	#0x272
 80034ba:      	str	r0, [sp, #0x4]
 80034bc:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x122>
 80034be:      	ldr	r0, [sp, #0x4]
 80034c0:      	lsls	r1, r0, #0x1f
 80034c2:      	cmp	r1, #0x0
 80034c4:      	beq	#0xc <cortex_m::itm::write_aligned::had7e0831f24446a7+0x138>
 80034c6:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x12c>
;             port.write_u8(*ptr);
 80034c8:      	ldr	r0, [sp, #0x60]
 80034ca:      	ldrb	r1, [r0]
 80034cc:      	ldr	r0, [sp, #0x58]
 80034ce:      	bl	#0x1ec
 80034d2:      	b	#0x0 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x13a>
;             while !port.is_fifo_ready() {}
 80034d4:      	b	#-0x24 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x118>
;         if left == 1 {
 80034d6:      	b	#-0x2 <cortex_m::itm::write_aligned::had7e0831f24446a7+0x13c>
; }
 80034d8:      	b	#-0xec <cortex_m::itm::write_aligned::had7e0831f24446a7+0x54>
;             left -= 2;
 80034da:      	movw	r0, #0x4010
 80034de:      	movt	r0, #0x800
 80034e2:      	movw	r2, #0x4044
 80034e6:      	movt	r2, #0x800
 80034ea:      	movs	r1, #0x21
 80034ec:      	bl	#-0x1610
 80034f0:      	trap

080034f2 core::ptr::const_ptr::<impl *const T>::add::h0cc215d5f9e6e32d:
 80034f2:      	push	{r7, lr}
 80034f4:      	mov	r7, sp
 80034f6:      	sub	sp, #0x10
 80034f8:      	str	r0, [sp, #0x8]
 80034fa:      	str	r1, [sp, #0xc]
 80034fc:      	bl	#0x22
 8003500:      	str	r0, [sp, #0x4]
 8003502:      	b	#-0x2 <core::ptr::const_ptr::<impl *const T>::add::h0cc215d5f9e6e32d+0x12>
 8003504:      	ldr	r0, [sp, #0x4]
 8003506:      	add	sp, #0x10
 8003508:      	pop	{r7, pc}

0800350a core::ptr::const_ptr::<impl *const T>::offset::he4a515a930bf73dd:
 800350a:      	sub	sp, #0x10
 800350c:      	str	r0, [sp, #0x4]
 800350e:      	str	r1, [sp, #0x8]
 8003510:      	add.w	r0, r0, r1, lsl #2
 8003514:      	str	r0, [sp, #0xc]
 8003516:      	ldr	r0, [sp, #0xc]
 8003518:      	str	r0, [sp]
 800351a:      	b	#-0x2 <core::ptr::const_ptr::<impl *const T>::offset::he4a515a930bf73dd+0x12>
 800351c:      	ldr	r0, [sp]
 800351e:      	add	sp, #0x10
 8003520:      	bx	lr

08003522 core::ptr::const_ptr::<impl *const T>::offset::hfa8a039940682ae4:
 8003522:      	sub	sp, #0x10
 8003524:      	str	r0, [sp, #0x4]
 8003526:      	str	r1, [sp, #0x8]
 8003528:      	add	r0, r1
 800352a:      	str	r0, [sp, #0xc]
 800352c:      	ldr	r0, [sp, #0xc]
 800352e:      	str	r0, [sp]
 8003530:      	b	#-0x2 <core::ptr::const_ptr::<impl *const T>::offset::hfa8a039940682ae4+0x10>
 8003532:      	ldr	r0, [sp]
 8003534:      	add	sp, #0x10
 8003536:      	bx	lr

08003538 core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee:
 8003538:      	push	{r7, lr}
 800353a:      	mov	r7, sp
 800353c:      	sub	sp, #0x28
 800353e:      	str	r0, [sp, #0x24]
 8003540:      	movs	r1, #0x0
 8003542:      	strb	r1, [r7, #-5]
 8003546:      	adds	r1, r0, #0x4
 8003548:      	str	r0, [sp, #0x8]
 800354a:      	bl	#0xc4
 800354e:      	str	r0, [sp, #0x4]
 8003550:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x1a>
 8003552:      	ldr	r0, [sp, #0x4]
 8003554:      	lsls	r1, r0, #0x1f
 8003556:      	cmp	r1, #0x0
 8003558:      	bne	#0x6 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x2a>
 800355a:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x24>
 800355c:      	movs	r0, #0x0
 800355e:      	str	r0, [sp, #0xc]
 8003560:      	b	#0x42 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x6e>
 8003562:      	movs	r0, #0x1
 8003564:      	strb	r0, [r7, #-5]
 8003568:      	ldr	r1, [sp, #0x8]
 800356a:      	str	r0, [sp]
 800356c:      	mov	r0, r1
 800356e:      	ldr	r1, [sp]
 8003570:      	bl	#0x68
 8003574:      	str	r1, [sp, #0x18]
 8003576:      	str	r0, [sp, #0x14]
 8003578:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x42>
 800357a:      	ldr	r0, [sp, #0x14]
 800357c:      	cmp	r0, #0x1
 800357e:      	beq	#0x6 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x50>
 8003580:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x4a>
 8003582:      	movs	r0, #0x0
 8003584:      	str	r0, [sp, #0xc]
 8003586:      	b	#0x40 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x92>
 8003588:      	movs	r0, #0x0
 800358a:      	strb	r0, [r7, #-5]
 800358e:      	ldr	r0, [sp, #0x18]
 8003590:      	str	r0, [sp, #0x1c]
 8003592:      	add	r0, sp, #0x1c
 8003594:      	ldr	r1, [sp, #0x8]
 8003596:      	bl	#0x90
 800359a:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x64>
 800359c:      	ldr	r0, [sp, #0x1c]
 800359e:      	str	r0, [sp, #0x10]
 80035a0:      	movs	r0, #0x1
 80035a2:      	str	r0, [sp, #0xc]
 80035a4:      	b	#0x22 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x92>
 80035a6:      	ldr	r0, [sp, #0xc]
 80035a8:      	ldr	r1, [sp, #0x10]
 80035aa:      	add	sp, #0x28
 80035ac:      	pop	{r7, pc}
 80035ae:      	movs	r0, #0x0
 80035b0:      	strb	r0, [r7, #-5]
 80035b4:      	b	#-0x12 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x6e>
 80035b6:      	ldrb	r0, [r7, #-5]
 80035ba:      	lsls	r0, r0, #0x1f
 80035bc:      	cmp	r0, #0x0
 80035be:      	beq	#-0x14 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x76>
 80035c0:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x8a>
 80035c2:      	movs	r0, #0x0
 80035c4:      	strb	r0, [r7, #-5]
 80035c8:      	b	#-0x1e <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x76>
 80035ca:      	ldr	r0, [sp, #0x14]
 80035cc:      	cmp	r0, #0x1
 80035ce:      	beq	#-0x1c <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x7e>
 80035d0:      	b	#-0x26 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h8e3c6c15a59f1cee+0x76>

080035d2 <I as core::iter::traits::collect::IntoIterator>::into_iter::h87224544603f2f65:
 80035d2:      	sub	sp, #0x8
 80035d4:      	str	r0, [sp]
 80035d6:      	str	r1, [sp, #0x4]
 80035d8:      	add	sp, #0x8
 80035da:      	bx	lr

080035dc <usize as core::iter::range::Step>::add_usize::h8d010e3b789edbec:
 80035dc:      	push	{r7, lr}
 80035de:      	mov	r7, sp
 80035e0:      	sub	sp, #0x20
 80035e2:      	str	r0, [sp, #0x14]
 80035e4:      	str	r1, [sp, #0x18]
 80035e6:      	str	r0, [sp, #0xc]
 80035e8:      	mov	r0, r1
 80035ea:      	bl	#-0x1840
 80035ee:      	str	r0, [sp, #0x10]
 80035f0:      	b	#-0x2 <<usize as core::iter::range::Step>::add_usize::h8d010e3b789edbec+0x16>
 80035f2:      	ldr	r0, [sp, #0x10]
 80035f4:      	str	r0, [sp, #0x1c]
 80035f6:      	ldr	r1, [sp, #0xc]
 80035f8:      	ldr	r2, [r1]
 80035fa:      	str	r0, [sp, #0x8]
 80035fc:      	mov	r0, r2
 80035fe:      	ldr	r1, [sp, #0x8]
 8003600:      	bl	#0x3a
 8003604:      	str	r0, [sp, #0x4]
 8003606:      	str	r1, [sp]
 8003608:      	b	#-0x2 <<usize as core::iter::range::Step>::add_usize::h8d010e3b789edbec+0x2e>
 800360a:      	ldr	r0, [sp, #0x4]
 800360c:      	ldr	r1, [sp]
 800360e:      	add	sp, #0x20
 8003610:      	pop	{r7, pc}

08003612 core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt::h387557bac39c25e4:
 8003612:      	sub	sp, #0x8
 8003614:      	str	r0, [sp]
 8003616:      	str	r1, [sp, #0x4]
 8003618:      	ldr	r0, [r0]
 800361a:      	ldr	r1, [r1]
 800361c:      	movs	r2, #0x0
 800361e:      	cmp	r0, r1
 8003620:      	it	lo
 8003622:      	movlo	r2, #0x1
 8003624:      	mov	r0, r2
 8003626:      	add	sp, #0x8
 8003628:      	bx	lr

0800362a core::mem::swap::had82cff94629a035:
 800362a:      	push	{r7, lr}
 800362c:      	mov	r7, sp
 800362e:      	sub	sp, #0x8
 8003630:      	str	r0, [sp]
 8003632:      	str	r1, [sp, #0x4]
 8003634:      	bl	#-0x1b80
 8003638:      	b	#-0x2 <core::mem::swap::had82cff94629a035+0x10>
 800363a:      	add	sp, #0x8
 800363c:      	pop	{r7, pc}

0800363e core::num::<impl usize>::checked_add::hd073784e594ec248:
 800363e:      	push	{r7, lr}
 8003640:      	mov	r7, sp
 8003642:      	sub	sp, #0x20
 8003644:      	str	r0, [sp, #0x10]
 8003646:      	str	r1, [sp, #0x14]
 8003648:      	bl	#0x32
 800364c:      	str	r0, [sp, #0x4]
 800364e:      	str	r1, [sp]
 8003650:      	b	#-0x2 <core::num::<impl usize>::checked_add::hd073784e594ec248+0x14>
 8003652:      	ldr	r0, [sp, #0x4]
 8003654:      	str	r0, [sp, #0x18]
 8003656:      	ldr	r1, [sp]
 8003658:      	and	r2, r1, #0x1
 800365c:      	strb	r2, [r7, #-1]
 8003660:      	cmp	r2, #0x0
 8003662:      	bne	#0xa <core::num::<impl usize>::checked_add::hd073784e594ec248+0x32>
 8003664:      	b	#-0x2 <core::num::<impl usize>::checked_add::hd073784e594ec248+0x28>
 8003666:      	ldr	r0, [sp, #0x4]
 8003668:      	str	r0, [sp, #0xc]
 800366a:      	movs	r1, #0x1
 800366c:      	str	r1, [sp, #0x8]
 800366e:      	b	#0x4 <core::num::<impl usize>::checked_add::hd073784e594ec248+0x38>
 8003670:      	movs	r0, #0x0
 8003672:      	str	r0, [sp, #0x8]
 8003674:      	b	#-0x2 <core::num::<impl usize>::checked_add::hd073784e594ec248+0x38>
 8003676:      	ldr	r0, [sp, #0x8]
 8003678:      	ldr	r1, [sp, #0xc]
 800367a:      	add	sp, #0x20
 800367c:      	pop	{r7, pc}

0800367e core::num::<impl usize>::overflowing_add::h2a21b58e43208099:
 800367e:      	sub	sp, #0x28
 8003680:      	str	r0, [sp, #0x10]
 8003682:      	str	r1, [sp, #0x14]
 8003684:      	adds	r0, r0, r1
 8003686:      	mov.w	r1, #0x0
 800368a:      	adc	r1, r1, #0x0
 800368e:      	str	r0, [sp, #0x18]
 8003690:      	strb.w	r1, [sp, #0x1c]
 8003694:      	ldr	r0, [sp, #0x18]
 8003696:      	ldrb.w	r1, [sp, #0x1c]
 800369a:      	str	r0, [sp, #0x4]
 800369c:      	str	r1, [sp]
 800369e:      	b	#-0x2 <core::num::<impl usize>::overflowing_add::h2a21b58e43208099+0x22>
 80036a0:      	ldr	r0, [sp, #0x4]
 80036a2:      	str	r0, [sp, #0x20]
 80036a4:      	ldr	r1, [sp]
 80036a6:      	and	r2, r1, #0x1
 80036aa:      	strb.w	r2, [sp, #0x27]
 80036ae:      	str	r0, [sp, #0x8]
 80036b0:      	strb.w	r2, [sp, #0xc]
 80036b4:      	ldr	r0, [sp, #0x8]
 80036b6:      	ldrb.w	r1, [sp, #0xc]
 80036ba:      	add	sp, #0x28
 80036bc:      	bx	lr

080036be cortex_m::peripheral::itm::Stim::write_u8::hada40f462db076c4:
;     pub fn write_u8(&mut self, value: u8) {
 80036be:      	push	{r7, lr}
 80036c0:      	mov	r7, sp
 80036c2:      	sub	sp, #0x10
 80036c4:      	mov	r2, r1
 80036c6:      	str	r0, [sp, #0x8]
 80036c8:      	strb	r1, [r7, #-1]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u8, value) }
 80036cc:      	str	r2, [sp, #0x4]
 80036ce:      	bl	#-0x194a
 80036d2:      	str	r0, [sp]
 80036d4:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u8::hada40f462db076c4+0x18>
 80036d6:      	ldr	r0, [sp]
 80036d8:      	ldr	r1, [sp, #0x4]
 80036da:      	bl	#-0x1cba
 80036de:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u8::hada40f462db076c4+0x22>
;     }
 80036e0:      	add	sp, #0x10
 80036e2:      	pop	{r7, pc}

080036e4 cortex_m::peripheral::itm::Stim::write_u16::h9afa4031f37a8997:
;     pub fn write_u16(&mut self, value: u16) {
 80036e4:      	push	{r7, lr}
 80036e6:      	mov	r7, sp
 80036e8:      	sub	sp, #0x10
 80036ea:      	mov	r2, r1
 80036ec:      	str	r0, [sp, #0x8]
 80036ee:      	strh	r1, [r7, #-2]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u16, value) }
 80036f2:      	str	r2, [sp, #0x4]
 80036f4:      	bl	#-0x1970
 80036f8:      	str	r0, [sp]
 80036fa:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u16::h9afa4031f37a8997+0x18>
 80036fc:      	ldr	r0, [sp]
 80036fe:      	ldr	r1, [sp, #0x4]
 8003700:      	bl	#-0x1cce
 8003704:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u16::h9afa4031f37a8997+0x22>
;     }
 8003706:      	add	sp, #0x10
 8003708:      	pop	{r7, pc}

0800370a cortex_m::peripheral::itm::Stim::write_u32::hfe53fd1dc61f5285:
;     pub fn write_u32(&mut self, value: u32) {
 800370a:      	push	{r7, lr}
 800370c:      	mov	r7, sp
 800370e:      	sub	sp, #0x10
 8003710:      	str	r0, [sp, #0x8]
 8003712:      	str	r1, [sp, #0xc]
;         unsafe { ptr::write_volatile(self.register.get(), value) }
 8003714:      	str	r1, [sp, #0x4]
 8003716:      	bl	#-0x1992
 800371a:      	str	r0, [sp]
 800371c:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u32::hfe53fd1dc61f5285+0x14>
 800371e:      	ldr	r0, [sp]
 8003720:      	ldr	r1, [sp, #0x4]
 8003722:      	bl	#-0x1d10
 8003726:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u32::hfe53fd1dc61f5285+0x1e>
;     }
 8003728:      	add	sp, #0x10
 800372a:      	pop	{r7, pc}

0800372c cortex_m::peripheral::itm::Stim::is_fifo_ready::h1e357e70d7d2bbe9:
;     pub fn is_fifo_ready(&self) -> bool {
 800372c:      	push	{r7, lr}
 800372e:      	mov	r7, sp
 8003730:      	sub	sp, #0x10
 8003732:      	str	r0, [sp, #0xc]
;         unsafe { ptr::read_volatile(self.register.get()) & 0b1 == 1 }
 8003734:      	bl	#-0x19b0
 8003738:      	str	r0, [sp, #0x8]
 800373a:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h1e357e70d7d2bbe9+0x10>
 800373c:      	ldr	r0, [sp, #0x8]
 800373e:      	bl	#-0x1d40
 8003742:      	str	r0, [sp, #0x4]
 8003744:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h1e357e70d7d2bbe9+0x1a>
;     }
 8003746:      	ldr	r0, [sp, #0x4]
 8003748:      	and	r0, r0, #0x1
 800374c:      	add	sp, #0x10
 800374e:      	pop	{r7, pc}

08003750 cortex_m::interrupt::disable::h0e32173f8bee6063:
; pub fn disable() {
 8003750:      	push	{r7, lr}
 8003752:      	mov	r7, sp
;             __cpsid();
 8003754:      	bl	#-0x1d64
 8003758:      	b	#-0x2 <cortex_m::interrupt::disable::h0e32173f8bee6063+0xa>
; }
 800375a:      	pop	{r7, pc}

0800375c __aeabi_memcpy:
 800375c:      	push	{r4, r5, r6, r7, lr}
 800375e:      	add	r7, sp, #0xc
 8003760:      	str	r8, [sp, #-4]!
 8003764:      	cbz	r2, #0x68
 8003766:      	subs	r3, r2, #0x1
 8003768:      	and	r12, r2, #0x3
 800376c:      	cmp	r3, #0x3
 800376e:      	bhs	#0x28 <__aeabi_memcpy+0x3e>
 8003770:      	movs	r2, #0x0
 8003772:      	cmp.w	r12, #0x0
 8003776:      	beq	#0x56 <__aeabi_memcpy+0x74>
 8003778:      	ldrb	r3, [r1, r2]
 800377a:      	cmp.w	r12, #0x1
 800377e:      	strb	r3, [r0, r2]
 8003780:      	beq	#0x4c <__aeabi_memcpy+0x74>
 8003782:      	adds	r3, r2, #0x1
 8003784:      	cmp.w	r12, #0x2
 8003788:      	ldrb	r6, [r1, r3]
 800378a:      	strb	r6, [r0, r3]
 800378c:      	beq	#0x40 <__aeabi_memcpy+0x74>
 800378e:      	adds	r2, #0x2
 8003790:      	ldrb	r1, [r1, r2]
 8003792:      	strb	r1, [r0, r2]
 8003794:      	ldr	r8, [sp], #4
 8003798:      	pop	{r4, r5, r6, r7, pc}
 800379a:      	sub.w	lr, r12, r2
 800379e:      	add.w	r8, r1, #0x1
 80037a2:      	adds	r4, r0, #0x1
 80037a4:      	mvn	r2, #0x3
 80037a8:      	add.w	r5, r8, r2
 80037ac:      	adds	r3, r4, r2
 80037ae:      	adds	r2, #0x4
 80037b0:      	ldrb	r6, [r5, #0x3]
 80037b2:      	strb	r6, [r3, #0x3]
 80037b4:      	ldrb	r6, [r5, #0x4]
 80037b6:      	strb	r6, [r3, #0x4]
 80037b8:      	ldrb	r6, [r5, #0x5]
 80037ba:      	strb	r6, [r3, #0x5]
 80037bc:      	ldrb	r5, [r5, #0x6]
 80037be:      	strb	r5, [r3, #0x6]
 80037c0:      	add.w	r3, lr, r2
 80037c4:      	adds	r3, #0x4
 80037c6:      	bne	#-0x22 <__aeabi_memcpy+0x4c>
 80037c8:      	adds	r2, #0x4
 80037ca:      	cmp.w	r12, #0x0
 80037ce:      	bne	#-0x5a <__aeabi_memcpy+0x1c>
 80037d0:      	ldr	r8, [sp], #4
 80037d4:      	pop	{r4, r5, r6, r7, pc}

080037d6 __aeabi_memcpy4:
 80037d6:      	cmp	r2, #0x4
 80037d8:      	it	lo
 80037da:      	blo.w	#-0x82 <__aeabi_memcpy>
 80037de:      	push	{r4, r5, r7, lr}
 80037e0:      	add	r7, sp, #0x8
 80037e2:      	sub.w	r12, r2, #0x4
 80037e6:      	movs	r3, #0x1
 80037e8:      	add.w	r3, r3, r12, lsr #2
 80037ec:      	ands	r3, r3, #0x3
 80037f0:      	beq	#0x1c <__aeabi_memcpy4+0x3a>
 80037f2:      	mov	lr, r1
 80037f4:      	mov	r4, r0
 80037f6:      	ldr	r5, [lr], #4
 80037fa:      	cmp	r3, #0x1
 80037fc:      	str	r5, [r4], #4
 8003800:      	bne	#0x3e <__aeabi_memcpy4+0x6c>
 8003802:      	mov	r3, r12
 8003804:      	mov	r0, r4
 8003806:      	mov	r1, lr
 8003808:      	cmp.w	r12, #0xc
 800380c:      	bhs	#0x8 <__aeabi_memcpy4+0x42>
 800380e:      	b	#0x24 <__aeabi_memcpy4+0x60>
 8003810:      	mov	r3, r2
 8003812:      	cmp.w	r12, #0xc
 8003816:      	blo	#0x1c <__aeabi_memcpy4+0x60>
 8003818:      	ldr	r5, [r1]
 800381a:      	subs	r3, #0x10
 800381c:      	str	r5, [r0]
 800381e:      	cmp	r3, #0x3
 8003820:      	ldr	r5, [r1, #0x4]
 8003822:      	str	r5, [r0, #0x4]
 8003824:      	ldr	r5, [r1, #0x8]
 8003826:      	str	r5, [r0, #0x8]
 8003828:      	ldr	r5, [r1, #0xc]
 800382a:      	add.w	r1, r1, #0x10
 800382e:      	str	r5, [r0, #0xc]
 8003830:      	add.w	r0, r0, #0x10
 8003834:      	bhi	#-0x20 <__aeabi_memcpy4+0x42>
 8003836:      	and	r2, r2, #0x3
 800383a:      	pop.w	{r4, r5, r7, lr}
 800383e:      	b.w	#-0xe6 <__aeabi_memcpy>
 8003842:      	ldr	r5, [r1, #0x4]
 8003844:      	cmp	r3, #0x2
 8003846:      	str	r5, [r0, #0x4]
 8003848:      	bne	#0xe <__aeabi_memcpy4+0x84>
 800384a:      	sub.w	r3, r2, #0x8
 800384e:      	adds	r1, #0x8
 8003850:      	adds	r0, #0x8
 8003852:      	cmp.w	r12, #0xc
 8003856:      	bhs	#-0x42 <__aeabi_memcpy4+0x42>
 8003858:      	b	#-0x26 <__aeabi_memcpy4+0x60>
 800385a:      	ldr	r3, [r1, #0x8]
 800385c:      	adds	r1, #0xc
 800385e:      	str	r3, [r0, #0x8]
 8003860:      	sub.w	r3, r2, #0xc
 8003864:      	adds	r0, #0xc
 8003866:      	cmp.w	r12, #0xc
 800386a:      	bhs	#-0x56 <__aeabi_memcpy4+0x42>
 800386c:      	b	#-0x3a <__aeabi_memcpy4+0x60>

0800386e Reset:
; pub unsafe extern "C" fn Reset() -> ! {
 800386e:      	push	{r7, lr}
 8003870:      	mov	r7, sp
;     __pre_init();
 8003872:      	bl	#0x74
 8003876:      	b	#-0x2 <Reset+0xa>
;     r0::zero_bss(&mut __sbss, &mut __ebss);
 8003878:      	movw	r0, #0x0
 800387c:      	movt	r0, #0x2000
 8003880:      	movw	r1, #0x4
 8003884:      	movt	r1, #0x2000
 8003888:      	bl	#0x60
 800388c:      	b	#-0x2 <Reset+0x20>
;     r0::init_data(&mut __sdata, &mut __edata, &__sidata);
 800388e:      	movw	r0, #0x0
 8003892:      	movt	r0, #0x2000
 8003896:      	movw	r1, #0x0
 800389a:      	movt	r1, #0x2000
 800389e:      	movw	r2, #0x40e0
 80038a2:      	movt	r2, #0x800
 80038a6:      	bl	#0x86
 80038aa:      	b	#-0x2 <Reset+0x3e>
 80038ac:      	movw	r0, #0xed88
 80038b0:      	movt	r0, #0xe000
;                 *SCB_CPACR | SCB_CPACR_FPU_ENABLE | SCB_CPACR_FPU_USER,
 80038b4:      	ldr	r1, [r0]
 80038b6:      	orr	r1, r1, #0xf00000
;             core::ptr::write_volatile(
 80038ba:      	bl	#-0x1f36
 80038be:      	b	#-0x2 <Reset+0x52>
;             trampoline()
 80038c0:      	bl	#0x2
 80038c4:      	trap

080038c6 ResetTrampoline:
;             fn trampoline() -> ! {
 80038c6:      	push	{r7, lr}
 80038c8:      	mov	r7, sp
;                 unsafe { main() }
 80038ca:      	bl	#-0x36de
 80038ce:      	trap

080038d0 DefaultHandler_:
; pub unsafe extern "C" fn DefaultHandler_() -> ! {
 80038d0:      	push	{r7, lr}

080038d1 WWDG:
 80038d1:      	ldr	r5, [r6, #0x78]
 80038d3:      	strh	r6, [r0, #0x12]
 80038d5:      	<unknown>
;     loop {
 80038d6:      	b	#-0x2 <WWDG+0x7>
 80038d8:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 80038da:      	strb	r0, [r7, #-1]
 80038de:      	ldrb	r0, [r7, #-1]
 80038e2:      	bl	#0xea
 80038e6:      	b	#-0x2 <WWDG+0x17>
;     loop {
 80038e8:      	b	#-0x14 <WWDG+0x7>

080038ea DefaultPreInit:
; pub unsafe extern "C" fn DefaultPreInit() {}
 80038ea:      	bx	lr

080038eb __pre_init:
 80038eb:      	strh	r7, [r0, #0x2]

080038ec r0::zero_bss::h0ee016013fe97936:
; pub unsafe fn zero_bss<T>(mut sbss: *mut T, ebss: *mut T)
 80038ec:      	push	{r7, lr}
 80038ee:      	mov	r7, sp
 80038f0:      	sub	sp, #0x18
 80038f2:      	str	r0, [sp, #0x10]
 80038f4:      	str	r1, [sp, #0x14]
 80038f6:      	str	r1, [sp, #0xc]
 80038f8:      	b	#-0x2 <r0::zero_bss::h0ee016013fe97936+0xe>
;     while sbss < ebss {
 80038fa:      	ldr	r0, [sp, #0x10]
 80038fc:      	ldr	r1, [sp, #0xc]
 80038fe:      	cmp	r0, r1
 8003900:      	blo	#0x4 <r0::zero_bss::h0ee016013fe97936+0x1c>
 8003902:      	b	#-0x2 <r0::zero_bss::h0ee016013fe97936+0x18>
; }
 8003904:      	add	sp, #0x18
 8003906:      	pop	{r7, pc}
;         ptr::write_volatile(sbss, mem::zeroed());
 8003908:      	ldr	r0, [sp, #0x10]
 800390a:      	str	r0, [sp, #0x8]
 800390c:      	bl	#0x7a
 8003910:      	str	r0, [sp, #0x4]
 8003912:      	b	#-0x2 <r0::zero_bss::h0ee016013fe97936+0x28>
 8003914:      	ldr	r0, [sp, #0x8]
 8003916:      	ldr	r1, [sp, #0x4]
 8003918:      	bl	#-0x1f94
 800391c:      	b	#-0x2 <r0::zero_bss::h0ee016013fe97936+0x32>
;         sbss = sbss.offset(1);
 800391e:      	ldr	r0, [sp, #0x10]
 8003920:      	movs	r1, #0x1
 8003922:      	bl	#0x78
 8003926:      	str	r0, [sp]
 8003928:      	b	#-0x2 <r0::zero_bss::h0ee016013fe97936+0x3e>
 800392a:      	ldr	r0, [sp]
 800392c:      	str	r0, [sp, #0x10]
;     while sbss < ebss {
 800392e:      	b	#-0x38 <r0::zero_bss::h0ee016013fe97936+0xe>

08003930 r0::init_data::h4e230516a69051ab:
; pub unsafe fn init_data<T>(
 8003930:      	push	{r7, lr}
 8003932:      	mov	r7, sp
 8003934:      	sub	sp, #0x20
 8003936:      	str	r0, [sp, #0x14]
 8003938:      	str	r2, [sp, #0x18]
 800393a:      	str	r1, [sp, #0x1c]
 800393c:      	str	r1, [sp, #0x10]
 800393e:      	b	#-0x2 <r0::init_data::h4e230516a69051ab+0x10>
;     while sdata < edata {
 8003940:      	ldr	r0, [sp, #0x14]
 8003942:      	ldr	r1, [sp, #0x10]
 8003944:      	cmp	r0, r1
 8003946:      	blo	#0x4 <r0::init_data::h4e230516a69051ab+0x1e>
 8003948:      	b	#-0x2 <r0::init_data::h4e230516a69051ab+0x1a>
; }
 800394a:      	add	sp, #0x20
 800394c:      	pop	{r7, pc}
;         ptr::write(sdata, ptr::read(sidata));
 800394e:      	ldr	r0, [sp, #0x14]
 8003950:      	ldr	r1, [sp, #0x18]
 8003952:      	str	r0, [sp, #0xc]
 8003954:      	mov	r0, r1
 8003956:      	bl	#-0x1fc4
 800395a:      	str	r0, [sp, #0x8]
 800395c:      	b	#-0x2 <r0::init_data::h4e230516a69051ab+0x2e>
 800395e:      	ldr	r0, [sp, #0xc]
 8003960:      	ldr	r1, [sp, #0x8]
 8003962:      	bl	#-0x1f9c
 8003966:      	b	#-0x2 <r0::init_data::h4e230516a69051ab+0x38>
;         sdata = sdata.offset(1);
 8003968:      	ldr	r0, [sp, #0x14]
 800396a:      	movs	r1, #0x1
 800396c:      	bl	#0x2e
 8003970:      	str	r0, [sp, #0x4]
 8003972:      	b	#-0x2 <r0::init_data::h4e230516a69051ab+0x44>
 8003974:      	ldr	r0, [sp, #0x4]
 8003976:      	str	r0, [sp, #0x14]
;         sidata = sidata.offset(1);
 8003978:      	ldr	r0, [sp, #0x18]
 800397a:      	movs	r1, #0x1
 800397c:      	bl	#0x36
 8003980:      	str	r0, [sp]
 8003982:      	b	#-0x2 <r0::init_data::h4e230516a69051ab+0x54>
 8003984:      	ldr	r0, [sp]
 8003986:      	str	r0, [sp, #0x18]
;     while sdata < edata {
 8003988:      	b	#-0x4c <r0::init_data::h4e230516a69051ab+0x10>

0800398a core::mem::zeroed::hc4675cc931802a8d:
 800398a:      	sub	sp, #0x8
 800398c:      	b	#-0x2 <core::mem::zeroed::hc4675cc931802a8d+0x4>
 800398e:      	movs	r0, #0x0
 8003990:      	str	r0, [sp, #0x4]
 8003992:      	ldr	r0, [sp, #0x4]
 8003994:      	str	r0, [sp]
 8003996:      	b	#-0x2 <core::mem::zeroed::hc4675cc931802a8d+0xe>
 8003998:      	ldr	r0, [sp]
 800399a:      	add	sp, #0x8
 800399c:      	bx	lr

0800399e core::ptr::mut_ptr::<impl *mut T>::offset::hfd4beb557223f9df:
 800399e:      	sub	sp, #0x10
 80039a0:      	str	r0, [sp, #0x4]
 80039a2:      	str	r1, [sp, #0x8]
 80039a4:      	add.w	r0, r0, r1, lsl #2
 80039a8:      	str	r0, [sp, #0xc]
 80039aa:      	ldr	r0, [sp, #0xc]
 80039ac:      	str	r0, [sp]
 80039ae:      	b	#-0x2 <core::ptr::mut_ptr::<impl *mut T>::offset::hfd4beb557223f9df+0x12>
 80039b0:      	ldr	r0, [sp]
 80039b2:      	add	sp, #0x10
 80039b4:      	bx	lr

080039b6 core::ptr::const_ptr::<impl *const T>::offset::h3f37ef3a84806e82:
 80039b6:      	sub	sp, #0x10
 80039b8:      	str	r0, [sp, #0x4]
 80039ba:      	str	r1, [sp, #0x8]
 80039bc:      	add.w	r0, r0, r1, lsl #2
 80039c0:      	str	r0, [sp, #0xc]
 80039c2:      	ldr	r0, [sp, #0xc]
 80039c4:      	str	r0, [sp]
 80039c6:      	b	#-0x2 <core::ptr::const_ptr::<impl *const T>::offset::h3f37ef3a84806e82+0x12>
 80039c8:      	ldr	r0, [sp]
 80039ca:      	add	sp, #0x10
 80039cc:      	bx	lr
 80039ce:      	bmi	#-0x58 <r0::init_data::h4e230516a69051ab+0x4a>

080039d0 core::sync::atomic::compiler_fence::he100faa01b2f5981:
 80039d0:      	push	{r7, lr}
 80039d2:      	mov	r7, sp
 80039d4:      	sub	sp, #0x10
 80039d6:      	mov	r1, r0
 80039d8:      	strb	r0, [r7, #-5]
 80039dc:      	ldrb	r0, [r7, #-5]
 80039e0:      	str	r0, [sp, #0x4]
 80039e2:      	ldr	r1, [sp, #0x4]
 80039e4:      	tbb	[pc, r1]

080039e8 $d.1:
 80039e8:	03 11 10 12	.word	0x12101103
 80039ec:	13 00		.short	0x0013

080039ee $t.2:
 80039ee:      	movw	r0, #0x4054
 80039f2:      	movt	r0, #0x800
 80039f6:      	movw	r2, #0x40d0
 80039fa:      	movt	r2, #0x800
 80039fe:      	movs	r1, #0x32
 8003a00:      	bl	#-0x1b24
 8003a04:      	trap
 8003a06:      	trap
 8003a08:      	b	#0x4 <$t.2+0x22>
 8003a0a:      	b	#0x2 <$t.2+0x22>
 8003a0c:      	b	#0x0 <$t.2+0x22>
 8003a0e:      	b	#-0x2 <$t.2+0x22>
 8003a10:      	add	sp, #0x10
 8003a12:      	pop	{r7, pc}

08003a14 HardFaultTrampoline:
 8003a14:      	mov	r0, lr
 8003a16:      	movs	r1, #0x4
 8003a18:      	tst	r0, r1
 8003a1a:      	bne	#0x4 <HardFaultTrampoline+0xe>
 8003a1c:      	mrs	r0, msp
 8003a20:      	b	#0x4 <HardFault_>
 8003a22:      	mrs	r0, psp
 8003a26:      	b	#-0x2 <HardFault_>

08003a28 HardFault_:
; pub unsafe extern "C" fn HardFault_(ef: &ExceptionFrame) -> ! {
 8003a28:      	push	{r7, lr}

08003a29 HardFault:
 8003a29:      	ldr	r5, [r6, #0x78]
 8003a2b:      	strh	r6, [r0, #0x12]
 8003a2d:      	lsls	r0, r6, #0x6
 8003a2f:      	<unknown>
;     loop {
 8003a30:      	b	#-0x2 <HardFault+0x9>
 8003a32:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 8003a34:      	strb	r0, [r7, #-5]
 8003a38:      	ldrb	r0, [r7, #-5]
 8003a3c:      	bl	#-0x70
 8003a40:      	b	#-0x2 <HardFault+0x19>
;     loop {
 8003a42:      	b	#-0x14 <HardFault+0x9>
